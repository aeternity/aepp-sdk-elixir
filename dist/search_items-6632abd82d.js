searchNodes=[{"ref":"AeppSDK.AENS.html","title":"AeppSDK.AENS","type":"module","doc":"Module for Aeternity Naming System, see: https://github.com/aeternity/protocol/blob/master/AENS.md. Contains all naming-related functionality. In order for its functions to be used, a client must be defined first. Client example can be found at: AeppSDK.Client.new/4."},{"ref":"AeppSDK.AENS.html#claim/2","title":"AeppSDK.AENS.claim/2","type":"function","doc":"Claims a name. Example iex&gt; client |&gt; AeppSDK.AENS.preclaim(&quot;a1234567890asdfghjkl.chain&quot;) |&gt; AeppSDK.AENS.claim() {:ok, %{ block_hash: &quot;mh_YyiddDH57Azdztir1s8zgtLXZpBAK1xNBSisCMxSUSJA4MNE3&quot;, block_height: 23, client: %AeppSDK.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: #Function&lt;1.83545712/0 in AeppSDK.Client.new/5&gt; }, network_id: &quot;my_test&quot; }, name: &quot;a1234567890asdfghjkl.chain&quot;, tx_hash: &quot;th_257jfXcwXS51z1x3zDBdU5auHTjWPAbhhYJEtAwhM7Aby3Syf4&quot; }}"},{"ref":"AeppSDK.AENS.html#claim/4","title":"AeppSDK.AENS.claim/4","type":"function","doc":"Claims a name. Example iex&gt; name = &quot;a1234567890asdfghjkl.chain&quot; iex&gt; name_salt = 149_218_901_844_062_129 iex&gt; AeppSDK.AENS.claim(client, name, name_salt) {:ok, %{ block_hash: &quot;mh_41E9iE61koF8AQLMvjTkRJ3N23yne4UXmqn5jeUn1GDrScV7A&quot;, block_height: 80, client: %AeppSDK.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: #Function&lt;1.83545712/0 in AeppSDK.Client.new/5&gt; }, network_id: &quot;my_test&quot; }, name: &quot;a1234567890asdfghjkl.chain&quot;, tx_hash: &quot;th_257jfXcwXS51z1x3zDBdU5auHTjWPAbhhYJEtAwhM7Aby3Syf4&quot; }}"},{"ref":"AeppSDK.AENS.html#preclaim/3","title":"AeppSDK.AENS.preclaim/3","type":"function","doc":"Preclaims a name. Example iex&gt; name = &quot;a1234567890asdfghjkl.chain&quot; iex&gt; AeppSDK.AENS.preclaim(client, name, salt: 149_218_901_844_062_129) {:ok, %{ block_hash: &quot;mh_Dumv7aK8Nb8Cedm7z1tMvWDMhVZqoc1VHbEgb1V484tZssK6d&quot;, block_height: 86, client: %AeppSDK.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: #Function&lt;1.83545712/0 in AeppSDK.Client.new/5&gt; }, network_id: &quot;my_test&quot; }, name: &quot;a1234567890asdfghjkl.chain&quot;, name_salt: 149218901844062129,, tx_hash: &quot;th_wYo5DLruahJrkFwjH5Jji6HsRMbPZBxeJKmRwg8QEyKVYrXGd&quot; }}"},{"ref":"AeppSDK.AENS.html#revoke/2","title":"AeppSDK.AENS.revoke/2","type":"function","doc":"Revokes a name. Example iex&gt; name = &quot;a1234567890asdfghjkl.chain&quot; iex&gt; client |&gt; AeppSDK.AENS.preclaim(name) |&gt; AeppSDK.AENS.claim() |&gt; AeppSDK.AENS.revoke() {:ok, %{ block_hash: &quot;mh_21fw4AryJSGKkdaQsigFQwkydfFVbN2mY7G5pRvwq7rp4zmfYC&quot;, block_height: 24, client: %AeppSDK.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: #Function&lt;1.83545712/0 in AeppSDK.Client.new/5&gt; }, network_id: &quot;my_test&quot; }, name: &quot;a1234567890asdfghjkl.chain&quot;, tx_hash: &quot;th_2sGNfvv59tyGEk3fqQSXryzt25uuShA6Zabb3Wjkyt77cWRWFW&quot; }}"},{"ref":"AeppSDK.AENS.html#revoke_name/3","title":"AeppSDK.AENS.revoke_name/3","type":"function","doc":"Revokes a name. Example iex&gt; name = &quot;a1234567890asdfghjkl.chain&quot; iex&gt; AeppSDK.AENS.revoke_name(client, name) {:ok, %{ block_hash: &quot;mh_21fw4AryJSGKkdaQsigFQwkydfFVbN2mY7G5pRvwq7rp4zmfYC&quot;, block_height: 24, client: %AeppSDK.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: #Function&lt;1.83545712/0 in AeppSDK.Client.new/5&gt; }, network_id: &quot;my_test&quot; }, name: &quot;a1234567890asdfghjkl.chain&quot;, tx_hash: &quot;th_2sGNfvv59tyGEk3fqQSXryzt25uuShA6Zabb3Wjkyt77cWRWFW&quot; }}"},{"ref":"AeppSDK.AENS.html#transfer/3","title":"AeppSDK.AENS.transfer/3","type":"function","doc":"Transfers a name. Example iex&gt; name = &quot;a1234567890asdfghjkl.chain&quot; iex&gt; recipient_key = &quot;ak_nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv&quot; iex&gt; client |&gt; AeppSDK.AENS.preclaim(name) |&gt; AeppSDK.AENS.claim() |&gt; AeppSDK.AENS.transfer(recipient_key) {:ok, %{ block_hash: &quot;mh_NSyuLSvbB1v4R8nz8ZCLLHQXCHtsBntNyYbWdeKTadFm8Y5nB&quot;, block_height: 35, client: %AeppSDK.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;#Function&lt;1.83545712/0 in AeppSDK.Client.new/5&gt; }, network_id: &quot;my_test&quot; }, name: &quot;a1234567890asdfghjkl.chain&quot;, recipient_id: &quot;ak_nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv&quot;, tx_hash: &quot;th_2Bxxz5j4rexSCRC227oR4E6zBD14MCFh2qhZoNMDiCjzpVv8Qi&quot; }}"},{"ref":"AeppSDK.AENS.html#transfer_name/4","title":"AeppSDK.AENS.transfer_name/4","type":"function","doc":"Transfers a name. Example iex&gt; name = &quot;a1234567890asdfghjkl.chain&quot; iex&gt; recipient_key = &quot;ak_nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv&quot; iex&gt; AeppSDK.AENS.transfer_name(client, name, recipient_key) {:ok, %{ block_hash: &quot;mh_NSyuLSvbB1v4R8nz8ZCLLHQXCHtsBntNyYbWdeKTadFm8Y5nB&quot;, block_height: 35, client: %AeppSDK.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: #Function&lt;1.83545712/0 in AeppSDK.Client.new/5&gt; }, network_id: &quot;my_test&quot; }, name: &quot;a1234567890asdfghjkl.chain&quot;, recipient_id: &quot;ak_nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv&quot;, tx_hash: &quot;th_2Bxxz5j4rexSCRC227oR4E6zBD14MCFh2qhZoNMDiCjzpVv8Qi&quot; }}"},{"ref":"AeppSDK.AENS.html#update/2","title":"AeppSDK.AENS.update/2","type":"function","doc":"Updates a name. Example iex&gt; name = &quot;a1234567890asdfghjkl.chain&quot; iex&gt; name_ttl = 49_999 iex&gt; pointers = [ {AeppSDK.Utils.Keys.public_key_to_binary(&quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;), AeppSDK.Utils.Serialization.id_to_record( AeppSDK.Utils.Keys.public_key_to_binary(&quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;), :account )}] iex&gt; client_ttl = 50_000 iex&gt; client |&gt; AeppSDK.AENS.preclaim(name) |&gt; AeppSDK.AENS.claim() |&gt; AeppSDK.AENS.update(pointers: pointers, name_ttl: name_ttl, client_ttl: client_ttl) {:ok, %{ block_hash: &quot;mh_bDauziEPcfsqZQMyBqLX2grxiD9p9iorsF2utsaCZQtwrEX2T&quot;, block_height: 41, client: %AeppSDK.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: #Function&lt;1.83545712/0 in AeppSDK.Client.new/5&gt; }, network_id: &quot;my_test&quot; }, client_ttl: 50000, name: &quot;a1234567890asdfghjkl.chain&quot;, name_ttl: 49999, pointers: [ {&lt;&lt;11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97&gt;&gt;, {:id, :account, &lt;&lt;11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97&gt;&gt;}} ], tx_hash: &quot;th_XV3mn79qzc5foq67JuiXWCaCK2yZzbHuk8knvkQtTNMDaa7JB&quot; }}"},{"ref":"AeppSDK.AENS.html#update_name/3","title":"AeppSDK.AENS.update_name/3","type":"function","doc":"Updates a name. Example iex&gt; name = &quot;a1234567890asdfghjkl.chain&quot; iex&gt; name_ttl = 49_999 iex&gt; pointers = [ {AeppSDK.Utils.Keys.public_key_to_binary(&quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;), AeppSDK.Utils.Serialization.id_to_record( AeppSDK.Utils.Keys.public_key_to_binary(&quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;), :account )}] iex&gt; client_ttl = 50_000 iex&gt; AeppSDK.AENS.update_name(client, name, name_ttl: name_ttl, pointers: pointers, client_ttl: client_ttl) {:ok, %{ block_hash: &quot;mh_bDauziEPcfsqZQMyBqLX2grxiD9p9iorsF2utsaCZQtwrEX2T&quot;, block_height: 41, client: %AeppSDK.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: #Function&lt;1.83545712/0 in AeppSDK.Client.new/5&gt; }, network_id: &quot;my_test&quot; }, client_ttl: 50000, name: &quot;a1234567890asdfghjkl.chain&quot;, name_ttl: 49999, pointers: [ {&lt;&lt;11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97&gt;&gt;, {:id, :account, &lt;&lt;11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97&gt;&gt;}} ], tx_hash: &quot;th_XV3mn79qzc5foq67JuiXWCaCK2yZzbHuk8knvkQtTNMDaa7JB&quot; }}"},{"ref":"AeppSDK.AENS.html#validate_name/1","title":"AeppSDK.AENS.validate_name/1","type":"function","doc":"Validates a name. Example iex&gt; name = &quot;a1234567890asdfghjkl.chain&quot; iex&gt; AeppSDK.AENS.validate_name(name) {:ok, &quot;a1234567890asdfghjkl.chain&quot;}"},{"ref":"AeppSDK.AENS.html#t:aens_options/0","title":"AeppSDK.AENS.aens_options/0","type":"type","doc":""},{"ref":"AeppSDK.AENS.html#t:preclaim_options/0","title":"AeppSDK.AENS.preclaim_options/0","type":"type","doc":""},{"ref":"AeppSDK.AENS.html#t:update_options/0","title":"AeppSDK.AENS.update_options/0","type":"type","doc":""},{"ref":"AeppSDK.Account.html","title":"AeppSDK.Account","type":"module","doc":"High-level module for Account-related activities. In order for its functions to be used, a client must be defined first. Client example can be found at: AeppSDK.Client.new/4"},{"ref":"AeppSDK.Account.html#balance/2","title":"AeppSDK.Account.balance/2","type":"function","doc":"Get an account&#39;s balance Example iex&gt; pubkey = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; AeppSDK.Account.balance(client, pubkey) {:ok, 1652992279192254044805}"},{"ref":"AeppSDK.Account.html#balance/3","title":"AeppSDK.Account.balance/3","type":"function","doc":"Get an account&#39;s balance at a given block hash Example iex&gt; pubkey = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; block_hash = &quot;kh_2XteYFUyUYjnMDJzHszhHegpoV59QpWTLnMPw5eohsXntzdf6P&quot; iex&gt; AeppSDK.Account.balance(client, pubkey, block_hash) {:ok, 1653014562214254044805}"},{"ref":"AeppSDK.Account.html#get/1","title":"AeppSDK.Account.get/1","type":"function","doc":"Get an actual account information Example iex&gt; AeppSDK.Account.get(client) {:ok, %{ auth_fun: nil, balance: 151688000000000000000, contract_id: nil, id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, kind: &quot;basic&quot;, nonce: 0, payable: true }}"},{"ref":"AeppSDK.Account.html#get/2","title":"AeppSDK.Account.get/2","type":"function","doc":"Get an actual account information Example iex&gt; pubkey = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; AeppSDK.Account.get(client, pubkey) {:ok, %{ auth_fun: nil, balance: 151688000000000000000, contract_id: nil, id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, kind: &quot;basic&quot;, nonce: 0, payable: true }}"},{"ref":"AeppSDK.Account.html#get/3","title":"AeppSDK.Account.get/3","type":"function","doc":"Get an account at a given block hash Example iex&gt; pubkey = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; block_hash = &quot;kh_2XteYFUyUYjnMDJzHszhHegpoV59QpWTLnMPw5eohsXntzdf6P&quot; iex&gt; AeppSDK.Account.get(client, pubkey, block_hash) {:ok, %{ auth_fun: nil, balance: 1653014562214254044805, contract_id: nil, id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, kind: &quot;basic&quot;, nonce: 11837 }}"},{"ref":"AeppSDK.Account.html#spend/4","title":"AeppSDK.Account.spend/4","type":"function","doc":"Send tokens to an account. Example iex&gt; public_key = &quot;ak_nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv&quot; iex&gt; AeppSDK.Account.spend(client, public_key, 10_000_000) {:ok, %{ block_hash: &quot;mh_2hM7ZkifnstA9HEdpZRwKjZgNUSrkVmrB1jmCgG7Ly2b1vF7t&quot;, block_height: 74871, tx_hash: &quot;th_FBqci65KYGsup7GettzvWVxP91podgngX9EJK2BDiduFf8FY4&quot; }}"},{"ref":"AeppSDK.Account.html#t:account/0","title":"AeppSDK.Account.account/0","type":"type","doc":""},{"ref":"AeppSDK.Account.html#t:spend_options/0","title":"AeppSDK.Account.spend_options/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html","title":"AeppSDK.Chain","type":"module","doc":"Contains all chain-related functionality. In order for its functions to be used, a client must be defined first. Client example can be found at: AeppSDK.Client.new/4."},{"ref":"AeppSDK.Chain.html#await_height/3","title":"AeppSDK.Chain.await_height/3","type":"function","doc":"Wait for the chain to reach specific height Example iex&gt; AeppSDK.Chain.await_height(client, 84_590) :ok"},{"ref":"AeppSDK.Chain.html#await_transaction/3","title":"AeppSDK.Chain.await_transaction/3","type":"function","doc":"Wait for a transaction to be mined Example iex&gt; transaction_hash = &quot;th_232gp9o5Lm1XZ8SMaDCAnLcvyj2CkDkf5tssfD5yVAoFAnPBm7&quot; iex&gt; AeppSDK.Chain.await_transaction(client, transaction_hash) :ok"},{"ref":"AeppSDK.Chain.html#dry_run/4","title":"AeppSDK.Chain.dry_run/4","type":"function","doc":"Dry-run transactions on top of a given block Example iex&gt; transactions = [&quot;tx_+N8rAaEBC7TteSf5e1HhvLXhNA0SM1sqKxLIvFIh1jxLyznUHmGCIIehBfZ7ZdL+i0DaHZpf8m42K6cj3on94Wg6F2eruDXsh5g6AYcFKtwr02gAAACDD0JAhDuaygC4gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgcMIbP6v40neQ7iIeZN4CbwwLC1JWUjXOkZs8Dc7Wtz4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhIqvyBw==&quot;] iex&gt; accounts = [ %{ pubkey: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, amount: 1651002120672731042209 } ] iex&gt; block_hash = &quot;kh_WPQzXtyDiwvUs54N1L88YsLPn51PERHF76bqcMhpT5vnrAEAT&quot; iex&gt; AeppSDK.Chain.dry_run(client, transactions, accounts, block_hash) {:ok, [ %{ call_obj: %{ caller_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, caller_nonce: 8327, contract_id: &quot;ct_2sZ43ScybbzKkd4iFMuLJw7uQib1dpUB8VDi9pLkALV5BpXXNR&quot;, gas_price: 1000000000, gas_used: 252, height: 61481, log: [], return_type: &quot;ok&quot;, return_value: &quot;cb_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEvrXnzA&quot; }, reason: nil, result: &quot;ok&quot;, type: &quot;contract_call&quot; } ]}"},{"ref":"AeppSDK.Chain.html#get_current_generation/1","title":"AeppSDK.Chain.get_current_generation/1","type":"function","doc":"Get current generation Example iex&gt; AeppSDK.Chain.get_current_generation(client) {:ok, %{ key_block: %{ beneficiary: &quot;ak_2iBPH7HUz3cSDVEUWiHg76MZJ6tZooVNBmmxcgVK6VV8KAE688&quot;, hash: &quot;kh_LVmMAyjcTtcLTh76STB9gJoAzpXdZBgwtiYX2rC98tkzRpUt8&quot;, height: 84552, info: &quot;cb_AAAAAfy4hFE=&quot;, miner: &quot;ak_rPG4k1G8MsbdVdgisDXAs95htP94eYeJHPdotCvdJUbNLXmVz&quot;, nonce: 1040728877473258350, pow: [1816785, 4563830, 6535791, 7371744, 15431122, 25810590, 38354710, 41068269, 49508987, 61851964, 64661610, 64916450, 73480578, 82460245, 84205198, 110560762, 119763104, 126778601, 131361835, 152044373, 175440084, 229990565, 232441141, 246507939, 256839457, 267089067, 281126946, 297684504, 358409889, 368048805, 374727588, 389428641, 395353074, 412257533, 448812603, 460866874, 468707889, 478197976, 483791458, 492777525, ...], prev_hash: &quot;mh_ZAX9bfDJVRU4yBZVJBjYHrSpWqEfjvTmjhRReAxMH1Tb4aX6D&quot;, prev_key_hash: &quot;kh_sqnNrjX4s7uvwBksHK9hgq736vJvGakoB8DjVgqvzymjEiodP&quot;, state_hash: &quot;bs_qPF68kYqsw3qNWscQX883gi4XSRvy8K1AyAo6xKmCe22wYiHq&quot;, target: 538023502, time: 1558614496897, version: 3 }, micro_blocks: [] }}"},{"ref":"AeppSDK.Chain.html#get_generation/2","title":"AeppSDK.Chain.get_generation/2","type":"function","doc":"Get a generation by height Example iex&gt; height = 84_551 iex&gt; AeppSDK.Chain.get_generation(client, height) {:ok, %{ key_block: %{ beneficiary: &quot;ak_QFqo5LsvnCxdMK184Rf8aeuQa5JWGf3n8dex2iSGqYE3mzWFn&quot;, hash: &quot;kh_sqnNrjX4s7uvwBksHK9hgq736vJvGakoB8DjVgqvzymjEiodP&quot;, height: 84551, info: &quot;cb_AAAAAfy4hFE=&quot;, miner: &quot;ak_22cVmvsZq8vLxMTZjWcggZ5HQQi2RRF7UrAjMwQ5tCd1kCsNBb&quot;, nonce: 8590250258, pow: [4270548, 4672365, 26145245, 46020752, 50518165, 61725479, 82664155, 101009367, 123337852, 136176634, 152345694, 154969206, 180766968, 182806912, 197514003, 198196883, 199214273, 202117489, 202413040, 237707860, 261164171, 288613351, 298097639, 304490763, 314326968, 348389855, 355561157, 363125716, 364007441, 382373111, 384879255, 393259024, 411552709, 427321732, 430989208, 440655342, 468506638, 482430386, 488147407, 504275453, ...], prev_hash: &quot;kh_2VZKBkQnR6JTo2WikRoUNtGNgfQD8FsqKAMXfrR8WKxrPd3Zdr&quot;, prev_key_hash: &quot;kh_2VZKBkQnR6JTo2WikRoUNtGNgfQD8FsqKAMXfrR8WKxrPd3Zdr&quot;, state_hash: &quot;bs_kWVRFL9VqTcBjsT56SHLsJWryemyTJnFwEBzaJ6aA7btYrKZ5&quot;, target: 538041170, time: 1558614345333, version: 3 }, micro_blocks: [&quot;mh_NN4Tr4w6UBEobHucDNAFRn2sba12f9PFtvPDAAe2idBx3Ymsv&quot;, &quot;mh_cXozyVg6968P68cWcNGYHsHsGX9yVoZUGc56APx7z3wo2Vzh2&quot;, &quot;mh_2XDQytSS9v39aQdBLioXz3pvYrjWFeVcK2hL8xHzj79QL54Lz6&quot;, &quot;mh_GDkX5cqPgq4C2W9QpncMAfsUqbVXSh6nrMAKcPtHiAx9uGURf&quot;, &quot;mh_59ZnCtvjvp5nT6Q8QfZhnmRkjEy38BcJ3VS47wwMRCDxNYUQE&quot;, &quot;mh_ZAX9bfDJVRU4yBZVJBjYHrSpWqEfjvTmjhRReAxMH1Tb4aX6D&quot;] }}"},{"ref":"AeppSDK.Chain.html#get_key_block/2","title":"AeppSDK.Chain.get_key_block/2","type":"function","doc":"Get a key block by height Example iex&gt; key_block_height = 84_547 iex&gt; AeppSDK.Chain.get_key_block(client, key_block_height) {:ok, %{ beneficiary: &quot;ak_2iBPH7HUz3cSDVEUWiHg76MZJ6tZooVNBmmxcgVK6VV8KAE688&quot;, hash: &quot;kh_2XteYFUyUYjnMDJzHszhHegpoV59QpWTLnMPw5eohsXntzdf6P&quot;, height: 84547, info: &quot;cb_AAAAAfy4hFE=&quot;, miner: &quot;ak_HvaKBash8o8FEKVdm5a8qo2j8vx5NKxH2P4RrQMQGokdjo5C2&quot;, nonce: 2093870402648332570, pow: [1290617, 3493169, 6212474, 17228667, 52038371, 120922973, 138413619, 159935660, 177319436, 178097802, 207343351, 226920891, 291582142, 313980921, 320129338, 320796969, 332416956, 346721320, 348325254, 351068507, 362644921, 374166089, 393961637, 393998472, 398351923, 398567840, 405562469, 408022294, 408391855, 450435185, 451429065, 451522379, 462140541, 490201848, 500060148, 508150414, 508157410, 508331280, 510140909, 516740832, 523867648, ...], prev_hash: &quot;kh_PP5rx6mi69FUhBCyDNtaFkitSaENZ1PTHpsmE5d5JGZCLAzZJ&quot;, prev_key_hash: &quot;kh_PP5rx6mi69FUhBCyDNtaFkitSaENZ1PTHpsmE5d5JGZCLAzZJ&quot;, state_hash: &quot;bs_2V6HE7ZPTrJeA5tuhefgZZKmFAhRHtrE6CTnyB3THucfX3BPdC&quot;, target: 538124450, time: 1558614076955, version: 3 }}"},{"ref":"AeppSDK.Chain.html#get_micro_block_header/2","title":"AeppSDK.Chain.get_micro_block_header/2","type":"function","doc":"Get a micro block&#39;s header Example iex&gt; micro_block_hash = &quot;mh_2GYkXiDbKGd9bMWL63AiaRbKRNDDHR8womVFzxk5BZP4KGQhgw&quot; iex&gt; AeppSDK.Chain.get_micro_block_header(client, micro_block_hash) {:ok, %{ hash: &quot;mh_2GYkXiDbKGd9bMWL63AiaRbKRNDDHR8womVFzxk5BZP4KGQhgw&quot;, height: 84547, pof_hash: &quot;no_fraud&quot;, prev_hash: &quot;kh_2XteYFUyUYjnMDJzHszhHegpoV59QpWTLnMPw5eohsXntzdf6P&quot;, prev_key_hash: &quot;kh_2XteYFUyUYjnMDJzHszhHegpoV59QpWTLnMPw5eohsXntzdf6P&quot;, signature: &quot;sg_RJN8idvktDbCMmFh1V3pmCaGBcvDNrv4vQ8X8Jbad8oxAuqzHm6Pe4VZxpvrDsopayfVjHDMNz36rPVg2iMTyuoaaxwLg&quot;, state_hash: &quot;bs_AJscRW9ArzMaWKHqPGGCiDhe7SxnF8a4AdWX2gdjhcEpFbS6x&quot;, time: 1558614125599, txs_hash: &quot;bx_22QhAmqifutmQ8g7x8kPPvxEANMqiqMwDBAsw7HqzWGxe93tHD&quot;, version: 3 }}"},{"ref":"AeppSDK.Chain.html#get_micro_block_transactions/2","title":"AeppSDK.Chain.get_micro_block_transactions/2","type":"function","doc":"Get a micro block&#39;s transactions Example iex&gt; micro_block_hash = &quot;mh_2GYkXiDbKGd9bMWL63AiaRbKRNDDHR8womVFzxk5BZP4KGQhgw&quot; iex&gt; AeppSDK.Chain.get_micro_block_transactions(client, micro_block_hash) {:ok, [ %{ block_hash: &quot;mh_2GYkXiDbKGd9bMWL63AiaRbKRNDDHR8womVFzxk5BZP4KGQhgw&quot;, block_height: 84547, hash: &quot;th_2J8Xshv3yR8Rf8mEmUSoT6fk4YJz5oGbpLLqJkPAvV1GWeTK6A&quot;, signatures: [&quot;sg_PQffTEQQkf2DPthE2QoeRqAUr53m5BszPBGRrdH21Nfbb1s6SFLyckb9TvNPcWy37sBY5YABNsvvJJFdvetHntAkiXrsM&quot;], tx: %{type: &quot;ContractCreateTx&quot;, version: 1} } ]}"},{"ref":"AeppSDK.Chain.html#get_node_info/1","title":"AeppSDK.Chain.get_node_info/1","type":"function","doc":"Get node&#39;s info Example iex&gt; AeppSDK.Chain.get_node_info(client) {:ok, %{ node_beneficiary: &quot;beneficiary_not_configured&quot;, node_pubkey: &quot;ak_ayGGSiLMFN3zsUNCBL5B8U17CyzyxavEbhnAFhfgGH1XSnYJm&quot;, peer_pubkey: &quot;pp_8Un82n2zm4XKiWfhU5UpaEKXrJXkQ2w8dyjYRRa9FkoronTMA&quot;, peers: %{ blocked: [], peers: [&quot;aenode://pp_8YqicXrgYbcy7nbgPbntKdivbohJ7CisF7YvT6MDeBjnJsKbq@18.139.117.241:3015&quot;, &quot;aenode://pp_QU9CvhAQH56a2kA15tCnWPRJ2srMJW8ZmfbbFTAy7eG4o16Bf@52.10.46.160:3015&quot;, &quot;aenode://pp_apWJNy8fkPjigPwMhoPg3w9QweGZ8ZzZnmwzaCp6PHZP6usAE@54.212.224.255:3015&quot;, &quot;aenode://pp_2254vzzreTrcfkzfWSfabNLWGhruqqKgnzSdrQiQ7QD36DtH9f@18.197.33.230:3015&quot;, &quot;aenode://pp_27xmgQ4N1E3QwHyoutLtZsHW5DSW4zneQJ3CxT5JbUejxtFuAu@13.250.162.250:3015&quot;, &quot;aenode://pp_2B3vrmDZx3P1LPZ9t1S8dA4ra4ugH7pE2qJbg77md8kvj91oEz@52.221.215.138:3015&quot;, &quot;aenode://pp_2E4vnrxXoP8V1ydbXYdSrDMVrZkc1EsawimeETH7SjXvVLYtZd@18.196.41.135:3015&quot;, &quot;aenode://pp_2nd7pm3R4BiioVzRDCGQsniSGQ8vWGMjsdyvBsPdthsdSj8nQ7@13.48.132.10:3015&quot;, &quot;aenode://pp_2vhFb3HtHd1S7ynbpbFnEdph1tnDXFSfu4NGtq46S2eM5HCdbC@18.195.109.60:3015&quot;] }, status: %{ difficulty: 56070996, genesis_key_block_hash: &quot;kh_wUCideEB8aDtUaiHCtKcfywU6oHZW6gnyci8Mw6S1RSTCnCRu&quot;, listening: true, network_id: &quot;ae_uat&quot;, node_revision: &quot;c6c12b039971ebe9a367d76826c6acbbd966fa0d&quot;, node_version: &quot;5.2.0&quot;, peer_connections: %{inbound: 0, outbound: 9}, peer_count: 10947, peer_pubkey: &quot;pp_8Un82n2zm4XKiWfhU5UpaEKXrJXkQ2w8dyjYRRa9FkoronTMA&quot;, pending_transactions_count: 0, protocols: [ %{effective_at_height: 154300, version: 4}, %{effective_at_height: 82900, version: 3}, %{effective_at_height: 40900, version: 2}, %{effective_at_height: 0, version: 1} ], solutions: 0, sync_progress: 100.0, syncing: false, top_block_height: 195097, top_key_block_hash: &quot;kh_uuT9nzrupajRxeKazsg2KhKM5jZZoZdAAJTkdZ9xd4Pbz1rFJ&quot; } }}"},{"ref":"AeppSDK.Chain.html#get_pending_transactions/1","title":"AeppSDK.Chain.get_pending_transactions/1","type":"function","doc":"Get all pending transactions Example iex&gt; AeppSDK.Chain.get_pending_transactions(client) {:ok, []}"},{"ref":"AeppSDK.Chain.html#get_transaction/2","title":"AeppSDK.Chain.get_transaction/2","type":"function","doc":"Get a transaction by hash Example iex&gt; tx_hash = &quot;th_6FbthJ3jF2AE6z2SywBtg764tNK9LiBCxRW3RfWhMX68JAygz&quot; iex&gt; AeppSDK.Chain.get_transaction(client, tx_hash) {:ok, %{ block_hash: &quot;mh_bZUgGMEvu8kaAEv47xyatNfstvoH54VbrCb93y8J44gr2EsCJ&quot;, block_height: 84531, hash: &quot;th_6FbthJ3jF2AE6z2SywBtg764tNK9LiBCxRW3RfWhMX68JAygz&quot;, signatures: [&quot;sg_R4q5gvb5c9VgwZPt7zLgPJLV4HFNv6ZHzwBVpKaA1ygApq6JBA1NSDsXPa9WLsrm2nGG5BrCy8iq11xGaSbsppzLZycts&quot;], tx: %{type: &quot;SpendTx&quot;, version: 1} }}"},{"ref":"AeppSDK.Chain.html#get_transaction_info/2","title":"AeppSDK.Chain.get_transaction_info/2","type":"function","doc":"Get a transaction info by hash Example iex&gt; tx_hash = &quot;th_2jg2P41iGUgNif3Nu1vZ34P1aeSeZq4CWtKhEpr6jeLDoTL4mH&quot; iex&gt; AeppSDK.Chain.get_transaction_info(client, tx_hash) {:ok, %{ call_info: %{ caller_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, caller_nonce: 11837, contract_id: &quot;ct_Y5Fjymet5kcequZTNNMjMTUaTnYBWBFsVmoPUGnKCyPsfnDg8&quot;, gas_price: 1000000000, gas_used: 1252, height: 84513, log: [], return_type: &quot;ok&quot;, return_value: &quot;cb_Xfbg4g==&quot; }, ga_info: nil, tx_info: nil }}"},{"ref":"AeppSDK.Chain.html#height/1","title":"AeppSDK.Chain.height/1","type":"function","doc":"Get the height of the current key block Example iex&gt; AeppSDK.Chain.height(client) {:ok, 84535}"},{"ref":"AeppSDK.Chain.html#t:await_options/0","title":"AeppSDK.Chain.await_options/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:dry_run_account/0","title":"AeppSDK.Chain.dry_run_account/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:dry_run_result/0","title":"AeppSDK.Chain.dry_run_result/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:event/0","title":"AeppSDK.Chain.event/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:generation/0","title":"AeppSDK.Chain.generation/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:generic_signed_transaction/0","title":"AeppSDK.Chain.generic_signed_transaction/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:generic_transaction/0","title":"AeppSDK.Chain.generic_transaction/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:key_block/0","title":"AeppSDK.Chain.key_block/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:micro_block_header/0","title":"AeppSDK.Chain.micro_block_header/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:node_info/0","title":"AeppSDK.Chain.node_info/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:peers/0","title":"AeppSDK.Chain.peers/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:protocol/0","title":"AeppSDK.Chain.protocol/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:status/0","title":"AeppSDK.Chain.status/0","type":"type","doc":""},{"ref":"AeppSDK.Chain.html#t:transaction_info/0","title":"AeppSDK.Chain.transaction_info/0","type":"type","doc":""},{"ref":"AeppSDK.Channel.OffChain.html","title":"AeppSDK.Channel.OffChain","type":"module","doc":"Module for Aeternity Off-chain channel activities, see: https://github.com/aeternity/protocol/blob/master/channels/OFF-CHAIN.md Contains Off-Chain channel-related functionality."},{"ref":"AeppSDK.Channel.OffChain.html#new/4","title":"AeppSDK.Channel.OffChain.new/4","type":"function","doc":"Creates new off-chain transactions, without supporting updates, with given parameters. Example iex&gt; channel = &quot;ch_11111111111111111111111111111111273Yts&quot; iex&gt; state_hash = &quot;st_11111111111111111111111111111111273Yts&quot; iex&gt; AeppSDK.Channel.OffChain.new(channel, 1, state_hash, 2) %{ channel_id: &quot;ch_11111111111111111111111111111111273Yts&quot;, round: 1, state_hash: &quot;st_11111111111111111111111111111111273Yts&quot;, version: 2 }"},{"ref":"AeppSDK.Channel.OffChain.html#new/5","title":"AeppSDK.Channel.OffChain.new/5","type":"function","doc":"Creates new off-chain transactions, supporting updates, with given parameters. Example iex&gt; channel = &quot;ch_11111111111111111111111111111111273Yts&quot; iex&gt; state_hash = &quot;st_11111111111111111111111111111111273Yts&quot; iex&gt; AeppSDK.Channel.OffChain.new(channel, 1, state_hash, 1, []) %{ channel_id: &quot;ch_11111111111111111111111111111111273Yts&quot;, round: 1, state_hash: &quot;st_11111111111111111111111111111111273Yts&quot;, updates: [], version: 1 }"},{"ref":"AeppSDK.Channel.OffChain.html#serialize_tx/1","title":"AeppSDK.Channel.OffChain.serialize_tx/1","type":"function","doc":"Serializes off-chain transactions, supports both updates and no-updates versions. Example iex&gt; channel = &quot;ch_11111111111111111111111111111111273Yts&quot; iex&gt; state_hash = &quot;st_11111111111111111111111111111111273Yts&quot; iex&gt; channel_off_chain_tx = AeppSDK.Channel.OffChain.new(channel, 1, state_hash, 2) iex&gt; AeppSDK.Channel.OffChain.serialize_tx(channel_off_chain_tx) &lt;&lt;248,70,57,2,161,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, 160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0&gt;&gt;"},{"ref":"AeppSDK.Channel.OffChain.html#serialize_updates/1","title":"AeppSDK.Channel.OffChain.serialize_updates/1","type":"function","doc":"Serializes off-chain updates. Example iex&gt; update = %{type: :transfer, from: {:id, :account, &lt;&gt;}, to: {:id, :account, &lt;&gt;}, amount: 100} iex&gt; AeppSDK.Channel.OffChain.serialize_updates(update) [&lt;&lt;248,73,130,2,58,1,161,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 161,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100&gt;&gt;]"},{"ref":"AeppSDK.Channel.OnChain.html","title":"AeppSDK.Channel.OnChain","type":"module","doc":"Module for Aeternity On-Chain channel system, see: https://github.com/aeternity/protocol/blob/master/channels/ON-CHAIN.md Contains On-Chain channel-related functionality. In order for its functions to be used, a client must be defined first. Client example can be found at: AeppSDK.Client.new/4."},{"ref":"AeppSDK.Channel.OnChain.html#calculate_state_hash/1","title":"AeppSDK.Channel.OnChain.calculate_state_hash/1","type":"function","doc":"Calculates state hash by provided Proof of Inclusion ## Example iex&gt; poi = [accounts: {&lt;&lt;140, 209, 91, 235, 172, 88, 191, 47, 80, 136, 11, 102, 92, 245, 219, 73, 245, 75, 162, 83, 27, 159, 121, 157, 30, 240, 117, 178, 254, 221, 212, 51&gt;&gt;, %{ cache: {3, {&lt;&lt;140, 209, 91, 235, 172, 88, 191, 47, 80, 136, 11, 102, 92, 245, 219, 73, 245, 75, 162, 83, 27, 159, 121, 157, 30, 240, 117, 178, 254, 221, 212, 51&gt;&gt;, [ &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;2, 58, 110, 90, 245, 96, 254, 181, 44, 135, 34, 160, 19, 18, 26, 58, 105, 180, 85, 248, 214, 24, 47, 76, 178, 2, 26, 251, 26, 106, 195, 16&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;146, 113, 225, 29, 31, 110, 130, 50, 56, 165, 196, 118, 45, 126, 24, 52, 14, 30, 9, 56, 8, 221, 231, 24, 231, 73, 90, 1, 159, 0, 83, 192&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt; ], {&lt;&lt;2, 58, 110, 90, 245, 96, 254, 181, 44, 135, 34, 160, 19, 18, 26, 58, 105, 180, 85, 248, 214, 24, 47, 76, 178, 2, 26, 251, 26, 106, 195, 16&gt;&gt;, [ &lt;&lt;60, 23, 175, 26, 217, 146, 152, 11, 103, 81, 151, 214, 147, 110, 187, 210, 92, 78, 171, 45, 72, 28, 247, 161, 167, 18, 61, 234, 180, 217, 133, 6&gt;&gt;, &lt;&lt;201, 10, 1, 0, 133, 6, 252, 35, 172, 0&gt;&gt; ], nil, nil}, {&lt;&lt;146, 113, 225, 29, 31, 110, 130, 50, 56, 165, 196, 118, 45, 126, 24, 52, 14, 30, 9, 56, 8, 221, 231, 24, 231, 73, 90, 1, 159, 0, 83, 192&gt;&gt;, [ &lt;&lt;51, 216, 132, 73, 112, 198, 24, 252, 160, 107, 12, 223, 138, 22, 165, 77, 67, 150, 195, 81, 35, 223, 36, 71, 96, 42, 48, 91, 69, 136, 247, 142&gt;&gt;, &lt;&lt;201, 10, 1, 0, 133, 16, 76, 83, 60, 0&gt;&gt; ], nil, nil}}} }}] iex&gt; AeppSDK.Channel.OnChain.calculate_state_hash(poi) {:ok, &quot;st_2BE4tgcWqnLJZjECoYgwnbB1awSgNYzGrunNs5MmWEKWaMFCbT&quot;}"},{"ref":"AeppSDK.Channel.OnChain.html#close_mutual/5","title":"AeppSDK.Channel.OnChain.close_mutual/5","type":"function","doc":"Closes a channel. More information at https://github.com/aeternity/protocol/blob/master/channels/ON-CHAIN.md#channel_close_mutual Example iex&gt; {:ok, [close_mutual_tx, close_mutual_sig]} = AeppSDK.Channel.OnChain.close_mutual(client1, &quot;ch_2WxZjGhqPurmGQrVtJ2LkzgNK4xEg6KViAhd6t9sHRKCiwws3a&quot;, 0, 70_000_000_000) iex&gt; {:ok, [^close_mutual_tx, close_mutual_sig1]} = AeppSDK.Utils.Transaction.sign_tx(close_mutual_tx, client2) iex&gt; AeppSDK.Channel.OnChain.post(client1, close_mutual_tx, signatures_list: [close_mutual_sig, close_mutual_sig1]) {:ok, %{ block_hash: &quot;mh_2rhgaqaHC8Xiroamfd6rNfRRemjpVdWBJY1jfTS1F2Gub3fU14&quot;, block_height: 136, info: %{reason: &quot;Channel not found&quot;}, tx_hash: &quot;th_2DW1XZRUdYmojKVU8yQDzMgq2jupFL8ZgANzLsseiGAsUq4s4Z&quot; }}"},{"ref":"AeppSDK.Channel.OnChain.html#close_solo/5","title":"AeppSDK.Channel.OnChain.close_solo/5","type":"function","doc":"Closes a channel. More information at https://github.com/aeternity/protocol/blob/master/channels/ON-CHAIN.md#channel_close_solo Example iex&gt; AeppSDK.Channel.OnChain.close_solo( client, channel_id, &lt;&lt;248, 210, 11, 1, 248, 132, 184, 64, 201, 113, 103, 241, 42, 81, 62, 1, 103, 105, 22, 251, 213, 10, 40, 106, 197, 217, 39, 51, 5, 44, 73, 142, 50, 78, 40, 208, 88, 116, 43, 53, 81, 6, 23, 241, 250, 225, 60, 76, 4, 174, 160, 24, 130, 33, 72, 1, 185, 121, 0, 233, 109, 122, 143, 66, 188, 5, 160, 35, 142, 26, 220, 2, 184, 64, 90, 28, 241, 181, 193, 50, 161, 54, 69, 243, 124, 105, 122, 228, 172, 8, 199, 166, 32, 131, 229, 16, 81, 237, 37, 44, 86, 1, 202, 62, 176, 168, 89, 137, 245, 105, 120, 166, 242, 61, 238, 182, 172, 144, 224, 208, 122, 177, 35, 133, 90, 76, 250, 235, 23, 132, 124, 23, 226, 16, 137, 50, 85, 5, 184, 72, 248, 70, 57, 2, 161, 6, 67, 28, 253, 157, 52, 56, 167, 245, 195, 204, 105, 111, 179, 9, 174, 138, 170, 157, 22, 18, 121, 142, 124, 182, 178, 196, 189, 31, 111, 81, 64, 49, 2, 160, 154, 233, 243, 226, 108, 37, 138, 14, 209, 86, 39, 89, 167, 191, 182, 94, 106, 233, 189, 108, 94, 31, 187, 28, 192, 85, 168, 253, 98, 98, 99, 158&gt;&gt;, accounts: {&lt;&lt;140, 209, 91, 235, 172, 88, 191, 47, 80, 136, 11, 102, 92, 245, 219, 73, 245, 75, 162, 83, 27, 159, 121, 157, 30, 240, 117, 178, 254, 221, 212, 51&gt;&gt;, %{ cache: {3, {&lt;&lt;140, 209, 91, 235, 172, 88, 191, 47, 80, 136, 11, 102, 92, 245, 219, 73, 245, 75, 162, 83, 27, 159, 121, 157, 30, 240, 117, 178, 254, 221, 212, 51&gt;&gt;, [ &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;2, 58, 110, 90, 245, 96, 254, 181, 44, 135, 34, 160, 19, 18, 26, 58, 105, 180, 85, 248, 214, 24, 47, 76, 178, 2, 26, 251, 26, 106, 195, 16&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;146, 113, 225, 29, 31, 110, 130, 50, 56, 165, 196, 118, 45, 126, 24, 52, 14, 30, 9, 56, 8, 221, 231, 24, 231, 73, 90, 1, 159, 0, 83, 192&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt; ], {&lt;&lt;2, 58, 110, 90, 245, 96, 254, 181, 44, 135, 34, 160, 19, 18, 26, 58, 105, 180, 85, 248, 214, 24, 47, 76, 178, 2, 26, 251, 26, 106, 195, 16&gt;&gt;, [ &lt;&lt;60, 23, 175, 26, 217, 146, 152, 11, 103, 81, 151, 214, 147, 110, 187, 210, 92, 78, 171, 45, 72, 28, 247, 161, 167, 18, 61, 234, 180, 217, 133, 6&gt;&gt;, &lt;&lt;201, 10, 1, 0, 133, 6, 252, 35, 172, 0&gt;&gt; ], nil, nil}, {&lt;&lt;146, 113, 225, 29, 31, 110, 130, 50, 56, 165, 196, 118, 45, 126, 24, 52, 14, 30, 9, 56, 8, 221, 231, 24, 231, 73, 90, 1, 159, 0, 83, 192&gt;&gt;, [ &lt;&lt;51, 216, 132, 73, 112, 198, 24, 252, 160, 107, 12, 223, 138, 22, 165, 77, 67, 150, 195, 81, 35, 223, 36, 71, 96, 42, 48, 91, 69, 136, 247, 142&gt;&gt;, &lt;&lt;201, 10, 1, 0, 133, 16, 76, 83, 60, 0&gt;&gt; ], nil, nil}}} }} ) {:ok, %{ block_hash: &quot;mh_JnaZ2mMaVLxGw4hooGB1chTpgh6ifokC9h4xqgdbRMGvACibX&quot;, block_height: 111, info: %{ channel_amount: 100000000000, channel_reserve: 20, delegate_ids: [], id: &quot;ch_WZKRxaPhrfBZ1mKD5gLnU9jxrW9u3gjJNBCJ4hndEiNKs9CND&quot;, initiator_amount: 30000000000, initiator_id: &quot;ak_hZP2M8FamBSM6kNoMVwFK3JEsy4fZ9e7pRAw7HXKrSUg3B8nQ&quot;, lock_period: 10, locked_until: 121, responder_amount: 70000000000, responder_id: &quot;ak_287XG6Fied7M1W54mAtTnEzWbAPn6zHSf5Y84wXtp4nQBS7vmv&quot;, round: 2, solo_round: 0, state_hash: &quot;st_munz4mwlig7RVidZp7+2XmrpvWxeH7scwFWo/WJiY55yXpaq&quot; }, tx_hash: &quot;th_2X8iGZkZvavsmG8udFENqnfqsKrYyBBpAuif7RZoZUUog8Y7Yq&quot; }}"},{"ref":"AeppSDK.Channel.OnChain.html#create/9","title":"AeppSDK.Channel.OnChain.create/9","type":"function","doc":"Creates a channel. More information at https://github.com/aeternity/protocol/blob/master/channels/ON-CHAIN.md#channel_create Example iex&gt; initiator_amt = 30_000_000_000 iex&gt; responder_amt = 70_000_000_000 iex&gt; {:ok, [create_tx, create_sig]} = AeppSDK.Channel.OnChain.create(client1, initiator_amt, client2.keypair.public, responder_amt, 1, 20, 10, AeppSDK.Utils.Encoding.prefix_encode_base58c( &quot;st&quot;, &lt;&lt;104, 40, 209, 191, 182, 107, 186, 113, 55, 214, 98, 133, 46, 166, 249, 5, 206, 185, 30, 65, 61, 161, 194, 140, 93, 163, 214, 28, 44, 126, 144, 107&gt;&gt;)) iex&gt; {:ok, [^create_tx, create_sig1]} = AeppSDK.Utils.Transaction.sign_tx(create_tx, client2) iex&gt; {:ok, %{channel_id: channel_id}} = AeppSDK.Channel.OnChain.post(client1, create_tx, signatures_list: [create_sig, create_sig1]) {:ok, %{ block_hash: &quot;mh_2CwWebt7UpAu5RuwiCTatWA4BXddUM4xSTED3dRxdzs6FjFzY2&quot;, block_height: 55, channel_id: &quot;ch_2WxZjGhqPurmGQrVtJ2LkzgNK4xEg6KViAhd6t9sHRKCiwws3a&quot;, tx_hash: &quot;th_2PkYGBQJxDNhsWKs5yGQ41wP2y32HHiN4qwNUpcbKiGd1n1rdx&quot; }}"},{"ref":"AeppSDK.Channel.OnChain.html#deposit/6","title":"AeppSDK.Channel.OnChain.deposit/6","type":"function","doc":"Deposits funds into a channel after creation More information at https://github.com/aeternity/protocol/blob/master/channels/ON-CHAIN.md#channel_deposit Example iex&gt; {:ok, [deposit_tx, deposit_sig]} = AeppSDK.Channel.OnChain.deposit(client1, 16_740_000_000, &quot;ch_215kMreHiB59G3CdfH8ySffdbbJz7eFeLRMxGnVZTt75pHndjK&quot;, 2, AeppSDK.Utils.Encoding.prefix_encode_base58c( &quot;st&quot;, &lt;&lt;104, 40, 209, 191, 182, 107, 186, 113, 55, 214, 98, 133, 46, 166, 249, 5, 206, 185, 30, 65, 61, 161, 194, 140, 93, 163, 214, 28, 44, 126, 144, 107&gt;&gt;)) iex&gt; {:ok, [^deposit_tx, deposit_sig1]} = AeppSDK.Utils.Transaction.sign_tx(deposit_tx, client2) iex&gt; AeppSDK.Channel.OnChain.post(client1, deposit_tx, signatures_list: [deposit_sig, deposit_sig1]) {:ok, %{ block_hash: &quot;mh_ZFvg7gqiZrAyrcAn1RPM7mi2e1CFmq4f5wfauwdiARoDFep4F&quot;, block_height: 280, info: %{ channel_amount: 116740000000, channel_reserve: 20, delegate_ids: [], id: &quot;ch_215kMreHiB59G3CdfH8ySffdbbJz7eFeLRMxGnVZTt75pHndjK&quot;, initiator_amount: 30000000000, initiator_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, lock_period: 10, locked_until: 0, responder_amount: 70000000000, responder_id: &quot;ak_2B468wUNwgHtESYbaeQXZk36fUmndQKsG8aprstgqE6byL18M4&quot;, round: 2, solo_round: 0, state_hash: &quot;st_aCjRv7ZrunE31mKFLqb5Bc65HkE9ocKMXaPWHCx+kGtBh/0M&quot; }, tx_hash: &quot;th_279M3NYh19PfHCmnWZpYXTaFf6PVfbB5aZe5TazjTNUiTSaVsZ&quot; }}"},{"ref":"AeppSDK.Channel.OnChain.html#force_progress/8","title":"AeppSDK.Channel.OnChain.force_progress/8","type":"function","doc":"Forcing progress is the mechanism to be used when a dispute arises between parties and one of them wants to use the blockchain as an arbiter. More information at https://github.com/aeternity/protocol/blob/master/channels/ON-CHAIN.md#forcing-progress"},{"ref":"AeppSDK.Channel.OnChain.html#get_by_pubkey/2","title":"AeppSDK.Channel.OnChain.get_by_pubkey/2","type":"function","doc":"Gets channel information by its pubkey. Example iex&gt; AeppSDK.Channel.OnChain.get_by_pubkey(client, &quot;ch_c5xXgW54ZkJHcN8iQ8j6zSyUWqSFJ9XgP9PHV7fiiL8og5K1C&quot;) {:ok, %{ channel_amount: 100000000000, channel_reserve: 20, delegate_ids: [], id: &quot;ch_c5xXgW54ZkJHcN8iQ8j6zSyUWqSFJ9XgP9PHV7fiiL8og5K1C&quot;, initiator_amount: 30000000000, initiator_id: &quot;ak_2B468wUNwgHtESYbaeQXZk36fUmndQKsG8aprstgqE6byL18M4&quot;, lock_period: 10, locked_until: 0, responder_amount: 70000000000, responder_id: &quot;ak_GxXeeEKHfiK3f6qR8Rdt6ik1xYviC3z6SN3kMzKiUfQrjpz1B&quot;, round: 1, solo_round: 0, state_hash: &quot;st_aCjRv7ZrunE31mKFLqb5Bc65HkE9ocKMXaPWHCx+kGtBh/0M&quot; }}"},{"ref":"AeppSDK.Channel.OnChain.html#get_current_state_hash/2","title":"AeppSDK.Channel.OnChain.get_current_state_hash/2","type":"function","doc":"Gets current state hash. Example iex&gt; AeppSDK.Channel.OnChain.get_current_state_hash(client, &quot;ch_27i3QZiotznX4LiVKzpUhUZmTYeEC18vREioxJxSN93ckn4Gay&quot;) {:ok, &quot;st_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArMtts&quot;}"},{"ref":"AeppSDK.Channel.OnChain.html#post/3","title":"AeppSDK.Channel.OnChain.post/3","type":"function","doc":"Serialize the list of fields to RLP transaction binary, adds signatures and post it to the node. Example iex&gt; tx = %AeternityNode.Model.ChannelCreateTx{ channel_reserve: 20, delegate_ids: [], fee: 17_560_000_000, initiator_amount: 30_000_000_000, initiator_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, lock_period: 10, nonce: 2, push_amount: 1, responder_amount: 70_000_000_000, responder_id: &quot;ak_2B468wUNwgHtESYbaeQXZk36fUmndQKsG8aprstgqE6byL18M4&quot;, state_hash: &quot;st_nscaNBmydKEvrWB6492mkpCmptuSExd38Hwf3uvZUCGqKBFU7&quot;, ttl: 0 } iex&gt; signature1 = &lt;&lt;65,111,24,149,206,121,117,82,192,205,237,44,184,94,82,204,236, 214,24,128,168,113,9,99,104,18,70,147,215,52,233,8,189,150,213, 80,108,8,50,196,106,17,117,204,215,161,175,38,249,220,34,77,226, 164,212,11,242,80,51,82,211,34,97,15&gt;&gt; iex&gt; signature2 = &lt;&lt;169,216,194,56,20,98,158,150,54,133,124,227,96,40,230,236,185, 181,186,48,175,65,130,110,39,254,244,18,155,153,210,170,181,249, 138,249,130,239,245,1,2,164,44,146,105,193,61,79,105,71,176,166, 30,137,239,84,138,188,8,92,182,83,130,1&gt;&gt; iex&gt; AeppSDK.Channel.OnChain.post(client, tx, [signatures_list: [signature1, signature2]]) {:ok, %{ block_hash: &quot;mh_23unT6UB5U1DycXrYdAfVAumuXQqTsnccrMNp3w6hYW3Wry4X&quot;, block_height: 206, channel_id: &quot;ch_27i3QZiotznX4LiVKzpUhUZmTYeEC18vREioxJxSN93ckn4Gay&quot;, tx_hash: &quot;th_2f2sTv4z8R6QZknnCKhqvnHLiQKrAiBqME1nVV8sbGyeYWrSQ3&quot; }"},{"ref":"AeppSDK.Channel.OnChain.html#settle/5","title":"AeppSDK.Channel.OnChain.settle/5","type":"function","doc":"The settlement transaction is the last one in the lifecycle of a channel, but only required if the parties involved did not manage to cooperate when trying to close the channel. More information at https://github.com/aeternity/protocol/blob/master/channels/ON-CHAIN.md#channel_settle Example iex&gt; AeppSDK.Channel.OnChain.settle(client, channel_id, initiator_amt, responder_amt) {:ok, %{ block_hash: &quot;mh_jH89m5ACnV5rsoo1vhg5D6jTXThotcY48B1DWADF8A7kFCvTf&quot;, block_height: 255, info: %{reason: &quot;Channel not found&quot;}, tx_hash: &quot;th_2NubsEBfPPF2cup9Hd9zuu9Evy9V1EHGhxS1D8eVinBZRL4CcC&quot; }}"},{"ref":"AeppSDK.Channel.OnChain.html#slash/5","title":"AeppSDK.Channel.OnChain.slash/5","type":"function","doc":"If a malicious party sent a channel_close_solo or channel_force_progress_tx with an outdated state, the honest party has the opportunity to issue a channel_slash transaction More information at https://github.com/aeternity/protocol/blob/master/channels/ON-CHAIN.md#channel_slash Example iex&gt; AeppSDK.Channel.OnChain.slash( client, channel_id, &lt;&lt;248, 210, 11, 1, 248, 132, 184, 64, 145, 148, 30, 197, 5, 240, 183, 26, 184, 110, 253, 83, 1, 240, 198, 71, 193, 214, 193, 22, 202, 70, 234, 30, 157, 24, 219, 67, 15, 0, 223, 68, 118, 143, 137, 154, 195, 231, 18, 82, 28, 33, 169, 105, 139, 44, 139, 184, 115, 249, 149, 202, 50, 234, 107, 252, 10, 163, 184, 236, 43, 84, 34, 11, 184, 64, 232, 63, 222, 177, 255, 229, 215, 175, 11, 119, 122, 12, 47, 88, 143, 199, 191, 170, 176, 3, 163, 44, 192, 125, 35, 127, 69, 169, 247, 201, 234, 1, 204, 85, 143, 19, 156, 213, 69, 155, 252, 218, 91, 162, 99, 192, 26, 71, 122, 199, 100, 141, 109, 8, 158, 38, 100, 121, 194, 189, 237, 160, 78, 0, 184, 72, 248, 70, 57, 2, 161, 6, 67, 28, 253, 157, 52, 56, 167, 245, 195, 204, 105, 111, 179, 9, 174, 138, 170, 157, 22, 18, 121, 142, 124, 182, 178, 196, 189, 31, 111, 81, 64, 49, 3, 160, 154, 233, 243, 226, 108, 37, 138, 14, 209, 86, 39, 89, 167, 191, 182, 94, 106, 233, 189, 108, 94, 31, 187, 28, 192, 85, 168, 253, 98, 98, 99, 158&gt;&gt;, accounts: {&lt;&lt;140, 209, 91, 235, 172, 88, 191, 47, 80, 136, 11, 102, 92, 245, 219, 73, 245, 75, 162, 83, 27, 159, 121, 157, 30, 240, 117, 178, 254, 221, 212, 51&gt;&gt;, %{ cache: {3, {&lt;&lt;140, 209, 91, 235, 172, 88, 191, 47, 80, 136, 11, 102, 92, 245, 219, 73, 245, 75, 162, 83, 27, 159, 121, 157, 30, 240, 117, 178, 254, 221, 212, 51&gt;&gt;, [ &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;2, 58, 110, 90, 245, 96, 254, 181, 44, 135, 34, 160, 19, 18, 26, 58, 105, 180, 85, 248, 214, 24, 47, 76, 178, 2, 26, 251, 26, 106, 195, 16&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;146, 113, 225, 29, 31, 110, 130, 50, 56, 165, 196, 118, 45, 126, 24, 52, 14, 30, 9, 56, 8, 221, 231, 24, 231, 73, 90, 1, 159, 0, 83, 192&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt;, &lt;&lt;&gt;&gt; ], {&lt;&lt;2, 58, 110, 90, 245, 96, 254, 181, 44, 135, 34, 160, 19, 18, 26, 58, 105, 180, 85, 248, 214, 24, 47, 76, 178, 2, 26, 251, 26, 106, 195, 16&gt;&gt;, [ &lt;&lt;60, 23, 175, 26, 217, 146, 152, 11, 103, 81, 151, 214, 147, 110, 187, 210, 92, 78, 171, 45, 72, 28, 247, 161, 167, 18, 61, 234, 180, 217, 133, 6&gt;&gt;, &lt;&lt;201, 10, 1, 0, 133, 6, 252, 35, 172, 0&gt;&gt; ], nil, nil}, {&lt;&lt;146, 113, 225, 29, 31, 110, 130, 50, 56, 165, 196, 118, 45, 126, 24, 52, 14, 30, 9, 56, 8, 221, 231, 24, 231, 73, 90, 1, 159, 0, 83, 192&gt;&gt;, [ &lt;&lt;51, 216, 132, 73, 112, 198, 24, 252, 160, 107, 12, 223, 138, 22, 165, 77, 67, 150, 195, 81, 35, 223, 36, 71, 96, 42, 48, 91, 69, 136, 247, 142&gt;&gt;, &lt;&lt;201, 10, 1, 0, 133, 16, 76, 83, 60, 0&gt;&gt; ], nil, nil}}} }} ) {:ok, %{ block_hash: &quot;mh_azf8sDtinbauus1qK9f2o1h6EePUiuNt12ZqZFwWrR8J3JCsC&quot;, block_height: 181, info: %{ channel_amount: 100000000000, channel_reserve: 20, delegate_ids: [], id: &quot;ch_WZKRxaPhrfBZ1mKD5gLnU9jxrW9u3gjJNBCJ4hndEiNKs9CND&quot;, initiator_amount: 30000000000, initiator_id: &quot;ak_hZP2M8FamBSM6kNoMVwFK3JEsy4fZ9e7pRAw7HXKrSUg3B8nQ&quot;, lock_period: 10, locked_until: 191, responder_amount: 70000000000, responder_id: &quot;ak_287XG6Fied7M1W54mAtTnEzWbAPn6zHSf5Y84wXtp4nQBS7vmv&quot;, round: 3, solo_round: 0, state_hash: &quot;st_munz4mwlig7RVidZp7+2XmrpvWxeH7scwFWo/WJiY55yXpaq&quot; }, tx_hash: &quot;th_hgEEnpcjPdLk5CEdmeXETmQTYcHvuVBnMi5d85kPRBawGQLek&quot; }}"},{"ref":"AeppSDK.Channel.OnChain.html#snapshot_solo/4","title":"AeppSDK.Channel.OnChain.snapshot_solo/4","type":"function","doc":"In order to make channels both secure and trustless even when one party goes offline, we provide the functionality of snapshots. Snapshots provide a recent off-chain state to be recorded on-chain. More information at https://github.com/aeternity/protocol/blob/master/channels/ON-CHAIN.md#channel_snapshot_solo Example iex&gt; AeppSDK.Channel.OnChain.snapshot_solo( client, channel_id, &lt;&lt;248, 210, 11, 1, 248, 132, 184, 64, 198, 42, 55, 37, 192, 126, 199, 229, 22, 222, 103, 86, 51, 29, 17, 238, 229, 17, 124, 160, 247, 28, 39, 30, 186, 138, 206, 3, 179, 46, 224, 25, 32, 48, 25, 220, 61, 218, 161, 170, 122, 123, 30, 8, 122, 62, 232, 246, 47, 128, 64, 151, 153, 128, 69, 221, 3, 174, 6, 148, 197, 125, 192, 15, 184, 64, 33, 185, 19, 26, 171, 135, 138, 163, 121, 250, 122, 152, 34, 168, 11, 254, 89, 49, 219, 158, 93, 207, 98, 1, 229, 10, 163, 193, 8, 10, 81, 82, 239, 13, 219, 133, 175, 134, 76, 195, 134, 43, 166, 76, 59, 36, 53, 83, 120, 238, 252, 229, 166, 219, 165, 153, 61, 214, 128, 86, 52, 137, 51, 14, 184, 72, 248, 70, 57, 2, 161, 6, 245, 169, 216, 57, 28, 40, 9, 221, 141, 60, 227, 220, 162, 91, 220, 255, 107, 28, 150, 170, 195, 164, 93, 50, 116, 244, 179, 80, 127, 154, 153, 182, 43, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43&gt;&gt; ) {:ok, %{ block_hash: &quot;mh_k84aBRvAYSQSxpWVj6ZJ9Z4wiUJhcAStoBLpRkLM1u7U74PZo&quot;, block_height: 112, tx_hash: &quot;th_2AAhNgLfWdy5MoPhagi39mAXY5YgBn3i5E611D3stWVD8GxKbT&quot; }}"},{"ref":"AeppSDK.Channel.OnChain.html#valid_prefixes/2","title":"AeppSDK.Channel.OnChain.valid_prefixes/2","type":"macro","doc":""},{"ref":"AeppSDK.Channel.OnChain.html#withdraw/6","title":"AeppSDK.Channel.OnChain.withdraw/6","type":"function","doc":"Withdraws locked tokens from channel. More information at https://github.com/aeternity/protocol/blob/master/channels/ON-CHAIN.md#channel_withdraw Example iex&gt; {:ok, [withdraw_tx, withdraw_sig]} = AeppSDK.Channel.OnChain.withdraw(client1, &quot;ch_215kMreHiB59G3CdfH8ySffdbbJz7eFeLRMxGnVZTt75pHndjK&quot;, 30_000_000_000, AeppSDK.Utils.Encoding.prefix_encode_base58c( &quot;st&quot;, &lt;&lt;104, 40, 209, 191, 182, 107, 186, 113, 55, 214, 98, 133, 46, 166, 249, 5, 206, 185, 30, 65, 61, 161, 194, 140, 93, 163, 214, 28, 44, 126, 144, 107&gt;&gt;), 3) iex&gt; {:ok, [^withdraw_tx, withdraw_sig1]} = AeppSDK.Utils.Transaction.sign_tx(withdraw_tx, client2) iex&gt; AeppSDK.Channel.OnChain.post(client1, withdraw_tx, signatures_list: [withdraw_sig, withdraw_sig1]) {:ok, %{ block_hash: &quot;mh_EhHcf36PdKcfAgBB1A7yhxpYFVqTLwk1xNFYZ1oNYjNHkUcNt&quot;, block_height: 419, info: %{ channel_amount: 86740000000, channel_reserve: 20, delegate_ids: [], id: &quot;ch_215kMreHiB59G3CdfH8ySffdbbJz7eFeLRMxGnVZTt75pHndjK&quot;, initiator_amount: 30000000000, initiator_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, lock_period: 10, locked_until: 0, responder_amount: 70000000000, responder_id: &quot;ak_2B468wUNwgHtESYbaeQXZk36fUmndQKsG8aprstgqE6byL18M4&quot;, round: 3, solo_round: 0, state_hash: &quot;st_aCjRv7ZrunE31mKFLqb5Bc65HkE9ocKMXaPWHCx+kGtBh/0M&quot; }, tx_hash: &quot;th_232xnsXwTmU49oCbu6NK7wvG9c84KybkDUXE3TjuGvqNkNBZob }}"},{"ref":"AeppSDK.Client.html","title":"AeppSDK.Client","type":"module","doc":"Contains the Client structure, holding all the data that is needed in order to use the SDK."},{"ref":"AeppSDK.Client.html#delete/3","title":"AeppSDK.Client.delete/3","type":"function","doc":"Perform a DELETE request. See request/1 or request/2 for options definition. delete(&quot;/users&quot;) delete(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) delete(client, &quot;/users&quot;) delete(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#delete!/3","title":"AeppSDK.Client.delete!/3","type":"function","doc":"Perform a DELETE request. See request!/1 or request!/2 for options definition. delete!(&quot;/users&quot;) delete!(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) delete!(client, &quot;/users&quot;) delete!(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#get/3","title":"AeppSDK.Client.get/3","type":"function","doc":"Perform a GET request. See request/1 or request/2 for options definition. get(&quot;/users&quot;) get(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) get(client, &quot;/users&quot;) get(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#get!/3","title":"AeppSDK.Client.get!/3","type":"function","doc":"Perform a GET request. See request!/1 or request!/2 for options definition. get!(&quot;/users&quot;) get!(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) get!(client, &quot;/users&quot;) get!(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#head/3","title":"AeppSDK.Client.head/3","type":"function","doc":"Perform a HEAD request. See request/1 or request/2 for options definition. head(&quot;/users&quot;) head(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) head(client, &quot;/users&quot;) head(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#head!/3","title":"AeppSDK.Client.head!/3","type":"function","doc":"Perform a HEAD request. See request!/1 or request!/2 for options definition. head!(&quot;/users&quot;) head!(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) head!(client, &quot;/users&quot;) head!(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#new/5","title":"AeppSDK.Client.new/5","type":"function","doc":"Client constructor Example iex&gt; public_key = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; secret_key = &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; iex&gt; network_id = &quot;ae_uat&quot; iex&gt; url = &quot;https://sdk-testnet.aepps.com/v2&quot; iex&gt; internal_url = &quot;https://sdk-testnet.aepps.com/v2&quot; iex&gt; AeppSDK.Client.new(%{public: public_key, secret: secret_key}, network_id, url, internal_url) %AeppSDK.Client{ connection: %Tesla.Client{ adapter: {Tesla.Adapter.Hackney, :call, [[recv_timeout: 30000]]}, fun: nil, post: [], pre: [ {Tesla.Middleware.BaseUrl, :call, [&quot;https://sdk-testnet.aepps.com/v2&quot;]} ] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: {Tesla.Adapter.Hackney, :call, [[recv_timeout: 30000]]}, fun: nil, post: [], pre: [ {Tesla.Middleware.BaseUrl, :call, [&quot;https://sdk-testnet.aepps.com/v2&quot;]} ] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: #Function&lt;1.7530086/0 in AeppSDK.Client.new/5&gt; }, middleware: %Tesla.Client{ adapter: {Tesla.Adapter.Hackney, :call, [[recv_timeout: 30000]]}, fun: nil, post: [], pre: [ {Tesla.Middleware.BaseUrl, :call, [&quot;https://testnet.aeternal.io/middleware&quot;]} ] }, network_id: &quot;ae_uat&quot; }"},{"ref":"AeppSDK.Client.html#options/3","title":"AeppSDK.Client.options/3","type":"function","doc":"Perform a OPTIONS request. See request/1 or request/2 for options definition. options(&quot;/users&quot;) options(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) options(client, &quot;/users&quot;) options(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#options!/3","title":"AeppSDK.Client.options!/3","type":"function","doc":"Perform a OPTIONS request. See request!/1 or request!/2 for options definition. options!(&quot;/users&quot;) options!(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) options!(client, &quot;/users&quot;) options!(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#patch/4","title":"AeppSDK.Client.patch/4","type":"function","doc":"Perform a PATCH request. See request/1 or request/2 for options definition. patch(&quot;/users&quot;, %{name: &quot;Jon&quot;}) patch(&quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;]) patch(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}) patch(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#patch!/4","title":"AeppSDK.Client.patch!/4","type":"function","doc":"Perform a PATCH request. See request!/1 or request!/2 for options definition. patch!(&quot;/users&quot;, %{name: &quot;Jon&quot;}) patch!(&quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;]) patch!(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}) patch!(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#post/4","title":"AeppSDK.Client.post/4","type":"function","doc":"Perform a POST request. See request/1 or request/2 for options definition. post(&quot;/users&quot;, %{name: &quot;Jon&quot;}) post(&quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;]) post(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}) post(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#post!/4","title":"AeppSDK.Client.post!/4","type":"function","doc":"Perform a POST request. See request!/1 or request!/2 for options definition. post!(&quot;/users&quot;, %{name: &quot;Jon&quot;}) post!(&quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;]) post!(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}) post!(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#put/4","title":"AeppSDK.Client.put/4","type":"function","doc":"Perform a PUT request. See request/1 or request/2 for options definition. put(&quot;/users&quot;, %{name: &quot;Jon&quot;}) put(&quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;]) put(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}) put(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#put!/4","title":"AeppSDK.Client.put!/4","type":"function","doc":"Perform a PUT request. See request!/1 or request!/2 for options definition. put!(&quot;/users&quot;, %{name: &quot;Jon&quot;}) put!(&quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;]) put!(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}) put!(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#request/2","title":"AeppSDK.Client.request/2","type":"function","doc":"Perform a request Options: :method - the request method, one of [:head, :get, :delete, :trace, :options, :post, :put, :patch] :url - either full url e.g. &quot;http://example.com/some/path&quot; or just &quot;/some/path&quot; if using Tesla.Middleware.BaseUrl :query - a keyword list of query params, e.g. [page: 1, per_page: 100] :headers - a keyworld list of headers, e.g. [{&quot;content-type&quot;, &quot;text/plain&quot;}] :body - depends on used middleware: by default it can be a binary if using e.g. JSON encoding middleware it can be a nested map if adapter supports it it can be a Stream with any of the above :opts - custom, per-request middleware or adapter options Examples: ExampleApi.request(method: :get, url: &quot;/users/path&quot;) You can also use shortcut methods like: ExampleApi.get(&quot;/users/1&quot;) or ExampleApi.post(client, &quot;/users&quot;, %{name: &quot;Jon&quot;})"},{"ref":"AeppSDK.Client.html#request!/2","title":"AeppSDK.Client.request!/2","type":"function","doc":"Perform request and raise in case of error. This is similar to request/2 behaviour from Tesla 0.x See request/2 for list of available options."},{"ref":"AeppSDK.Client.html#trace/3","title":"AeppSDK.Client.trace/3","type":"function","doc":"Perform a TRACE request. See request/1 or request/2 for options definition. trace(&quot;/users&quot;) trace(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) trace(client, &quot;/users&quot;) trace(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#trace!/3","title":"AeppSDK.Client.trace!/3","type":"function","doc":"Perform a TRACE request. See request!/1 or request!/2 for options definition. trace!(&quot;/users&quot;) trace!(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) trace!(client, &quot;/users&quot;) trace!(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeppSDK.Client.html#t:keypair/0","title":"AeppSDK.Client.keypair/0","type":"type","doc":""},{"ref":"AeppSDK.Client.html#t:option/0","title":"AeppSDK.Client.option/0","type":"type","doc":""},{"ref":"AeppSDK.Client.html#t:t/0","title":"AeppSDK.Client.t/0","type":"type","doc":""},{"ref":"AeppSDK.Contract.html","title":"AeppSDK.Contract","type":"module","doc":"Contains all contract-related functionality. In order for its functions to be used, a client must be defined first. Client example can be found at: AeppSDK.Client.new/4."},{"ref":"AeppSDK.Contract.html#call/6","title":"AeppSDK.Contract.call/6","type":"function","doc":"Call a contract Example iex&gt; contract_address = &quot;ct_2sZ43ScybbzKkd4iFMuLJw7uQib1dpUB8VDi9pLkALV5BpXXNR&quot; iex&gt; source_code = &quot;contract Identity = datatype event = AddedNumberEvent(indexed int, string) record state = { number : int } entrypoint init(x : int) = { number = x } stateful entrypoint add_to_number(x : int) = Chain.event(AddedNumberEvent(x, &quot;Added a number&quot;)) state.number + x&quot; iex&gt; function_name = &quot;add_to_number&quot; iex&gt; function_args = [&quot;33&quot;] iex&gt; AeppSDK.Contract.call(client, contract_address, source_code, function_name, function_args) {:ok, %{ block_hash: &quot;mh_2uzSrRdURXy4ATwCo3XpeSngH9ECXhkBj3MWEYFatqK4pJgFWG&quot;, block_height: 86362, log: [ %{ address: &quot;ct_2XphkkmsJAbR4NbSpYFgHPgzfpveKRA9FFTJmp6jX8JRqnveeD&quot;, data: &quot;Added a number&quot;, topics: [100006271334006235721916574864225776454052674644157840164656436983196903186403, 33] } ], return_type: &quot;ok&quot;, return_value: 75, tx_hash: &quot;th_CpexcQGiM86HVtHR6HTzYc3HoakXW2Xjm77wVKctoZmxTH52u&quot; }}"},{"ref":"AeppSDK.Contract.html#compile/2","title":"AeppSDK.Contract.compile/2","type":"function","doc":"Compile a contract Example iex&gt; source_code = &quot;contract Number = record state = { number : int } entrypoint init(x : int) = { number = x } entrypoint add_to_number(x : int) = state.number + x&quot; iex&gt; AeppSDK.Contract.compile(source_code, :aevm) {:ok, %{ byte_code: &lt;&lt;98, 0, 0, 100, 98, 0, 0, 151, 145, 128, 128, 128, 81, 127, 112, 194, 27, 63, 171, 248, 210, 119, 144, 238, 34, 30, 100, 222, 2, 111, 12, 11, 11, 82, 86, 82, 53, 206, 145, 155, 60, 13, 206, 214, 183, 62, 20, 98, 0, 0, 242, 87, 80, 128, 81, 127, 226, 35, 29, 108, 223, 201, 57, 22, 222, 76, 179, 169, 133, 123, 246, 92, 244, 15, 194, 86, 244, 161, 73, 139, 63, 126, 124, 152, 12, 25, 147, 68, 20, 98, 0, 0, 170, 87, 80, 96, 1, 25, 81, 0, 91, 96, 0, 25, 89, 96, 32, 1, 144, 129, 82, 96, 32, 144, 3, 96, 0, 89, 144, 129, 82, 129, 82, 89, 96, 32, 1, 144, 129, 82, 96, 32, 144, 3, 96, 3, 129, 82, 144, 89, 96, 0, 81, 89, 82, 96, 0, 82, 96, 0, 243, 91, 96, 0, 128, 82, 96, 0, 243, 91, 128, 96, 0, 81, 81, 1, 144, 80, 144, 86, 91, 96, 32, 1, 81, 81, 131, 146, 80, 128, 145, 80, 80, 128, 89, 144, 129, 82, 89, 96, 32, 1, 144, 129, 82, 96, 32, 144, 3, 96, 0, 25, 89, 96, 32, 1, 144, 129, 82, 96, 32, 144, 3, 96, 0, 89, 144, 129, 82, 129, 82, 89, 96, 32, 1, 144, 129, 82, 96, 32, 144, 3, 96, 3, 129, 82, 129, 82, 144, 80, 144, 86, 91, 96, 32, 1, 81, 81, 144, 80, 89, 80, 128, 145, 80, 80, 98, 0, 0, 159, 86&gt;&gt;, compiler_version: &quot;3.0.0&quot;, contract_source: &#39;contract Number = record state = { number : int } entrypoint init(x : int) = { number = x } entrypoint add_to_number(x : int) = state.number + x&#39;, type_info: [ {&lt;&lt;112, 194, 27, 63, 171, 248, 210, 119, 144, 238, 34, 30, 100, 222, 2, 111, 12, 11, 11, 82, 86, 82, 53, 206, 145, 155, 60, 13, 206, 214, 183, 62&gt;&gt;, &quot;add_to_number&quot;, &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&gt;&gt;, &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&gt;&gt;}, {&lt;&lt;226, 35, 29, 108, 223, 201, 57, 22, 222, 76, 179, 169, 133, 123, 246, 92, 244, 15, 194, 86, 244, 161, 73, 139, 63, 126, 124, 152, 12, 25, 147, 68&gt;&gt;, &quot;init&quot;, &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&gt;&gt;, &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&gt;&gt;} ] }}"},{"ref":"AeppSDK.Contract.html#create_calldata/4","title":"AeppSDK.Contract.create_calldata/4","type":"function","doc":"Create contract calldata Example iex&gt; source_code = &quot;contract Number = record state = { number : int } entrypoint init(x : int) = { number = x } entrypoint add_to_number(x : int) = state.number + x&quot; iex&gt; function_name = &quot;init&quot; iex&gt; function_args = [&quot;42&quot;] iex&gt; AeppSDK.Contract.create_calldata(source_code, function_name, function_args, :aevm) {:ok, &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 226, 35, 29, 108, 223, 201, 57, 22, 222, 76, 179, 169, 133, 123, 246, 92, 244, 15, 194, 86, 244, 161, 73, 139, 63, 126, 124, 152, 12, 25, 147, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42&gt;&gt;}"},{"ref":"AeppSDK.Contract.html#decode_return_value/2","title":"AeppSDK.Contract.decode_return_value/2","type":"function","doc":"Decode a return value Example iex&gt; return_value = &quot;cb_VNLOFXc=&quot; iex&gt; return_type = &quot;ok&quot; iex&gt; AeppSDK.Contract.decode_return_value(return_value, return_type) {:ok, 42}"},{"ref":"AeppSDK.Contract.html#decode_return_value/3","title":"AeppSDK.Contract.decode_return_value/3","type":"function","doc":"Decode a return value Example iex&gt; sophia_type = &quot;int&quot; iex&gt; return_value = &quot;cb_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEvrXnzA&quot; iex&gt; return_type = &quot;ok&quot; iex&gt; AeppSDK.Contract.decode_return_value(sophia_type, return_value, return_type) {:ok, 75}"},{"ref":"AeppSDK.Contract.html#default_amount/0","title":"AeppSDK.Contract.default_amount/0","type":"function","doc":"false"},{"ref":"AeppSDK.Contract.html#default_deposit/0","title":"AeppSDK.Contract.default_deposit/0","type":"function","doc":"false"},{"ref":"AeppSDK.Contract.html#default_gas/0","title":"AeppSDK.Contract.default_gas/0","type":"function","doc":"false"},{"ref":"AeppSDK.Contract.html#default_gas_price/0","title":"AeppSDK.Contract.default_gas_price/0","type":"function","doc":"false"},{"ref":"AeppSDK.Contract.html#deploy/4","title":"AeppSDK.Contract.deploy/4","type":"function","doc":"Deploy a contract Example iex&gt; source_code = &quot;contract Number = record state = { number : int } entrypoint init(x : int) = { number = x } entrypoint add_to_number(x : int) = state.number + x&quot; iex&gt; init_args = [&quot;42&quot;] iex&gt; AeppSDK.Contract.deploy(client, source_code, init_args) {:ok, %{ block_hash: &quot;mh_6fEZ9CCPNXxyjpKwSjkihv2UA5voRKCBpvrK24gK38zkZZB5Q&quot;, block_height: 86362, contract_id: &quot;ct_2XphkkmsJAbR4NbSpYFgHPgzfpveKRA9FFTJmp6jX8JRqnveeD&quot;, log: [], return_type: &quot;ok&quot;, return_value: &quot;cb_Xfbg4g==&quot;, tx_hash: &quot;th_CGCF321Sz8zWPMpSpa28gk3jDvvzeda8edhNhmnLgUvFYi14U&quot; }}"},{"ref":"AeppSDK.Contract.html#encode_logs/2","title":"AeppSDK.Contract.encode_logs/2","type":"function","doc":"false"},{"ref":"AeppSDK.Contract.html#get/2","title":"AeppSDK.Contract.get/2","type":"function","doc":"Get contract information Example iex&gt; contract_address = &quot;ct_2SrKe33k4pHbXFuBp4q1dx2yEaiTQDyUoA2WqyAni1WuwjtZw&quot; iex&gt; AeppSDK.Contract.get(client, contract_address) {:ok, %{ abi_version: 3, active: true, deposit: 0, id: &quot;ct_2SrKe33k4pHbXFuBp4q1dx2yEaiTQDyUoA2WqyAni1WuwjtZw&quot;, owner_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, referrer_ids: [], vm_version: 5 }}"},{"ref":"AeppSDK.Contract.html#get_aci_function_return_type/2","title":"AeppSDK.Contract.get_aci_function_return_type/2","type":"function","doc":"false"},{"ref":"AeppSDK.Contract.html#get_ct_version/1","title":"AeppSDK.Contract.get_ct_version/1","type":"function","doc":"false"},{"ref":"AeppSDK.Contract.html#get_function_return_type/2","title":"AeppSDK.Contract.get_function_return_type/2","type":"function","doc":"Get the return type of a function in a contract Example iex&gt; source_code = &quot;contract Identity = record state = { number : int } entrypoint init(x : int) = { number = x } entrypoint add_to_number(x : int) = state.number + x&quot; iex&gt; function_name = &quot;add_to_number&quot; iex&gt; AeppSDK.Contract.get_function_return_type(source_code, function_name) {:ok, &quot;int&quot;}"},{"ref":"AeppSDK.Contract.html#get_vm/1","title":"AeppSDK.Contract.get_vm/1","type":"function","doc":"false"},{"ref":"AeppSDK.Contract.html#t:call_options/0","title":"AeppSDK.Contract.call_options/0","type":"type","doc":""},{"ref":"AeppSDK.Contract.html#t:deploy_options/0","title":"AeppSDK.Contract.deploy_options/0","type":"type","doc":""},{"ref":"AeppSDK.GeneralizedAccount.html","title":"AeppSDK.GeneralizedAccount","type":"module","doc":"Contains all generalized accounts functionalities. In order for its functions to be used, a client must be defined first. Client example can be found at: AeppSDK.Client.new/4. For more information: https://github.com/aeternity/protocol/blob/master/generalized_accounts/generalized_accounts.md"},{"ref":"AeppSDK.GeneralizedAccount.html#attach/5","title":"AeppSDK.GeneralizedAccount.attach/5","type":"function","doc":"Attach a generalized account to a basic account. After a generalized account has been attached, it&#39;s possible pass an :auth option to transaction related functions in order to authorize them through the attached contract. A transaction is authorized whenever the call to the auth function returns true (and unauthorized when false). The option looks like this: auth: [ auth_contract_source: &quot;contract Authorization = function auth(auth_value : bool) = auth_value&quot;, auth_args: [&quot;true&quot;], fee: 1_000_000_000_000_00, gas: 50_000, gas_price: 1_000_000_000, ttl: 0 ] where gas, gas_price and ttl are optional. Examples iex&gt; source_code = &quot;contract Authorization = entrypoint auth(auth_value : bool) = auth_value&quot; iex&gt; auth_fun = &quot;auth&quot; iex&gt; init_args = [] iex&gt; AeppSDK.GeneralizedAccount.attach(client, source_code, auth_fun, init_args) {:ok, %{ block_hash: &quot;mh_CfEuHm4V2omAQGNAxcdPARrkfnYbKuuF1HpGhG5oQvoVC34nD&quot;, block_height: 92967, tx_hash: &quot;th_9LutrWD1FuFyx4MUUeMcfyF3uebfaP8t5gzatWDLyFYsqK744&quot; }}"},{"ref":"AeppSDK.GeneralizedAccount.html#compute_auth_id/1","title":"AeppSDK.GeneralizedAccount.compute_auth_id/1","type":"function","doc":"Computes an authorization id for given GA meta tx Examples iex&gt; meta_tx = %{ abi_version: 3, auth_data: &lt;&lt;43, 17, 244, 119, 202, 45, 27, 127&gt;&gt;, fee: 100000000000000, ga_id: &quot;ak_wuLXPE5pd2rvFoxHxvenBgp459rW6Y1cZ6cYTZcAcLAevPE5M&quot;, gas: 50000, gas_price: 1000000, ttl: 0, tx: &lt;&lt;248, 87, 11, 1, 192, 184, 82, 248, 80, 12, 1, 161, 1, 124, 169, 154, 140, 216, 36, 178, 163, 239, 195, 198, 197, 213, 0, 88, 87, 19, 67, 5, 117, 212, 206, 105, 153, 178, 2, 203, 32, 248, 96, 25, 216, 161, 1, 11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97, 100, 133, 3, 223, 210, 64, 0, 0, 0, 128&gt;&gt; } iex&gt; AeppSDK.GeneralizedAccount.compute_auth_id(meta_tx) {:ok, &lt;&lt;141, 79, 64, 237, 32, 190, 35, 175, 230, 66, 224, 247, 43, 83, 109, 142, 1, 161, 69, 1, 114, 107, 20, 99, 55, 155, 198, 212, 142, 147, 104, 117&gt;&gt;}"},{"ref":"AeppSDK.GeneralizedAccount.html#default_gas/0","title":"AeppSDK.GeneralizedAccount.default_gas/0","type":"function","doc":"false"},{"ref":"AeppSDK.Listener.html","title":"AeppSDK.Listener","type":"module","doc":"A listener service that connects to peers in a network and notifies processes for new blocks and transactions."},{"ref":"AeppSDK.Listener.html#check_tx_confirmations/4","title":"AeppSDK.Listener.check_tx_confirmations/4","type":"function","doc":"Subscribe a process to be notified whether or not a transaction with a given hash has been confirmed after a block_count amount of key blocks. Requires a client to be passed as the first argument as it makes requests to a node. Example iex&gt; client = AeppSDK.Client.new( %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; }, &quot;ae_uat&quot;, &quot;https://sdk-testnet.aepps.com/v2&quot;, &quot;https://sdk-testnet.aepps.com/v2&quot; ) iex&gt; tx_hash = &quot;th_2RMnW2GYbS2n5mwRtjFjb61ZgSNzNNUHGWU5EBmQXeUZfpP4vM&quot; iex&gt; block_count = 10 iex&gt; AeppSDK.Listener.check_tx_confirmations(client, tx_hash, block_count, self()) iex&gt; flush() {:tx_confirmations, %{ height: 111283, status: :confirmed, tx_hash: &quot;th_2RMnW2GYbS2n5mwRtjFjb61ZgSNzNNUHGWU5EBmQXeUZfpP4vM&quot; }} :ok"},{"ref":"AeppSDK.Listener.html#child_spec/1","title":"AeppSDK.Listener.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"AeppSDK.Listener.html#notify/3","title":"AeppSDK.Listener.notify/3","type":"function","doc":""},{"ref":"AeppSDK.Listener.html#start/2","title":"AeppSDK.Listener.start/2","type":"function","doc":"Start the listener for mainnet or testnet (network_id - &quot;ae_mainnet&quot; or &quot;ae_uat&quot;). Starting the listener is required before subscribing to any events. Example iex&gt; AeppSDK.Listener.start(&quot;ae_uat&quot;) {:ok, #PID&lt;0.261.0&gt;}"},{"ref":"AeppSDK.Listener.html#start/4","title":"AeppSDK.Listener.start/4","type":"function","doc":"Start the listener for a custom/private network with a set of user defined peers, network ID and genesis hash. Starting the listener is required before subscribing to any events. A peer is defined in the following format: &quot;aenode://peer_pubkey@host:port&quot; i.e. &quot;aenode://pp_2L8A5vSjnkLtfFNpJNgP9HbmGLD7ZAGFxoof47N8L4yyLAyyMi@18.136.37.63:3015&quot; Example iex&gt; AeppSDK.Listener.start( [&quot;aenode://pp_2L8A5vSjnkLtfFNpJNgP9HbmGLD7ZAGFxoof47N8L4yyLAyyMi@18.136.37.63:3015&quot;], &quot;localnet&quot;, &quot;kh_2Eo9AVWHxTKio278ccANnwtr9hkUpzb1nLePfUzs7StwWyJ2xB&quot; ) {:ok, #PID&lt;0.214.0&gt;}"},{"ref":"AeppSDK.Listener.html#stop/0","title":"AeppSDK.Listener.stop/0","type":"function","doc":"Stop the listener Example iex&gt; AeppSDK.Listener.stop() :ok"},{"ref":"AeppSDK.Listener.html#subscribe/2","title":"AeppSDK.Listener.subscribe/2","type":"function","doc":"Subscribe a process to notifications for a general event. These events are the following (passed as an atom): :micro_blocks :key_blocks :transactions :pool_transactions Micro blocks are in a light format, meaning that they don&#39;t contain any transactions. Subscribing to :transactions will notify for any mined transactions, while :pool_transactions will notify for any new transactions added to the pool. Example iex&gt; AeppSDK.Listener.subscribe(:key_blocks, self()) iex&gt; flush() {:key_blocks, %{ beneficiary: &quot;ak_nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv&quot;, height: 107613, info: &quot;cb_AAAAAfy4hFE=&quot;, miner: &quot;ak_V9dqj32R728EmdtaeXmGC7Zn94oAtje2mU2R9vQeCE3uDF52z&quot;, nonce: 15682880022608178725, pow_evidence: [36880953, 49948618, 71657014, 77943721, 103433465, 109309407, 127422545, 140895507, 181678786, 182358531, 186372470, 188704699, 189292674, 201708293, 215741852, 233410604, 255594855, 257736633, 266211649, 269325362, 274670268, 292854435, 295392989, 307433512, 312822688, 330979144, 339358365, 340662380, 356338119, 356413992, 363610991, 364811647, 387037152, 387943984, 438683034, 469469067, 472181309, 479842054, 484418139, 506523084, 517149088, 532705934], prev_hash: &quot;mh_nxXxmga7AU5T3N7GGUV4s5T8YvJYEZnXGTaaUoLgBStva1dT4&quot;, prev_key_hash: &quot;kh_j47UCW6UYYN4FhcMwQgynpAKdddKeAkPUUFyF6G35hArsfo8Q&quot;, root_hash: &quot;bs_2hpHUMa7VWVTdcwwSm4L7U1CLMXqTbhrjZYJ2FMLz1LZCKfoCG&quot;, target: 504011610, time: 1562765121744, version: 3 }} :ok"},{"ref":"AeppSDK.Listener.html#subscribe/3","title":"AeppSDK.Listener.subscribe/3","type":"function","doc":"Subscribe a process to notifications for a filterable event i.e. a spend transaction with a specific recipient or an oracle query transaction that targets a specific oracle. These events are the following and are filtered by a specific property: :spend_transactions - recipient :oracle_queries - oracle ID :oracle_responses - oracle query ID :pool_spend_transactions - recipient :pool_oracle_queries - oracle ID :pool_oracle_responses - oracle query ID Example iex&gt; AeppSDK.Listener.subscribe(:spend_transactions, self(), &quot;ak_2siRXKa5hT1YpR2oPwcU3LDpYzAdAcgt6HSNUt61NNV9NqkRP9&quot;) iex&gt; flush() {:spend_transactions, %{ hash: &quot;th_2Z9198iTQbBBE3jdeFxJQNMHqGNSESxG7PyTs3vU3JZUjYs319&quot;, tx: %{ amount: 100, fee: 16640000000, nonce: 3, payload: &quot;&quot;, recipient_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, sender_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, ttl: 0, type: :spend_tx } } } :ok"},{"ref":"AeppSDK.Listener.html#subscribe_for_contract_events/3","title":"AeppSDK.Listener.subscribe_for_contract_events/3","type":"function","doc":"Subscribe a process to notifications for any events that are to be emitted by a contract. Example iex&gt; client = AeppSDK.Client.new( %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; }, &quot;ae_uat&quot;, &quot;https://sdk-testnet.aepps.com/v2&quot;, &quot;https://sdk-testnet.aepps.com/v2&quot; ) iex&gt; contract_id = &quot;ct_jzmNJ8ZrMRFw8boyhxFDVYZhNGkmBNNV8hhKeebnFoKFYoQ58&quot; iex&gt; AeppSDK.Listener.subscribe_for_contract_events(client, self(), contract_id) :ok"},{"ref":"AeppSDK.Listener.html#subscribe_for_contract_events/5","title":"AeppSDK.Listener.subscribe_for_contract_events/5","type":"function","doc":"Subscribe a process to notifications for any events with the specified name that are to be emitted by a contract. Optionally, topics can be encoded by passing a list of their respective types (must be in the same order as in the event). The types can be the following: :address :contract :oracle :oracle_query :int :bits :bytes :bool Example iex&gt; client = AeppSDK.Client.new( %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; }, &quot;ae_uat&quot;, &quot;https://sdk-testnet.aepps.com/v2&quot;, &quot;https://sdk-testnet.aepps.com/v2&quot; ) iex&gt; contract_id = &quot;ct_jzmNJ8ZrMRFw8boyhxFDVYZhNGkmBNNV8hhKeebnFoKFYoQ58&quot; iex&gt; event_name = &quot;SomeEvent&quot; iex&gt; AeppSDK.Listener.subscribe_for_contract_events(client, self(), contract_id, event_name) :ok"},{"ref":"AeppSDK.Listener.html#unsubscribe/2","title":"AeppSDK.Listener.unsubscribe/2","type":"function","doc":""},{"ref":"AeppSDK.Listener.html#unsubscribe/3","title":"AeppSDK.Listener.unsubscribe/3","type":"function","doc":"Unsubscribe a process from a filterable event. Example iex&gt; AeppSDK.Listener.unsubscribe(:spend_transactions, self(), &quot;ak_2siRXKa5hT1YpR2oPwcU3LDpYzAdAcgt6HSNUt61NNV9NqkRP9&quot;) :ok"},{"ref":"AeppSDK.Middleware.html","title":"AeppSDK.Middleware","type":"module","doc":"A wrapper module for Aeternity middleware API calls. Contains all HTTP requests, exposed by middleware. Where it is possible, optional parameters are also supported, like &quot;limit&quot; and &quot;page&quot;. In order for its functions to be used, a client must be defined first. Client example can be found at: AeppSDK.Client.new/4."},{"ref":"AeppSDK.Middleware.html#get_active_channels/1","title":"AeppSDK.Middleware.get_active_channels/1","type":"function","doc":"Gets currently active channels. Example iex()&gt; AeppSDK.Middleware.get_active_channels(client) {:ok, [&quot;ch_pXcot855823NqFB7NUCFpew8hkiCfyvAz7xi58SGnPGJaJr8H&quot;, &quot;ch_Q6rUn61CviD9U2AiF3iQ7oxzqSAWXgpizQ3SzToDBMMXxiTaW&quot;, &quot;ch_bV5AYukdpuXC9VGyh4gw84YA7uruM1HXMqQ7ibBQeZgqsvTtS&quot;, &quot;ch_xymUJvByRJTDhXGjMj9oZXp8febkGEFUYi5cQsTc5H3SaLiiw&quot;, &quot;ch_uQMHczzyehpuXotp3Z66fskfAYuvJX3sBcaNM6tdEF3PVyu7s&quot;, ...] }"},{"ref":"AeppSDK.Middleware.html#get_active_name_auctions/2","title":"AeppSDK.Middleware.get_active_name_auctions/2","type":"function","doc":"Gets currently active name auctions. Example iex()&gt; AeppSDK.Middleware.get_active_name_auctions(client) {:ok, [ %{ expiration: 163904, name: &quot;valiotest123.chain&quot;, winning_bid: &quot;2865700000000000000&quot;, winning_bidder: &quot;ak_bpN6hPjRg7giYu2ChXDPK7aLP2WPw3nzFFkNouLoGt33WsWu9&quot; }, %{ expiration: 171645, name: &quot;gbunwe.chain&quot;, winning_bid: &quot;53994045000000004096&quot;, winning_bidder: &quot;ak_2UQWMtoZJd5vv5e7BrcXaG6DV52RjSHbH1SnzsDhhrqzFPLg3k&quot; }, %{ expiration: 171645, name: &quot;hvmuov.chain&quot;, winning_bid: &quot;51422900000000000000&quot;, winning_bidder: &quot;ak_2oTSYyd18L1y5qJ4L55jxoSM3KmdGwhuPCmaiGWxiihM4i2TWw&quot; }, ... ] }"},{"ref":"AeppSDK.Middleware.html#get_active_name_auctions_count/2","title":"AeppSDK.Middleware.get_active_name_auctions_count/2","type":"function","doc":"Gets the count of currently active name auctions. Example iex()&gt; AeppSDK.Middleware.get_active_name_auctions_count(client) {:ok, %{count: 21, result: &quot;OK&quot;}}"},{"ref":"AeppSDK.Middleware.html#get_active_names/2","title":"AeppSDK.Middleware.get_active_names/2","type":"function","doc":"Gets active names. Example iex()&gt; AeppSDK.Middleware.get_active_names(client, limit: 3, page: 1) {:ok, [ %{ auction_end_height: 162076, created_at_height: 162076, expires_at: 212123, name: &quot;hhhhjjjjjkkkkklllll2.chain&quot;, name_hash: &quot;nm_Q4KxpLCRNULjfHbbW4dcJLbAAddjBgwapUS9gccy2K2Cm9eJV&quot;, owner: &quot;ak_DzELMKnSfJcfnCUZ2SbXUSxRmFYtGrWmMuKiCx68YKLH26kwc&quot;, pointers: [ %{ id: &quot;ak_DzELMKnSfJcfnCUZ2SbXUSxRmFYtGrWmMuKiCx68YKLH26kwc&quot;, key: &quot;account_pubkey&quot; } ], tx_hash: &quot;th_25d9WdqBWBudBLPiRqitXR5mrKt9PSxhqpGFNys6a2etwcHnXz&quot; }, %{ auction_end_height: 162553, created_at_height: 162073, expires_at: 212553, name: &quot;november1.chain&quot;, name_hash: &quot;nm_2oVYPHRg9XVei3H8UqWQ3NTLuzHN2Tz2tZ2STKbD8nVgMWfe6D&quot;, owner: &quot;ak_2swhLkgBPeeADxVTAVCJnZLY5NZtCFiM93JxsEaMuC59euuFRQ&quot;, pointers: nil, tx_hash: &quot;th_25V7KuVypp7twWgiavBebeXvb6pe46RaWV48b6nPJefNZLsCFi&quot; }, %{ auction_end_height: 161982, created_at_height: 161982, expires_at: 211982, name: &quot;testingnamechain.chain&quot;, name_hash: &quot;nm_21Lx9u3PFirqrvdSTMRkRD8WVZm7RBAo36vWBMiwQ6a9SBKL1g&quot;, owner: &quot;ak_bpN6hPjRg7giYu2ChXDPK7aLP2WPw3nzFFkNouLoGt33WsWu9&quot;, pointers: nil, tx_hash: &quot;th_28ZaX6BzqKoBDdtJNjaggNtpbAbMKTnK5J8XSoprPzNmP6Xv5p&quot; } ]}"},{"ref":"AeppSDK.Middleware.html#get_all_contracts/1","title":"AeppSDK.Middleware.get_all_contracts/1","type":"function","doc":"Gets all contracts. Example iex()&gt; AeppSDK.Middleware.get_all_contracts(client) {:ok, [ %{ block_height: 163501, contract_id: &quot;ct_2BLESai7Yn8nYH7GcvpW53unNqftPc5etX4PzK1LTxcXhuggZA&quot;, transaction_hash: &quot;th_PW77BD2Bbu1cgQX9PZGkEdkKqgn5DGC17r63GYhbTkta4EWXs&quot; }, %{ block_height: 163495, contract_id: &quot;ct_24y4LnJAX8s7ctdQ7e5ShqKVMeA176da5dTgkpJeLMTADPUgFL&quot;, transaction_hash: &quot;th_2hrdRRct9g9cBMKd6ng8kar1ZCd4KLmYdqL8RW6FhkfMhyaoJ7&quot; }, %{ block_height: 163495, contract_id: &quot;ct_2ofvJh4ZpGLJdB25cGit41bC42vcKbC5vi8T9Js6EREe24RbfN&quot;, transaction_hash: &quot;th_3tX9UJPzaeBMgQf4UziNXkHfCNaBb79YqUKjnv8Sv5r4TjE56&quot; }, %{block_height: 162696, ...}, %{...}, ... ] }"},{"ref":"AeppSDK.Middleware.html#get_all_names/2","title":"AeppSDK.Middleware.get_all_names/2","type":"function","doc":"Gets all names. Example iex()&gt; AeppSDK.Middleware.get_all_names(client, limit: 3, page: 1) {:ok, [ %{ auction_end_height: 163904, created_at_height: 163424, expires_at: 213904, name: &quot;valiotest123.chain&quot;, name_hash: &quot;nm_26BZCRgqZt7fBscTvwpTb8Ur6tEaN6wCjHzvjsf5dKtjS4RYEk&quot;, owner: &quot;ak_bpN6hPjRg7giYu2ChXDPK7aLP2WPw3nzFFkNouLoGt33WsWu9&quot;, pointers: nil, tx_hash: &quot;th_2SSzgLbmrA6jiJqTbEc87daMSJ7HpJ2tccpKG2KPrqbNaJ4b2E&quot; }, %{ auction_end_height: 162076, created_at_height: 162076, expires_at: 212123, name: &quot;hhhhjjjjjkkkkklllll2.chain&quot;, name_hash: &quot;nm_Q4KxpLCRNULjfHbbW4dcJLbAAddjBgwapUS9gccy2K2Cm9eJV&quot;, owner: &quot;ak_DzELMKnSfJcfnCUZ2SbXUSxRmFYtGrWmMuKiCx68YKLH26kwc&quot;, pointers: [ %{ id: &quot;ak_DzELMKnSfJcfnCUZ2SbXUSxRmFYtGrWmMuKiCx68YKLH26kwc&quot;, key: &quot;account_pubkey&quot; } ], tx_hash: &quot;th_25d9WdqBWBudBLPiRqitXR5mrKt9PSxhqpGFNys6a2etwcHnXz&quot; }, %{ auction_end_height: 162553, created_at_height: 162073, expires_at: 212553, name: &quot;november1.chain&quot;, name_hash: &quot;nm_2oVYPHRg9XVei3H8UqWQ3NTLuzHN2Tz2tZ2STKbD8nVgMWfe6D&quot;, owner: &quot;ak_2swhLkgBPeeADxVTAVCJnZLY5NZtCFiM93JxsEaMuC59euuFRQ&quot;, pointers: nil, tx_hash: &quot;th_25V7KuVypp7twWgiavBebeXvb6pe46RaWV48b6nPJefNZLsCFi&quot; } ]}"},{"ref":"AeppSDK.Middleware.html#get_all_oracles/2","title":"AeppSDK.Middleware.get_all_oracles/2","type":"function","doc":"Gets all currently active oracles. Example iex()&gt; AeppSDK.Middleware.get_all_oracles(client, limit: 3, page: 1) {:ok, [ %{ block_height: 157646, expires_at: 158146, oracle_id: &quot;ok_2EaKARLitjLUsYxvL8tFhhUD3Z9EiBieD6yBAaGztJNcjKogXU&quot;, transaction_hash: &quot;th_AxLuDsKRsjmpRXcCp17wMiVumSkR7pH9XhKhRgXRDSiC438cx&quot;, tx: %{ abi_version: 0, account_id: &quot;ak_2EaKARLitjLUsYxvL8tFhhUD3Z9EiBieD6yBAaGztJNcjKogXU&quot;, fee: 16792000000000, nonce: 75, oracle_ttl: %{type: &quot;delta&quot;, value: 500}, query_fee: 1, query_format: &quot;{&#39;domain&#39;: str}&quot;, response_format: &quot;{&#39;txt&#39;: str}&quot;, ttl: 158146, type: &quot;OracleRegisterTx&quot;, version: 1 } }, %{ block_height: 155341, expires_at: 155841, oracle_id: &quot;ok_MtAkGssVvAQWXuvyGSiys1t29BiYmD1FoFswk7kxH5obNhtpg&quot;, transaction_hash: &quot;th_c2YYRtk5PLe1jrTg7BKvFjcMHor8vqP9ziD17hirXWKAdGr3h&quot;, tx: %{ abi_version: 0, account_id: &quot;ak_MtAkGssVvAQWXuvyGSiys1t29BiYmD1FoFswk7kxH5obNhtpg&quot;, fee: 16472000000000, nonce: 50, oracle_ttl: %{type: &quot;delta&quot;, value: 500}, query_fee: 30000, query_format: &quot;string&quot;, response_format: &quot;string&quot;, type: &quot;OracleRegisterTx&quot;, version: 1 } }, %{ block_height: 154814, expires_at: 155314, oracle_id: &quot;ok_2EaKARLitjLUsYxvL8tFhhUD3Z9EiBieD6yBAaGztJNcjKogXU&quot;, transaction_hash: &quot;th_UrvmhhvW8y7ovaXSwwupm64FBxySV32QZTBdP4ZoMRRxzXz8M&quot;, tx: %{ abi_version: 0, account_id: &quot;ak_2EaKARLitjLUsYxvL8tFhhUD3Z9EiBieD6yBAaGztJNcjKogXU&quot;, fee: 16792000000000, nonce: 65, oracle_ttl: %{type: &quot;delta&quot;, value: 500}, query_fee: 1, query_format: &quot;{&#39;domain&#39;: str}&quot;, response_format: &quot;{&#39;txt&#39;: str}&quot;, ttl: 154864, type: &quot;OracleRegisterTx&quot;, version: 1 } } ]}"},{"ref":"AeppSDK.Middleware.html#get_chain_size/1","title":"AeppSDK.Middleware.get_chain_size/1","type":"function","doc":"Gets current chain size. Example iex()&gt; AeppSDK.Middleware.get_chain_size(client) {:ok, %{size: 2231715109}}"},{"ref":"AeppSDK.Middleware.html#get_channel_txs/2","title":"AeppSDK.Middleware.get_channel_txs/2","type":"function","doc":"Gets channel transactions by channel id. Example iex()&gt; AeppSDK.Middleware.get_channel_txs(client, &quot;ch_JP22NWe19jPauZ67yNANC233oCgMnXpJ8JFMvRa29nnU4KSEb&quot;) {:ok, %{ transactions: [ %{ block_hash: &quot;mh_2tV4ynneNVoNhUUk7n7QdFSUUYMHAF51bYM9eqN6pR4jzfiooq&quot;, block_height: 78305, hash: &quot;th_2a4mKk47yzeoWRsCtZfWWgBnw874crjym1uEsJLbYer9iuPddJ&quot;, signatures: [&quot;sg_8ymgDq6ggivjL9NqNitSrSQE1o4ng8GhFydrR9MME7C38HEtA9j7dU3ejTVNWE8fMAxJg3C51uNta97YuzKHJHLaoxmdw&quot;, &quot;sg_U7oPAhQBtf4FRLE3TC5a1aFPvXrrGEvLccTeJVSrnho86Yfa6Ab5tTG5CrRtt9oFYu52XTfX33SEGb1sBb3Asa9QC6HWM&quot;], tx: %{ channel_reserve: 20000000000, delegate_ids: [], fee: 20000000000000, initiator_amount: 1000000000000000, initiator_id: &quot;ak_2mwRmUeYmfuW93ti9HMSUJzCk1EYcQEfikVSzgo6k2VghsWhgU&quot;, lock_period: 1, nonce: 546, responder_amount: 1000000000000000, responder_id: &quot;ak_fUq2NesPXcYZ1CcqBcGC3StpdnQw3iVxMA3YSeCNAwfN4myQk&quot;, state_hash: &quot;st_gLqNE4i3IL/+x60HN/5dlp7wgSLZWDJvSspVomecw/IsNYVA&quot;, type: &quot;ChannelCreateTx&quot;, version: 1 } } ] }}"},{"ref":"AeppSDK.Middleware.html#get_compilers/1","title":"AeppSDK.Middleware.get_compilers/1","type":"function","doc":"Gets currently available middleware compiler&#39;s version. Example iex()&gt; AeppSDK.Middleware.get_compilers(client) {:ok, %{compilers: [&quot;4.0.0&quot;]}}"},{"ref":"AeppSDK.Middleware.html#get_contract_address_calls/2","title":"AeppSDK.Middleware.get_contract_address_calls/2","type":"function","doc":"Gets contracts calls by contract id. Example iex&gt; AeppSDK.Middleware.get_contract_address_calls(client, &quot;ct_2ofvJh4ZpGLJdB25cGit41bC42vcKbC5vi8T9Js6EREe24RbfN&quot;) {:ok, []}"},{"ref":"AeppSDK.Middleware.html#get_contract_tx/2","title":"AeppSDK.Middleware.get_contract_tx/2","type":"function","doc":"Gets contract tx information. Example iex()&gt; AeppSDK.Middleware.get_contract_tx(client, &quot;ct_2ofvJh4ZpGLJdB25cGit41bC42vcKbC5vi8T9Js6EREe24RbfN&quot;) {:ok, %{ transactions: [ %{ block_hash: &quot;mh_P3unBGPipoRi5gPsAjQd5YaVD3XA51LPYhdcQz5yptnXwJgSD&quot;, block_height: 163495, hash: &quot;th_3tX9UJPzaeBMgQf4UziNXkHfCNaBb79YqUKjnv8Sv5r4TjE56&quot;, signatures: [&quot;sg_9iYLKihjXgqUUqkiYgHYcJHvKSwoPUBLM99rekf2XBfbuUNQkqUgpKvMG5BRMSANVv6BWZPK5BeiozBbHPkKCPTSLbZHH&quot;], tx: %{ abi_version: 3, amount: 0, call_data: &quot;cb_KxFE1kQfP4oEp9E=&quot;, code: &quot;cb_+QYFRgOgkuHoq7A/Qia27eQYdgtX/QB8xZzsLJnlVrYIoSkA4yjAuQXXuQQ4/gf80LEANwBHAH0AAP4NrXMdADcANwAMA/8MAoIpDAoaAoIBAz/+IDlsXAA3AEcAVQAA/iHwCd4CNwEnRwAXMwQABwwKNQYAADYGAgBVACAIAAcMCBoJAAIGAwAAAQP/AQN//iKbVT8ANwAXKCwKgiAwfwcMEgwDUUdhbWUgYWxyZWFkeSBzdGFydGVk+wAaAm+CJs8MA2+IDeC2s6dj/8ALACAABwwQDANFTm90IGVub3VnaCB0b2tlbnP7ABoCb4ImzwwDfygsCIICAxFb6ABtIAAHDA4BA38oLAiCVQA0AAwCgikMCBoCggED/wwDPwYDCAwDPwYDBP4p0PgzADcAZwc3A3cHJ3dVAH0AIAAHDAYMA3VPbmx5IGEgYm9zcyBub3cgdGhlIHF1ZXN0aW9uc/sAGgJvgibPKCwEggAMAz8GAwT+NIEJCAI3AkcAJ0cAJ0cAMwQCBwwKNQYAAjYGAgIgGAAABwwIGgkCAgYDAAABAgI4AAD+N7mjAgA3Agd3hwI3ADcBNwN3Byd3KCwMgiAwfwcMGAwDQVNvcnJ5LCBnYW1lIG92ZXL7ABoCb4ImzygsCoIgMP8HDBYMA21Tb3JyeSwgZ2FtZSBoYXMgbm90IHN0YXJ0ZWT7ABoCb4ImzwwBAgwBAAIDEXxkgqomAAcMEigsBIIxACAQAAcMEBQ0AAIoLASCKwBE/CMAAgICAAwD/wwCgikMDBoCglMAVQBlACgsBIIrEABE/CMAAgICACgsCIJVAAIDETSBCQgMAoIpDAgaAoJE/CMAAgAAAAwDPwYDCAwDPwYDBP5EsInoADcAJ0cAKCwIggD+RNZEHwA3ADcADAMCDANUDAN5V2hhdCBpcyB0aGUgY2FwaXRhbCBvZiBVcnVndWF5DAMCOAA0DCFOZXcgWW9yazQMGUJlcmxpbjQMFVZhZHV6NAwpTW9udGV2aWRlbycMBioCACoALTACLfgAAilNb250ZXZpZGVvOAAMA38MA38nDA4aAoIBAz/+W+gAbQI3ASdHABczBAAHDAo1BgAANgYCAFUAIAgABwwIGgkAAgYDAAABA/8BA3/+ZKDpUgA3AQc3A3cHJ3coLASCKxAAAP5uT9D7ADcBBwcMAQAMAoIpDAIaAoIBAQD+fGSCqgA3Agd3FygsBoIrEAAgEAIA/n1yCuQANwAHKCwCggD+rB35kwA3ABcoLAyCAP6zhfzjADcAFygsCIIEAxEh8Ane/rQQWDcANwN3dyd3NwB9AFUAIAAHDAYMA1VZb3UgYXJlIG5vdCB0aGUgQm9zcy77ABoCb4ImzygsAIIUMgICGgoEggwCAgwBAAwCAgwBBCcMBiguBgYEKCwEBC0gAi1oBgICDAIEKQwGKQwEKQwAGgKCAQM/DAM/BgME/sqgibAANwAXKCwKggD+16P7sQA3ABdVAH0AIAAAuQGWLxQRB/zQsSVnZXRfb3duZXIRDa1zHSlzdGFydF9nYW1lESA5bFw1cmV0dXJuX2NhbGxlchEh8AneQS5FbWluLmlzX2luX2xpc3QRIptVPyFyZWdpc3RlchEp0PgzNWdldF9xdWVzdGlvbnMRNIEJCHEuRW1pbi5kZWxldGVfZnJvbV9wYXJ0aXBhbnRzETe5owItbWFrZV9hbnN3ZXIRRLCJ6E1yZXR1cm5fcGFydGljaXBhbnRzEUTWRB8RaW5pdBFb6ABtZS5FbWluLmNoZWNrX2lmX3JlZ2lzdGVyZWQRZKDpUjFnZXRfcXVlc3Rpb24Rbk/Q+zlhZGRfdGVzdF92YWx1ZRF8ZIKqYWlzX3RoaXNfdGhlX3JpZ2h0X2Fuc3dlchF9cgrkPXJlYWRfdGVzdF92YWx1ZRGsHfmTPWlzX2dhbWVfc3RvcHBlZBGzhfzjNWlzX3JlZ2lzdGVyZWQRtBBYNzFhZGRfcXVlc3Rpb24RyqCJsD1pc19nYW1lX3N0YXJ0ZWQR16P7sSFpc19vd25lcoIvAIU0LjAuMAAu0vNH&quot;, deposit: 0, fee: 107360000000000, gas: 1579000, gas_price: 1000000000, nonce: 4, owner_id: &quot;ak_vrCNKooX2M5czsTvDyuLctZ5BRpfLYzVjHrD4wZoat5LJTGTt&quot;, type: &quot;ContractCreateTx&quot;, version: 1, vm_version: 5 } } ] }}"},{"ref":"AeppSDK.Middleware.html#get_current_tx_count/1","title":"AeppSDK.Middleware.get_current_tx_count/1","type":"function","doc":"Gets current transactions count. Example iex()&gt; AeppSDK.Middleware.get_current_tx_count(client) {:ok, %{count: 3563570}}"},{"ref":"AeppSDK.Middleware.html#get_generations_by_range/4","title":"AeppSDK.Middleware.get_generations_by_range/4","type":"function","doc":"Gets generations by provided range. Example iex()&gt; AeppSDK.Middleware.get_generations_by_range(client, 1, 3) {:ok, %{ data: %{ &quot;1&quot;: %{ beneficiary: &quot;ak_tjnw1KcmnwfqXvhtGa9GRjanbHM3t6PmEWEWtNMM3ouvNKRu5&quot;, hash: &quot;kh_23YYKqpKsL5zk58jWrBJaX72NuSh6x46AMLKFXvCgPJpqoYLhq&quot;, height: 1, micro_blocks: %{}, miner: &quot;ak_zhweEwzmZUdFFDFSaYNp7VijDkykTLQEzLeEqwUwyoZyApjdK&quot;, nonce: &quot;15040253459488731327&quot;, pow: &quot;[19301801, 28095945, 30242271, 41791129, 82345881, 91723980, 102883439, 104069957, 106940641, 120282690, 142003713, 143957273, 169264489, 173803306, 174682886, 195785945, 207612483, 217325518, 249938129, 251061536, 303550072, 304164231, 312469475, 312651779, 315101105, 324375018, 338690907, 351855961, 386966019, 402286237, 421227072, 429874165, 443260413, 443282006, 448769329, 453954186, 458940673, 462872156, 476035233, 518931704, 522144527, 524414597]&quot;, prev_hash: &quot;kh_wUCideEB8aDtUaiHCtKcfywU6oHZW6gnyci8Mw6S1RSTCnCRu&quot;, prev_key_hash: &quot;kh_wUCideEB8aDtUaiHCtKcfywU6oHZW6gnyci8Mw6S1RSTCnCRu&quot;, state_hash: &quot;bs_2aBz1QS23piMnSmZGwQk8iNCHLBdHSycPBbA5SHuScuYfHATit&quot;, target: 553713663, time: 1543365752204, version: 1 }, &quot;2&quot;: %{ beneficiary: &quot;ak_tjnw1KcmnwfqXvhtGa9GRjanbHM3t6PmEWEWtNMM3ouvNKRu5&quot;, hash: &quot;kh_iLwwTNfbTqbQ7V2YLQ7gDMBLjSWDMbxVEWGjZmhyChdXYQwSu&quot;, height: 2, micro_blocks: %{}, miner: &quot;ak_KtomXcxCxYKzsWEkg7PBjRkJnDbm6spCst9xu3YxW7LJVKsS3&quot;, nonce: &quot;6403914643639874925&quot;, pow: &quot;[9984723, 18650504, 31167967, 31826588, 44902620, 56808905, 57785192, 84575784, 86542607, 101408783, 104898904, 116623406, 129971517, 130064166, 133694218, 140897051, 144025750, 151252661, 155243552, 166095989, 223475660, 257256157, 264618551, 268964880, 297680261, 325751712, 328577779, 337697626, 351593578, 388391126, 403553279, 428485724, 433882115, 454241604, 458860106, 459810672, 485373033, 487640676, 494206006, 505861883, 514721839, 527221220]&quot;, prev_hash: &quot;kh_23YYKqpKsL5zk58jWrBJaX72NuSh6x46AMLKFXvCgPJpqoYLhq&quot;, prev_key_hash: &quot;kh_23YYKqpKsL5zk58jWrBJaX72NuSh6x46AMLKFXvCgPJpqoYLhq&quot;, state_hash: &quot;bs_2aBz1QS23piMnSmZGwQk8iNCHLBdHSycPBbA5SHuScuYfHATit&quot;, target: 553713663, time: 1543366085754, version: 1 }, &quot;3&quot;: %{ beneficiary: &quot;ak_tjnw1KcmnwfqXvhtGa9GRjanbHM3t6PmEWEWtNMM3ouvNKRu5&quot;, hash: &quot;kh_224cbECuLXGgtvpztWLk4Gzt5rmbZPct44ZRp8D53pDnMTUZbL&quot;, height: 3, micro_blocks: %{}, miner: &quot;ak_tWQsH4xDw9BQTskEhxfzTo1YKKvHPv8HQuGwznE2deVYnB56M&quot;, nonce: &quot;9125645628778770359&quot;, pow: &quot;[5405614, 23679211, 25026305, 31199047, 34932131, 44406298, 44495059, 45425472, 54549729, 68929916, 86198221, 122096165, 147175413, 149290166, 150539341, 176858670, 182595876, 195787048, 195908320, 258102447, 283305487, 302006333, 313896693, 323002385, 329065752, 348066385, 356436712, 364424972, 365325129, 377790606, 430401010, 456999253, 469423279, 474209533, 475109438, 477756370, 487904326, 498235474, 500574450, 514064550, 534556511, 535480510]&quot;, prev_hash: &quot;kh_iLwwTNfbTqbQ7V2YLQ7gDMBLjSWDMbxVEWGjZmhyChdXYQwSu&quot;, prev_key_hash: &quot;kh_iLwwTNfbTqbQ7V2YLQ7gDMBLjSWDMbxVEWGjZmhyChdXYQwSu&quot;, state_hash: &quot;bs_2aBz1QS23piMnSmZGwQk8iNCHLBdHSycPBbA5SHuScuYfHATit&quot;, target: 553713663, time: 1543367260908, version: 1 } }, total_micro_blocks: 0, total_transactions: 0 }}"},{"ref":"AeppSDK.Middleware.html#get_height_by_time/2","title":"AeppSDK.Middleware.get_height_by_time/2","type":"function","doc":"Gets height by provided timestamp in milliseconds. Example iex()&gt; AeppSDK.Middleware.get_height_by_time(client, 1_572_883_000_000) {:ok, %{height: 163532}}"},{"ref":"AeppSDK.Middleware.html#get_middleware_status/1","title":"AeppSDK.Middleware.get_middleware_status/1","type":"function","doc":"Gets current middleware status. Example iex()&gt; AeppSDK.Middleware.get_middleware_status(client) {:ok, %{OK: true, queue_length: 0, seconds_since_last_block: 178, version: &quot;0.10.0&quot;}}"},{"ref":"AeppSDK.Middleware.html#get_name_auctions_bids_by_address/3","title":"AeppSDK.Middleware.get_name_auctions_bids_by_address/3","type":"function","doc":"Gets name auction bids by address. Example iex(65)&gt; AeppSDK.Middleware.get_name_auctions_bids_by_address(client, &quot;ak_bpN6hPjRg7giYu2ChXDPK7aLP2WPw3nzFFkNouLoGt33WsWu9&quot;) {:ok, [ %{ name_auction_entry: %{ expiration: 163904, name: &quot;valiotest123.chain&quot;, winning_bid: &quot;2865700000000000000&quot;, winning_bidder: &quot;ak_bpN6hPjRg7giYu2ChXDPK7aLP2WPw3nzFFkNouLoGt33WsWu9&quot; }, transaction: %{ block_hash: &quot;mh_2bnZzsXhBd7kofrMGKoR89S1Vo8uwnfRgjrgoLpMrSWSZRdCmU&quot;, block_height: 163424, fee: &quot;180040000000000&quot;, hash: &quot;th_2SSzgLbmrA6jiJqTbEc87daMSJ7HpJ2tccpKG2KPrqbNaJ4b2E&quot;, signatures: &quot;sg_5GnuNxNS5BpbTU4eMajSxHuQt3b3K6JHnH219a6uR77iGY7TQKBYYvyuSKJpVZNa43S3AZNPkMFCpFXWvjMmyrCBQaRpx&quot;, size: 223, tx: %{ account_id: &quot;ak_bpN6hPjRg7giYu2ChXDPK7aLP2WPw3nzFFkNouLoGt33WsWu9&quot;, fee: 180040000000000, name: &quot;valiotest123.chain&quot;, name_fee: 2865700000000000000, name_salt: 8914081986392545, nonce: 30, type: &quot;NameClaimTx&quot;, version: 2 }, tx_type: &quot;NameClaimTx&quot; } }, %{ name_auction_entry: %{ expiration: 161982, name: &quot;testingnamechain.chain&quot;, winning_bid: &quot;2865700000000000000&quot;, winning_bidder: &quot;ak_bpN6hPjRg7giYu2ChXDPK7aLP2WPw3nzFFkNouLoGt33WsWu9&quot; }, transaction: %{ block_hash: &quot;mh_2bvndPYbjumABQZRsAxQ8EAkqtb9uuyk5sWQe3ncWCSqyTiHhu&quot;, block_height: 161982, fee: &quot;165600000000000&quot;, hash: &quot;th_28ZaX6BzqKoBDdtJNjaggNtpbAbMKTnK5J8XSoprPzNmP6Xv5p&quot;, signatures: &quot;sg_JXk9Je3bWsuD989fWjnJgSMdRZBAXLSTrEzZRGyDMxmEsChMHq4vjLDfyZAGpw4oJMXwJ9qKcy4d3i43dQ7voQ93P6z4w&quot;, size: 226, tx: %{ account_id: &quot;ak_bpN6hPjRg7giYu2ChXDPK7aLP2WPw3nzFFkNouLoGt33WsWu9&quot;, fee: 165600000000000, name: &quot;testingnamechain.chain&quot;, name_fee: 2865700000000000000, name_salt: 8285267173752605, nonce: 5, type: &quot;NameClaimTx&quot;, version: 2 }, tx_type: &quot;NameClaimTx&quot; } } ]}"},{"ref":"AeppSDK.Middleware.html#get_name_auctions_bids_by_name/3","title":"AeppSDK.Middleware.get_name_auctions_bids_by_name/3","type":"function","doc":"Gets name auction bids by name. Example iex()&gt; AeppSDK.Middleware.get_name_auctions_bids_by_name(client, &quot;valiotest123.chain&quot;) {:ok, [ %{ block_hash: &quot;mh_2bnZzsXhBd7kofrMGKoR89S1Vo8uwnfRgjrgoLpMrSWSZRdCmU&quot;, block_height: 163424, fee: &quot;180040000000000&quot;, hash: &quot;th_2SSzgLbmrA6jiJqTbEc87daMSJ7HpJ2tccpKG2KPrqbNaJ4b2E&quot;, signatures: &quot;sg_5GnuNxNS5BpbTU4eMajSxHuQt3b3K6JHnH219a6uR77iGY7TQKBYYvyuSKJpVZNa43S3AZNPkMFCpFXWvjMmyrCBQaRpx&quot;, size: 223, tx: %{ account_id: &quot;ak_bpN6hPjRg7giYu2ChXDPK7aLP2WPw3nzFFkNouLoGt33WsWu9&quot;, fee: 180040000000000, name: &quot;valiotest123.chain&quot;, name_fee: 2865700000000000000, name_salt: 8914081986392545, nonce: 30, type: &quot;NameClaimTx&quot;, version: 2 }, tx_type: &quot;NameClaimTx&quot; } ]}"},{"ref":"AeppSDK.Middleware.html#get_name_by_address/3","title":"AeppSDK.Middleware.get_name_by_address/3","type":"function","doc":"Gets name information by account address. Example iex()&gt; AeppSDK.Middleware.get_name_by_address(client, &quot;ak_DzELMKnSfJcfnCUZ2SbXUSxRmFYtGrWmMuKiCx68YKLH26kwc&quot;) {:ok, [ %{ auction_end_height: 121384, created_at_height: 106504, expires_at: 171384, name: &quot;aeternity.test&quot;, name_hash: &quot;nm_2QvSFGwCHcEqMFrY3VAnTNxmDELnf69bEwQ6jDrHp8t7YDREYD&quot;, owner: &quot;ak_DzELMKnSfJcfnCUZ2SbXUSxRmFYtGrWmMuKiCx68YKLH26kwc&quot;, pointers: [ %{ id: &quot;ak_DzELMKnSfJcfnCUZ2SbXUSxRmFYtGrWmMuKiCx68YKLH26kwc&quot;, key: &quot;account_pubkey&quot; } ], tx_hash: &quot;th_2sYEagAWZzagV3VWH2u11F3Wx4PZZ9Mh7YTV75JNmK2zSJLGws&quot; }, %{ auction_end_height: 118155, created_at_height: 103275, expires_at: 168155, name: &quot;davidyuk.test&quot;, name_hash: &quot;nm_EstGDe5sJVEaWSYnKtbEATp1X9kbhbjX8hLEvUgMM7XSkndmh&quot;, owner: &quot;ak_2swhLkgBPeeADxVTAVCJnZLY5NZtCFiM93JxsEaMuC59euuFRQ&quot;, pointers: [ %{ id: &quot;ak_DzELMKnSfJcfnCUZ2SbXUSxRmFYtGrWmMuKiCx68YKLH26kwc&quot;, key: &quot;account_pubkey&quot; } ], tx_hash: &quot;th_jA3SPtRcf8SXWLwb9Tp2ccAjR6WJ3tsE4EyEMe7BiUxCgc33F&quot; }, %{ auction_end_height: 162076, created_at_height: 162076, expires_at: 212123, name: &quot;hhhhjjjjjkkkkklllll2.chain&quot;, name_hash: &quot;nm_Q4KxpLCRNULjfHbbW4dcJLbAAddjBgwapUS9gccy2K2Cm9eJV&quot;, owner: &quot;ak_DzELMKnSfJcfnCUZ2SbXUSxRmFYtGrWmMuKiCx68YKLH26kwc&quot;, pointers: [ %{ id: &quot;ak_DzELMKnSfJcfnCUZ2SbXUSxRmFYtGrWmMuKiCx68YKLH26kwc&quot;, key: &quot;account_pubkey&quot; } ], tx_hash: &quot;th_25d9WdqBWBudBLPiRqitXR5mrKt9PSxhqpGFNys6a2etwcHnXz&quot; } ]}"},{"ref":"AeppSDK.Middleware.html#get_oracle_data/3","title":"AeppSDK.Middleware.get_oracle_data/3","type":"function","doc":"Gets oracle data by oracle id. Example iex&gt; AeppSDK.Middleware.get_oracle_data(client, &quot;ok_2hzMeKfxSTg3QBiin34PA1pzQwscULv3RcNuxMasaKzoUSH53o&quot;) {:ok, [ %{ query_id: &quot;oq_bx4rA34C5yJPMFdYPnDWms7G2zBd5XfhRugcEJ5VMSMDfQ4Dg&quot;, request: %{ fee: 17232000000000, hash: &quot;th_x3ZprBPMBBFFEe3zTw3qoW7SHfg2qVss8gaiPHzyBubf3RpZ4&quot;, nonce: 2, oracle_id: &quot;ok_2hzMeKfxSTg3QBiin34PA1pzQwscULv3RcNuxMasaKzoUSH53o&quot;, query: &quot;Presidente de VZLA&quot;, query_fee: 30000, query_ttl: %{type: &quot;delta&quot;, value: 10}, response_ttl: %{type: &quot;delta&quot;, value: 10}, sender_id: &quot;ak_2hzMeKfxSTg3QBiin34PA1pzQwscULv3RcNuxMasaKzoUSH53o&quot;, timestamp: 1567719861063, type: &quot;OracleQueryTx&quot;, version: 1 }, response: %{ fee: 17232000000000, hash: &quot;th_2Pf8cFEzg5GBjmX7dPMLL19HMyF9b3kvAj4get8WT2iJ88euMv&quot;, nonce: 3, oracle_id: &quot;ok_2hzMeKfxSTg3QBiin34PA1pzQwscULv3RcNuxMasaKzoUSH53o&quot;, query_id: &quot;oq_bx4rA34C5yJPMFdYPnDWms7G2zBd5XfhRugcEJ5VMSMDfQ4Dg&quot;, response: &quot;MADURO COño DE TU MADRE&quot;, response_ttl: %{type: &quot;delta&quot;, value: 10}, timestamp: 1567720145598, type: &quot;OracleRespondTx&quot;, version: 1 } } ]}"},{"ref":"AeppSDK.Middleware.html#get_reward_at_height/2","title":"AeppSDK.Middleware.get_reward_at_height/2","type":"function","doc":"Gets miner reward at given height. Example iex()&gt; AeppSDK.Middleware.get_reward_at_height(client, 10_234) {:ok, {:ok, %{ beneficiary: &quot;ak_2iBPH7HUz3cSDVEUWiHg76MZJ6tZooVNBmmxcgVK6VV8KAE688&quot;, coinbase: &quot;5831398157261209600&quot;, fees: &quot;2400000&quot;, height: 10234, total: &quot;5831398157263609600&quot; }}"},{"ref":"AeppSDK.Middleware.html#get_size_at_height/2","title":"AeppSDK.Middleware.get_size_at_height/2","type":"function","doc":"Gets size of a blockchain at given height. Examples: iex()&gt; AeppSDK.Middleware.get_size_at_height(client, 10_234) {:ok, %{size: 1220968}}"},{"ref":"AeppSDK.Middleware.html#get_tx_between_address/3","title":"AeppSDK.Middleware.get_tx_between_address/3","type":"function","doc":"Get transactions made between 2 addresses. Example iex(80)&gt; AeppSDK.Middleware.get_tx_between_address(client, client.keypair.public, client.keypair.public) {:ok, %{ transactions: [ %{ block_hash: &quot;mh_FVT3WxJPMeg1uFZDV7pXCrSekgCsoSmM3MztURDje3UCjGbyo&quot;, block_height: 162089, hash: &quot;th_bd8qvyaTo45U7MKh1Y1PG7bCPmzqeiHWS1bTfK31kMZU1hZzZ&quot;, signatures: [&quot;sg_DgGnuqnwHACmiKVv6uEk3a9H1g6EPshA6oSzoBFQ8wsBMRTCppLssLhivzk9JWGxTUqmFg2xzPDjV2dDGrqSwWGQoCYTP&quot;], tx: %{ amount: 10000, fee: 16700000000000, nonce: 8, payload: &quot;ba_Xfbg4g==&quot;, recipient_id: &quot;ak_jQGc3ECvnQYDZY3i97WSHPigL9tTaVEz1oLBW5J4F1JTKS1g7&quot;, sender_id: &quot;ak_jQGc3ECvnQYDZY3i97WSHPigL9tTaVEz1oLBW5J4F1JTKS1g7&quot;, type: &quot;SpendTx&quot;, version: 1 } }, %{ block_hash: &quot;mh_imPyUPD9EyHqUa1nBRL1oi4JPjUEDAB9GRgGSXy4BWg7tQbgi&quot;, block_height: 162085, hash: &quot;th_wG7ioeErrMFuKCX6o8iB5uijNuFbtn7EzrGzP4d3F6XvTCmR2&quot;, signatures: [&quot;sg_Kv4YVVVWrgE2MS5Ejm4A7zZ4LDoncNMkJ4AKoyFNNbk9DG1xBZ4B7C3ihRs7HZaTazVj1A1rRXKrwMuqhuKKBV7gxo16B&quot;], tx: %{ amount: 10000, fee: 16700000000000, nonce: 7, payload: &quot;ba_Xfbg4g==&quot;, recipient_id: &quot;ak_jQGc3ECvnQYDZY3i97WSHPigL9tTaVEz1oLBW5J4F1JTKS1g7&quot;, sender_id: &quot;ak_jQGc3ECvnQYDZY3i97WSHPigL9tTaVEz1oLBW5J4F1JTKS1g7&quot;, type: &quot;SpendTx&quot;, version: 1 } },....] }}"},{"ref":"AeppSDK.Middleware.html#get_tx_by_account/3","title":"AeppSDK.Middleware.get_tx_by_account/3","type":"function","doc":"Get transaction by given account. Example iex&gt; AeppSDK.Middleware.get_tx_by_account(client, client.keypair.public) {:ok, [ %{ block_hash: &quot;mh_FVT3WxJPMeg1uFZDV7pXCrSekgCsoSmM3MztURDje3UCjGbyo&quot;, block_height: 162089, hash: &quot;th_bd8qvyaTo45U7MKh1Y1PG7bCPmzqeiHWS1bTfK31kMZU1hZzZ&quot;, signatures: [&quot;sg_DgGnuqnwHACmiKVv6uEk3a9H1g6EPshA6oSzoBFQ8wsBMRTCppLssLhivzk9JWGxTUqmFg2xzPDjV2dDGrqSwWGQoCYTP&quot;], time: 1572621118801, tx: %{ amount: 10000, fee: 16700000000000, nonce: 8, payload: &quot;ba_Xfbg4g==&quot;, recipient_id: &quot;ak_jQGc3ECvnQYDZY3i97WSHPigL9tTaVEz1oLBW5J4F1JTKS1g7&quot;, sender_id: &quot;ak_jQGc3ECvnQYDZY3i97WSHPigL9tTaVEz1oLBW5J4F1JTKS1g7&quot;, type: &quot;SpendTx&quot;, version: 1 } }, %{ block_hash: &quot;mh_imPyUPD9EyHqUa1nBRL1oi4JPjUEDAB9GRgGSXy4BWg7tQbgi&quot;, block_height: 162085, hash: &quot;th_wG7ioeErrMFuKCX6o8iB5uijNuFbtn7EzrGzP4d3F6XvTCmR2&quot;, signatures: [&quot;sg_Kv4YVVVWrgE2MS5Ejm4A7zZ4LDoncNMkJ4AKoyFNNbk9DG1xBZ4B7C3ihRs7HZaTazVj1A1rRXKrwMuqhuKKBV7gxo16B&quot;], time: 1572620262508, tx: %{ amount: 10000, fee: 16700000000000, nonce: 7, payload: &quot;ba_Xfbg4g==&quot;, recipient_id: &quot;ak_jQGc3ECvnQYDZY3i97WSHPigL9tTaVEz1oLBW5J4F1JTKS1g7&quot;, sender_id: &quot;ak_jQGc3ECvnQYDZY3i97WSHPigL9tTaVEz1oLBW5J4F1JTKS1g7&quot;, type: &quot;SpendTx&quot;, version: 1 } }, ... ]}"},{"ref":"AeppSDK.Middleware.html#get_tx_by_generation_range/4","title":"AeppSDK.Middleware.get_tx_by_generation_range/4","type":"function","doc":"Gets all transactions in between the given generation range. Example iex&gt; AeppSDK.Middleware.get_tx_by_generation_range(client, 162_028, 162_029) {:ok, %{ transactions: [ %{ block_hash: &quot;mh_S2PaFf54rfoDWKpCnTRG2M7mkoLh9QwMSuRsuW11QtaXHrjUU&quot;, block_height: 162028, hash: &quot;th_WrqJ572JPhr1pGZWUx79y7r43cvae242fFb3ERH2FfUUR2hAw&quot;, signatures: [&quot;sg_TnTp3pCmFEGDU3vfwE8j91rakHFzXsPgu7jYnmwE6wXzY6WQ29wjktejUreWDrgKCfTDR3nafFLPL3fx66KzjGQBYtgnw&quot;], tx: %{ amount: 20000, fee: 19320000000000, nonce: 731793, payload: &quot;ba_MTYyMDI4OmtoXzJxSFRQSlRrSnBGUDRidVlaR2t0dEc2QnQya29IbkR1ZkVnc3UxNVdIRDIxUDlXcnV6Om1oX1pKTW95OWJ3a3V5SlVZR2dFMVlveUNRQlpxcE5RR3d3VXg1QnlCdnNQZWRBYmVReVg6MTU3MjYwOTg3OJ7BQuw=&quot;, recipient_id: &quot;ak_2MNyoyers8hsh9gEHtoP7KNHC3ycs7RcVnK2udeb3ytqUD2TpC&quot;, sender_id: &quot;ak_2MNyoyers8hsh9gEHtoP7KNHC3ycs7RcVnK2udeb3ytqUD2TpC&quot;, ttl: 162038, type: &quot;SpendTx&quot;, version: 1 } },...]} }"},{"ref":"AeppSDK.Middleware.html#get_tx_count_by_address/3","title":"AeppSDK.Middleware.get_tx_count_by_address/3","type":"function","doc":"Gets transaction count by address. Example iex()&gt; AeppSDK.Middleware.get_tx_count_by_address(client, client.keypair.public) {:ok, %{count: 9}}"},{"ref":"AeppSDK.Middleware.html#get_tx_rate_by_date_range/3","title":"AeppSDK.Middleware.get_tx_rate_by_date_range/3","type":"function","doc":"Gets transaction rate by provided date range. Example iex()&gt; AeppSDK.Middleware.get_tx_rate_by_date_range(client, &quot;20191103&quot;, &quot;20191105&quot;) {:ok, [%{amount: &quot;55200300000676980000&quot;, count: 33866, date: &quot;2019-11-04&quot;}]}"},{"ref":"AeppSDK.Middleware.html#search_name/2","title":"AeppSDK.Middleware.search_name/2","type":"function","doc":"Searches for given name. Example iex()&gt; AeppSDK.Middleware.search_name(client, &quot;valiotest123.chain&quot;) {:ok, [ %{ auction_end_height: 163904, created_at_height: 163424, expires_at: 213904, name: &quot;valiotest123.chain&quot;, name_hash: &quot;nm_26BZCRgqZt7fBscTvwpTb8Ur6tEaN6wCjHzvjsf5dKtjS4RYEk&quot;, owner: &quot;ak_bpN6hPjRg7giYu2ChXDPK7aLP2WPw3nzFFkNouLoGt33WsWu9&quot;, pointers: nil, tx_hash: &quot;th_2SSzgLbmrA6jiJqTbEc87daMSJ7HpJ2tccpKG2KPrqbNaJ4b2E&quot; } ]}"},{"ref":"AeppSDK.Oracle.html","title":"AeppSDK.Oracle","type":"module","doc":"Module for oracle interaction, see: https://github.com/aeternity/protocol/blob/master/oracles/oracles.md. In order for its functions to be used, a client must be defined first. Client example can be found at: AeppSDK.Client.new/4."},{"ref":"AeppSDK.Oracle.html#extend/4","title":"AeppSDK.Oracle.extend/4","type":"function","doc":"Extend the TTL of an oracle by a relative amount. Example iex&gt; oracle_id = &quot;ok_4K1dYTkXcLwoUEat9fMgVp3RrG3HTD51v4VzszYDgt2MqxzKM&quot; iex&gt; ttl = 10 iex&gt; AeppSDK.Oracle.extend(client, oracle_id, ttl) {:ok, %{ block_hash: &quot;mh_21HxnSLJRhqB9S3aUfLDAqR3BMFKPj62vT1zuy1MsS7N4Ps94s&quot;, block_height: 77276, tx_hash: &quot;th_3911tboNbJWA6X57tejX8yGQALdeqAQECk1BwyS43pPtEXt4C&quot; }}"},{"ref":"AeppSDK.Oracle.html#get_oracle/2","title":"AeppSDK.Oracle.get_oracle/2","type":"function","doc":"Get an oracle object. Example iex&gt; oracle_id = &quot;ok_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; AeppSDK.Oracle.get_oracle(client, oracle_id) {:ok, %{ abi_version: 1, id: &quot;ok_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, query_fee: 30, query_format: &quot;cb_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATWiO1g==&quot;, response_format: &quot;cb_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATWiO1g==&quot;, ttl: 77316 }}"},{"ref":"AeppSDK.Oracle.html#get_queries/2","title":"AeppSDK.Oracle.get_queries/2","type":"function","doc":"Get all queries of an oracle. Example iex&gt; oracle_id = &quot;ok_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; AeppSDK.Oracle.get_queries(client, oracle_id) {:ok, [ %{ fee: 30, id: &quot;oq_253A8BSZqUofetC5U9DqdJfYAcF5SHi6DPr5gPPSrayP8cwSUP&quot;, oracle_id: &quot;ok_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, query: %{&quot;a&quot; =&gt; 1}, query_ttl: 83952, response: &quot;&quot;, response_ttl: 1, sender_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, sender_nonce: 11662 } ]}"},{"ref":"AeppSDK.Oracle.html#get_query/3","title":"AeppSDK.Oracle.get_query/3","type":"function","doc":"Get an oracle query by its ID. Example iex&gt; oracle_id = &quot;ok_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; query_id = &quot;oq_253A8BSZqUofetC5U9DqdJfYAcF5SHi6DPr5gPPSrayP8cwSUP&quot; iex&gt; AeppSDK.Oracle.get_query(client, oracle_id, query_id) {:ok, %{ fee: 30, id: &quot;oq_253A8BSZqUofetC5U9DqdJfYAcF5SHi6DPr5gPPSrayP8cwSUP&quot;, oracle_id: &quot;ok_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, query: %{&quot;a&quot; =&gt; 1}, query_ttl: 83952, response: &quot;&quot;, response_ttl: 1, sender_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, sender_nonce: 11662 }}"},{"ref":"AeppSDK.Oracle.html#query/6","title":"AeppSDK.Oracle.query/6","type":"function","doc":"Query an oracle. Keep in mind that the response TTL is always relative, and that the sum of the relative query and response TTL can&#39;t be higher than the oracle&#39;s TTL. Example iex&gt; oracle_id = &quot;ok_4K1dYTkXcLwoUEat9fMgVp3RrG3HTD51v4VzszYDgt2MqxzKM&quot; iex&gt; query = &quot;a query&quot; iex&gt; query_ttl = %{type: :relative, value: 1_000} iex&gt; response_ttl = 1_000 iex&gt; AeppSDK.Oracle.query(client, oracle_id, query, query_ttl, response_ttl) {:ok, %{ block_hash: &quot;mh_2SgSB1yeekq8JseSfkKhAPuvs7RF3YUjm896g4aj2GPpSa9AnJ&quot;, block_height: 77276, query_id: &quot;oq_u7sgmMQNjZQ4ffsN9sSmEhzqsag1iEfx8SkHDeG1y8EbDB5Aq&quot;, tx_hash: &quot;th_2esUdavCBmW1oYSCichdQv3txyWXYsDSAum2jAvQfpgktJ4oEt&quot; }}"},{"ref":"AeppSDK.Oracle.html#register/6","title":"AeppSDK.Oracle.register/6","type":"function","doc":"Register a typed oracle. Queries and responses that don&#39;t follow the oracle&#39;s respective formats are invalid. The query and response types are sophia types. Example iex&gt; query_format = &quot;string&quot; iex&gt; response_format = &quot;map(string, string)&quot; iex&gt; oracle_ttl = %{type: :relative, value: 10_000} iex&gt; query_fee = 100 iex&gt; AeppSDK.Oracle.register(client, query_format, response_format, oracle_ttl, query_fee) {:ok, %{ block_hash: &quot;mh_5zfVXCDwsBRjukTPjKRaS7T3TCc4Mn5PMTS19cWbcjRjeXjcF&quot;, block_height: 77276, oracle_id: &quot;ok_4K1dYTkXcLwoUEat9fMgVp3RrG3HTD51v4VzszYDgt2MqxzKM&quot;, tx_hash: &quot;th_21qrcDco5fL1cuaNqM1Ug1ojHiSzjnuEYzVEpwxVwuS2V95qBk&quot; }}"},{"ref":"AeppSDK.Oracle.html#respond/6","title":"AeppSDK.Oracle.respond/6","type":"function","doc":"Respond to an oracle query. Only the oracle&#39;s owner can respond to its queries. Example iex&gt; oracle_id = &quot;ok_4K1dYTkXcLwoUEat9fMgVp3RrG3HTD51v4VzszYDgt2MqxzKM&quot; iex&gt; query_id = &quot;oq_u7sgmMQNjZQ4ffsN9sSmEhzqsag1iEfx8SkHDeG1y8EbDB5Aq&quot; iex&gt; response = %{&quot;a&quot; =&gt; &quot;response&quot;} iex&gt; query_ttl = %{type: :relative, value: 1_000} iex&gt; response_ttl = 1_000 iex&gt; AeppSDK.Oracle.respond(client, oracle_id, query_id, response, response_ttl) {:ok, %{ block_hash: &quot;mh_QTXMDn8Ln6fiBBXByXJkEeD6wq6QzQZHMVuApbouTFaqWMkSt&quot;, block_height: 77276, tx_hash: &quot;th_2cBk9pBEwMSD3xtYMvrsFWJ3atuGN29XQUZfKV65KYMQuPJLiV&quot; }}"},{"ref":"AeppSDK.Oracle.html#t:oracle_options/0","title":"AeppSDK.Oracle.oracle_options/0","type":"type","doc":""},{"ref":"AeppSDK.Oracle.html#t:query_options/0","title":"AeppSDK.Oracle.query_options/0","type":"type","doc":""},{"ref":"AeppSDK.Oracle.html#t:sophia_data/0","title":"AeppSDK.Oracle.sophia_data/0","type":"type","doc":""},{"ref":"AeppSDK.Oracle.html#t:sophia_type/0","title":"AeppSDK.Oracle.sophia_type/0","type":"type","doc":"See https://github.com/aeternity/protocol/blob/master/contracts/sophia.md#types"},{"ref":"AeppSDK.Oracle.html#t:ttl/0","title":"AeppSDK.Oracle.ttl/0","type":"type","doc":""},{"ref":"AeppSDK.Oracle.html#t:ttl_type/0","title":"AeppSDK.Oracle.ttl_type/0","type":"type","doc":""},{"ref":"AeppSDK.Utils.Account.html","title":"AeppSDK.Utils.Account","type":"module","doc":"Account AeppSDK.Utils. In order for its functions to be used, a client must be defined first. Client example can be found at: AeppSDK.Client.new/4."},{"ref":"AeppSDK.Utils.Account.html#next_valid_nonce/2","title":"AeppSDK.Utils.Account.next_valid_nonce/2","type":"function","doc":"Get the next valid nonce for a public key Example iex&gt; public_key = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; AeppSDK.Utils.Account.next_valid_nonce(client, public_key) {:ok, 8544}"},{"ref":"AeppSDK.Utils.Account.html#nonce_at_hash/3","title":"AeppSDK.Utils.Account.nonce_at_hash/3","type":"function","doc":"Get the nonce after a block indicated by hash Example iex&gt; public_key = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; block_hash = &quot;kh_WPQzXtyDiwvUs54N1L88YsLPn51PERHF76bqcMhpT5vnrAEAT&quot; iex&gt; AeppSDK.Utils.Account.nonce_at_hash(client, public_key, block_hash) {:ok, 8327}"},{"ref":"AeppSDK.Utils.Chain.html","title":"AeppSDK.Utils.Chain","type":"module","doc":"Chain AeppSDK.Utils. In order for its functions to be used, a client must be defined first. Client example can be found at: AeppSDK.Client.new/4."},{"ref":"AeppSDK.Utils.Chain.html#get_top_block_hash/1","title":"AeppSDK.Utils.Chain.get_top_block_hash/1","type":"function","doc":"Get the hash of the current top block Example iex&gt; AeppSDK.Utils.Chain.get_top_block_hash(client) {:ok, &quot;kh_7e74Hs2ThcNdjFD1i5XngUbzTHgmXn9jTaXSej1XKio7rkpgM&quot;}"},{"ref":"AeppSDK.Utils.Encoding.html","title":"AeppSDK.Utils.Encoding","type":"module","doc":"Contains encoding/decoding utils, see: https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md."},{"ref":"AeppSDK.Utils.Encoding.html#decode_base58c/1","title":"AeppSDK.Utils.Encoding.decode_base58c/1","type":"function","doc":"Decode a base58check string to binary iex&gt; AeppSDK.Utils.Encoding.decode_base58c(&quot;2XEob1Ub1DWCzeMLm1CWQKrUBsVfF9zLZBDaUXiu6Lr1qLn55n&quot;) &lt;&lt;200, 90, 234, 160, 66, 120, 244, 87, 88, 94, 87, 208, 13, 42, 126, 71, 172, 2, 81, 252, 214, 24, 155, 227, 26, 49, 210, 31, 106, 147, 200, 81&gt;&gt;"},{"ref":"AeppSDK.Utils.Encoding.html#decode_base64/1","title":"AeppSDK.Utils.Encoding.decode_base64/1","type":"function","doc":"Decode a base64 string to binary Example iex&gt; AeppSDK.Utils.Encoding.decode_base64(&quot;+JwLAfhCuEDvqFLqm4nJBGWKah0RlZeqtTew3r1Nf+NOyv0Gn+uMKaVNeJGXrbM3Soot0EuKOOOlwxiTfr/O0qGqV4jlHgYCuFT4UgwBoQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoKh3BheWxvYWRdSVlidOin1A==&quot;) &lt;&lt;248, 156, 11, 1, 248, 66, 184, 64, 239, 168, 82, 234, 155, 137, 201, 4, 101, 138, 106, 29, 17, 149, 151, 170, 181, 55, 176, 222, 189, 77, 127, 227, 78, 202, 253, 6, 159, 235, 140, 41, 165, 77, 120, 145, 151, 173, 179, 55, 74, 138, 45, 208, 75, 138, 56, 227, 165, 195, 24, 147, 126, 191, 206, 210, 161, 170, 87, 136, 229, 30, 6, 2, 184, 84, 248, 82, 12, 1, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 135, 112, 97, 121, 108, 111, 97, 100, 93, 73, 89, 98&gt;&gt;"},{"ref":"AeppSDK.Utils.Encoding.html#encode_base58c/1","title":"AeppSDK.Utils.Encoding.encode_base58c/1","type":"function","doc":"Encode a binary payload to base58check Example iex&gt; AeppSDK.Utils.Encoding.encode_base58c(&lt;&lt;200, 90, 234, 160, 66, 120, 244, 87, 88, 94, 87, 208, 13, 42, 126, 71, 172, 2, 81, 252, 214, 24, 155, 227, 26, 49, 210, 31, 106, 147, 200, 81&gt;&gt;) &quot;2XEob1Ub1DWCzeMLm1CWQKrUBsVfF9zLZBDaUXiu6Lr1qLn55n&quot;"},{"ref":"AeppSDK.Utils.Encoding.html#encode_base64/1","title":"AeppSDK.Utils.Encoding.encode_base64/1","type":"function","doc":"Encode a binary payload to base64 Example iex&gt; AeppSDK.Utils.Encoding.encode_base64(&lt;&lt;248, 156, 11, 1, 248, 66, 184, 64, 239, 168, 82, 234, 155, 137, 201, 4, 101, 138, 106, 29, 17, 149, 151, 170, 181, 55, 176, 222, 189, 77, 127, 227, 78, 202, 253, 6, 159, 235, 140, 41, 165, 77, 120, 145, 151, 173, 179, 55, 74, 138, 45, 208, 75, 138, 56, 227, 165, 195, 24, 147, 126, 191, 206, 210, 161, 170, 87, 136, 229, 30, 6, 2, 184, 84, 248, 82, 12, 1, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 135, 112, 97, 121, 108, 111, 97, 100, 93, 73, 89, 98&gt;&gt;) &quot;+JwLAfhCuEDvqFLqm4nJBGWKah0RlZeqtTew3r1Nf+NOyv0Gn+uMKaVNeJGXrbM3Soot0EuKOOOlwxiTfr/O0qGqV4jlHgYCuFT4UgwBoQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoKh3BheWxvYWRdSVlidOin1A==&quot;"},{"ref":"AeppSDK.Utils.Encoding.html#prefix_decode_base58c/1","title":"AeppSDK.Utils.Encoding.prefix_decode_base58c/1","type":"function","doc":"Decode a base58check string to binary and remove its prefix Example iex&gt; AeppSDK.Utils.Encoding.prefix_decode_base58c(&quot;ak_2XEob1Ub1DWCzeMLm1CWQKrUBsVfF9zLZBDaUXiu6Lr1qLn55n&quot;) &lt;&lt;200, 90, 234, 160, 66, 120, 244, 87, 88, 94, 87, 208, 13, 42, 126, 71, 172, 2, 81, 252, 214, 24, 155, 227, 26, 49, 210, 31, 106, 147, 200, 81&gt;&gt;"},{"ref":"AeppSDK.Utils.Encoding.html#prefix_decode_base64/1","title":"AeppSDK.Utils.Encoding.prefix_decode_base64/1","type":"function","doc":"Decode a base64 string to binary and remove its prefix Example iex&gt; AeppSDK.Utils.Encoding.prefix_decode_base64(&quot;tx_+JwLAfhCuEDvqFLqm4nJBGWKah0RlZeqtTew3r1Nf+NOyv0Gn+uMKaVNeJGXrbM3Soot0EuKOOOlwxiTfr/O0qGqV4jlHgYCuFT4UgwBoQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoKh3BheWxvYWRdSVlidOin1A==&quot;) &lt;&lt;248, 156, 11, 1, 248, 66, 184, 64, 239, 168, 82, 234, 155, 137, 201, 4, 101, 138, 106, 29, 17, 149, 151, 170, 181, 55, 176, 222, 189, 77, 127, 227, 78, 202, 253, 6, 159, 235, 140, 41, 165, 77, 120, 145, 151, 173, 179, 55, 74, 138, 45, 208, 75, 138, 56, 227, 165, 195, 24, 147, 126, 191, 206, 210, 161, 170, 87, 136, 229, 30, 6, 2, 184, 84, 248, 82, 12, 1, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 135, 112, 97, 121, 108, 111, 97, 100, 93, 73, 89, 98&gt;&gt;"},{"ref":"AeppSDK.Utils.Encoding.html#prefix_encode_base58c/2","title":"AeppSDK.Utils.Encoding.prefix_encode_base58c/2","type":"function","doc":"Encode a binary payload to base58check and add a string prefix Example iex&gt; prefix = &quot;ak&quot; iex&gt; binary = &lt;&lt;200, 90, 234, 160, 66, 120, 244, 87, 88, 94, 87, 208, 13, 42, 126, 71, 172, 2, 81, 252, 214, 24, 155, 227, 26, 49, 210, 31, 106, 147, 200, 81&gt;&gt; iex&gt; AeppSDK.Utils.Encoding.prefix_encode_base58c(prefix, binary) &quot;ak_2XEob1Ub1DWCzeMLm1CWQKrUBsVfF9zLZBDaUXiu6Lr1qLn55n&quot;"},{"ref":"AeppSDK.Utils.Encoding.html#prefix_encode_base64/2","title":"AeppSDK.Utils.Encoding.prefix_encode_base64/2","type":"function","doc":"Encode a binary payload to base64 and add a string prefix Example iex&gt; prefix = &quot;tx&quot; iex&gt; binary = &lt;&lt;248, 156, 11, 1, 248, 66, 184, 64, 239, 168, 82, 234, 155, 137, 201, 4, 101, 138, 106, 29, 17, 149, 151, 170, 181, 55, 176, 222, 189, 77, 127, 227, 78, 202, 253, 6, 159, 235, 140, 41, 165, 77, 120, 145, 151, 173, 179, 55, 74, 138, 45, 208, 75, 138, 56, 227, 165, 195, 24, 147, 126, 191, 206, 210, 161, 170, 87, 136, 229, 30, 6, 2, 184, 84, 248, 82, 12, 1, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 135, 112, 97, 121, 108, 111, 97, 100, 93, 73, 89, 98&gt;&gt; iex&gt; AeppSDK.Utils.Encoding.prefix_encode_base64(prefix, binary) &quot;tx_+JwLAfhCuEDvqFLqm4nJBGWKah0RlZeqtTew3r1Nf+NOyv0Gn+uMKaVNeJGXrbM3Soot0EuKOOOlwxiTfr/O0qGqV4jlHgYCuFT4UgwBoQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoKh3BheWxvYWRdSVlidOin1A==&quot;"},{"ref":"AeppSDK.Utils.Encoding.html#t:base58c/0","title":"AeppSDK.Utils.Encoding.base58c/0","type":"type","doc":"A base58check string."},{"ref":"AeppSDK.Utils.Encoding.html#t:base64/0","title":"AeppSDK.Utils.Encoding.base64/0","type":"type","doc":"A base64 string."},{"ref":"AeppSDK.Utils.Encoding.html#t:hex/0","title":"AeppSDK.Utils.Encoding.hex/0","type":"type","doc":"A hexadecimal string."},{"ref":"AeppSDK.Utils.Hash.html","title":"AeppSDK.Utils.Hash","type":"module","doc":"Contains hash-related functions."},{"ref":"AeppSDK.Utils.Hash.html#hash/1","title":"AeppSDK.Utils.Hash.hash/1","type":"function","doc":"Calculate the BLAKE2b hash of a binary. Example iex&gt; AeppSDK.Utils.Hash.hash(&lt;&lt;0::32&gt;&gt;) {:ok, &lt;&lt;17, 218, 109, 31, 118, 29, 223, 155, 219, 76, 157, 110, 83, 3, 235, 212, 31, 97, 133, 141, 10, 86, 71, 161, 167, 191, 224, 137, 191, 146, 27, 233&gt;&gt;}"},{"ref":"AeppSDK.Utils.Hash.html#t:hash/0","title":"AeppSDK.Utils.Hash.hash/0","type":"type","doc":""},{"ref":"AeppSDK.Utils.Keys.html","title":"AeppSDK.Utils.Keys","type":"module","doc":"Key generation, handling, encoding and crypto."},{"ref":"AeppSDK.Utils.Keys.html#generate_keypair/0","title":"AeppSDK.Utils.Keys.generate_keypair/0","type":"function","doc":"Generate a Curve25519 keypair Example iex&gt; AeppSDK.Utils.Keys.generate_keypair() %{ public: &quot;ak_Q9DozPaq7fZ9WnB8SwNxuniaWwUmp1M7HsFTgCdJSsU2kKtC4&quot;, secret: &quot;227bdeedb4c3dd2b554ea6b448ac6788fbe66df1b4f87093a450bba748f296f5348bd07453735393e2ff8c03c65b4593f3bdd94f957a2e7cb314688b53441280&quot; }"},{"ref":"AeppSDK.Utils.Keys.html#generate_peer_keypair/0","title":"AeppSDK.Utils.Keys.generate_peer_keypair/0","type":"function","doc":"false"},{"ref":"AeppSDK.Utils.Keys.html#get_pubkey_from_secret_key/1","title":"AeppSDK.Utils.Keys.get_pubkey_from_secret_key/1","type":"function","doc":""},{"ref":"AeppSDK.Utils.Keys.html#new_keystore/3","title":"AeppSDK.Utils.Keys.new_keystore/3","type":"function","doc":"Create a new keystore Example iex&gt; secret = &quot;227bdeedb4c3dd2b554ea6b448ac6788fbe66df1b4f87093a450bba748f296f5348bd07453735393e2ff8c03c65b4593f3bdd94f957a2e7cb314688b53441280&quot; iex&gt; AeppSDK.Utils.Keys.new_keystore(secret, &quot;1234&quot;) :ok"},{"ref":"AeppSDK.Utils.Keys.html#public_key_from_binary/1","title":"AeppSDK.Utils.Keys.public_key_from_binary/1","type":"function","doc":"Convert a binary public key to a base58check string Example iex&gt; binary_public_key = &lt;&lt;253, 16, 150, 32, 125, 62, 136, 112, 145, 227, 193, 26, 149, 60, 2, 56, 190, 47, 157, 115, 126, 32, 118, 191, 137, 134, 107, 183, 134, 188, 15, 191&gt;&gt; iex&gt; AeppSDK.Utils.Keys.public_key_from_binary(binary_public_key) &quot;ak_2vTCdFVAvgkYUDiVpydmByybqSYZHEB189QcfjmdcxRef2W2eb&quot;"},{"ref":"AeppSDK.Utils.Keys.html#public_key_to_binary/1","title":"AeppSDK.Utils.Keys.public_key_to_binary/1","type":"function","doc":"Convert a base58check public key string to binary Example iex&gt; public_key = &quot;ak_2vTCdFVAvgkYUDiVpydmByybqSYZHEB189QcfjmdcxRef2W2eb&quot; iex&gt; AeppSDK.Utils.Keys.public_key_to_binary(public_key) &lt;&lt;253, 16, 150, 32, 125, 62, 136, 112, 145, 227, 193, 26, 149, 60, 2, 56, 190, 47, 157, 115, 126, 32, 118, 191, 137, 134, 107, 183, 134, 188, 15, 191&gt;&gt; ```"},{"ref":"AeppSDK.Utils.Keys.html#public_key_to_binary/2","title":"AeppSDK.Utils.Keys.public_key_to_binary/2","type":"function","doc":"Convert a base58check public key string to tuple of prefix and binary Example iex&gt; public_key = &quot;ak_2vTCdFVAvgkYUDiVpydmByybqSYZHEB189QcfjmdcxRef2W2eb&quot; iex&gt; AeppSDK.Utils.Keys.public_key_to_binary(public_key, :with_prefix) {&quot;ak_&quot;, &lt;&lt;253, 16, 150, 32, 125, 62, 136, 112, 145, 227, 193, 26, 149, 60, 2, 56, 190, 47, 157, 115, 126, 32, 118, 191, 137, 134, 107, 183, 134, 188, 15, 191&gt;&gt;} ```"},{"ref":"AeppSDK.Utils.Keys.html#read_keypair/3","title":"AeppSDK.Utils.Keys.read_keypair/3","type":"function","doc":"Attempt to read a keypair from a given path with the specified file name. If found, the keys will be decrypted with the password Example iex&gt; password = &quot;some password&quot; iex&gt; path = &quot;./keys&quot; iex&gt; name = &quot;key&quot; iex&gt; AeppSDK.Utils.Keys.read_keypair(password, path, name) {:ok, %{ public: &quot;ak_2vTCdFVAvgkYUDiVpydmByybqSYZHEB189QcfjmdcxRef2W2eb&quot;, secret: &quot;f9cebe874d90626bfcea1093e72f22e500a92e95052b88aaebd5d30346132cb1fd1096207d3e887091e3c11a953c0238be2f9d737e2076bf89866bb786bc0fbf&quot; }}"},{"ref":"AeppSDK.Utils.Keys.html#read_keystore/2","title":"AeppSDK.Utils.Keys.read_keystore/2","type":"function","doc":"Read the private key from the keystore Example: iex&gt; AeppSDK.Utils.Keys.read_keystore(&quot;2019-10-25-9-48-48&quot;, &quot;1234&quot;) &quot;227bdeedb4c3dd2b554ea6b448ac6788fbe66df1b4f87093a450bba748f296f5348bd07453735393e2ff8c03c65b4593f3bdd94f957a2e7cb314688b53441280&quot;"},{"ref":"AeppSDK.Utils.Keys.html#save_keypair/4","title":"AeppSDK.Utils.Keys.save_keypair/4","type":"function","doc":"Save a keypair at a given path with the specified file name. The keys are encrypted with the password and saved as separate files - name for the private and { name }.pub for the public key Example iex&gt; keypair = AeppSDK.Utils.Keys.generate_keypair() iex&gt; password = &quot;some password&quot; iex&gt; path = &quot;./keys&quot; iex&gt; name = &quot;key&quot; iex&gt; AeppSDK.Utils.Keys.save_keypair(keypair, password, path, name) :ok"},{"ref":"AeppSDK.Utils.Keys.html#secret_key_from_binary/1","title":"AeppSDK.Utils.Keys.secret_key_from_binary/1","type":"function","doc":"Convert a binary private key to a hex string Example iex&gt; binary_secret_key = &lt;&lt;249, 206, 190, 135, 77, 144, 98, 107, 252, 234, 16, 147, 231, 47, 34, 229, 0, 169, 46, 149, 5, 43, 136, 170, 235, 213, 211, 3, 70, 19, 44, 177, 253, 16, 150, 32, 125, 62, 136, 112, 145, 227, 193, 26, 149, 60, 2, 56, 190, 47, 157, 115, 126, 32, 118, 191, 137, 134, 107, 183, 134, 188, 15, 191&gt;&gt; iex&gt; AeppSDK.Utils.Keys.secret_key_from_binary(binary_secret_key) &quot;f9cebe874d90626bfcea1093e72f22e500a92e95052b88aaebd5d30346132cb1fd1096207d3e887091e3c11a953c0238be2f9d737e2076bf89866bb786bc0fbf&quot;"},{"ref":"AeppSDK.Utils.Keys.html#secret_key_to_binary/1","title":"AeppSDK.Utils.Keys.secret_key_to_binary/1","type":"function","doc":"Convert a hex string private key to binary Example iex&gt; secret_key = &quot;f9cebe874d90626bfcea1093e72f22e500a92e95052b88aaebd5d30346132cb1fd1096207d3e887091e3c11a953c0238be2f9d737e2076bf89866bb786bc0fbf&quot; iex&gt; AeppSDK.Utils.Keys.secret_key_to_binary(secret_key) &lt;&lt;249, 206, 190, 135, 77, 144, 98, 107, 252, 234, 16, 147, 231, 47, 34, 229, 0, 169, 46, 149, 5, 43, 136, 170, 235, 213, 211, 3, 70, 19, 44, 177, 253, 16, 150, 32, 125, 62, 136, 112, 145, 227, 193, 26, 149, 60, 2, 56, 190, 47, 157, 115, 126, 32, 118, 191, 137, 134, 107, 183, 134, 188, 15, 191&gt;&gt;"},{"ref":"AeppSDK.Utils.Keys.html#sign/2","title":"AeppSDK.Utils.Keys.sign/2","type":"function","doc":"Sign a binary message with the given private key Example iex&gt; message = &quot;some message&quot; iex&gt; secret_key = &lt;&lt;34, 123, 222, 237, 180, 195, 221, 43, 85, 78, 166, 180, 72, 172, 103, 136,251, 230, 109, 241, 180, 248, 112, 147, 164, 80, 187, 167, 72, 242, 150, 245,52, 139, 208, 116, 83, 115, 83, 147, 226, 255, 140, 3, 198, 91, 69, 147, 243,189, 217, 79, 149, 122, 46, 124, 179, 20, 104, 139, 83, 68, 18, 128&gt;&gt; iex&gt; AeppSDK.Utils.Keys.sign(message, secret_key) &lt;&lt;94, 26, 208, 168, 230, 154, 158, 226, 188, 217, 155, 170, 157, 33, 100, 22, 247, 171, 91, 120, 249, 52, 147, 194, 188, 1, 14, 5, 15, 166, 232, 202, 97, 96, 32, 32, 227, 151, 158, 216, 22, 68, 219, 5, 169, 229, 117, 147, 179, 43, 172, 211, 243, 171, 234, 254, 210, 119, 105, 248, 154, 19, 202, 7&gt;&gt;"},{"ref":"AeppSDK.Utils.Keys.html#sign/3","title":"AeppSDK.Utils.Keys.sign/3","type":"function","doc":"Prefixes a network ID string to a binary message and signs it with the given private key Example iex&gt; message = &quot;some message&quot; iex&gt; secret_key = &lt;&lt;34, 123, 222, 237, 180, 195, 221, 43, 85, 78, 166, 180, 72, 172, 103, 136,251, 230, 109, 241, 180, 248, 112, 147, 164, 80, 187, 167, 72, 242, 150, 245,52, 139, 208, 116, 83, 115, 83, 147, 226, 255, 140, 3, 198, 91, 69, 147, 243,189, 217, 79, 149, 122, 46, 124, 179, 20, 104, 139, 83, 68, 18, 128&gt;&gt; iex&gt; AeppSDK.Utils.Keys.sign(message, secret_key, &quot;ae_uat&quot;) &lt;&lt;15, 246, 136, 55, 63, 30, 144, 154, 249, 161, 243, 93, 52, 0, 218, 22, 43, 200, 145, 252, 247, 218, 197, 125, 177, 17, 60, 177, 212, 106, 249, 130, 42, 179, 233, 174, 116, 145, 154, 244, 80, 48, 142, 153, 170, 34, 199, 219, 248, 107, 115, 155, 254, 69, 37, 68, 68, 1, 174, 95, 102, 10, 6, 14&gt;&gt;"},{"ref":"AeppSDK.Utils.Keys.html#verify/3","title":"AeppSDK.Utils.Keys.verify/3","type":"function","doc":"Verify that a message has been signed by a private key corresponding to the given public key Example iex&gt; signature = &lt;&lt;94, 26, 208, 168, 230, 154, 158, 226, 188, 217, 155, 170, 157, 33, 100, 22, 247, 171, 91, 120, 249, 52, 147, 194, 188, 1, 14, 5, 15, 166, 232, 202, 97, 96, 32, 32, 227, 151, 158, 216, 22, 68, 219, 5, 169, 229, 117, 147, 179, 43, 172, 211, 243, 171, 234, 254, 210, 119, 105, 248, 154, 19, 202, 7&gt;&gt; iex&gt; message = &quot;some message&quot; iex&gt; public_key = &lt;&lt;52, 139, 208, 116, 83, 115, 83, 147, 226, 255, 140, 3, 198, 91, 69, 147, 243, 189, 217, 79, 149, 122, 46, 124, 179, 20, 104, 139, 83, 68, 18, 128&gt;&gt; iex&gt; AeppSDK.Utils.Keys.verify(signature, message, public_key) {:ok, &quot;some message&quot;}"},{"ref":"AeppSDK.Utils.Keys.html#t:keypair/0","title":"AeppSDK.Utils.Keys.keypair/0","type":"type","doc":""},{"ref":"AeppSDK.Utils.Keys.html#t:message/0","title":"AeppSDK.Utils.Keys.message/0","type":"type","doc":"An arbitrary binary message."},{"ref":"AeppSDK.Utils.Keys.html#t:password/0","title":"AeppSDK.Utils.Keys.password/0","type":"type","doc":"An arbitrary string password."},{"ref":"AeppSDK.Utils.Keys.html#t:public_key/0","title":"AeppSDK.Utils.Keys.public_key/0","type":"type","doc":"A base58c encoded public key."},{"ref":"AeppSDK.Utils.Keys.html#t:secret_key/0","title":"AeppSDK.Utils.Keys.secret_key/0","type":"type","doc":"A hex encoded private key."},{"ref":"AeppSDK.Utils.Keys.html#t:signature/0","title":"AeppSDK.Utils.Keys.signature/0","type":"type","doc":""},{"ref":"AeppSDK.Utils.Serialization.html","title":"AeppSDK.Utils.Serialization","type":"module","doc":"Transaction serialization."},{"ref":"AeppSDK.Utils.Serialization.html#deserialize/2","title":"AeppSDK.Utils.Serialization.deserialize/2","type":"function","doc":"Deserialize an RLP binary payload with the template corresponding to the given type Example iex&gt; payload = &lt;&lt;248, 224, 43, 1, 161, 1, 11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97, 130, 33, 131, 161, 5, 64, 216, 143, 81, 41, 52, 245, 89, 135, 253, 7, 12, 94, 142, 96, 251, 212, 96, 76, 248, 1, 152, 97, 16, 144, 62, 43, 186, 148, 174, 76, 114, 1, 136, 27, 193, 109, 103, 78, 200, 0, 0, 0, 0, 131, 15, 66, 64, 132, 59, 154, 202, 0, 184, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 112, 194, 27, 63, 171, 248, 210, 119, 144, 238, 34, 30, 100, 222, 2, 111, 12, 11, 11, 82, 86, 82, 53, 206, 145, 155, 60, 13, 206, 214, 183, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33&gt;&gt; iex&gt; type = :contract_call_tx iex&gt; AeppSDK.Utils.Serialization.deserialize(payload, type) [ caller_id: {:id, :account, &lt;&lt;11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97&gt;&gt;}, nonce: 8579, contract_id: {:id, :contract, &lt;&lt;64, 216, 143, 81, 41, 52, 245, 89, 135, 253, 7, 12, 94, 142, 96, 251, 212, 96, 76, 248, 1, 152, 97, 16, 144, 62, 43, 186, 148, 174, 76, 114&gt;&gt;}, abi_version: 1, fee: 2000000000000000000, ttl: 0, amount: 0, gas: 1000000, gas_price: 1000000000, call_data: &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 112, 194, 27, 63, 171, 248, 210, 119, 144, 238, 34, 30, 100, 222, 2, 111, 12, 11, 11, 82, 86, 82, 53, 206, 145, 155, 60, 13, 206, 214, 183, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33&gt;&gt; ]"},{"ref":"AeppSDK.Utils.Serialization.html#id_to_record/2","title":"AeppSDK.Utils.Serialization.id_to_record/2","type":"function","doc":""},{"ref":"AeppSDK.Utils.Serialization.html#serialize/1","title":"AeppSDK.Utils.Serialization.serialize/1","type":"function","doc":"Serializes a transaction to a binary. Example iex&gt; alias AeternityNode.Model.{Ttl,OracleRegisterTx} iex&gt; AeppSDK.Utils.Serialization.serialize( %OracleRegisterTx{ query_format: &lt;&lt;&quot;query_format&quot;&gt;&gt;, response_format: &lt;&lt;&quot;response_format&quot;&gt;&gt;, query_fee: 10, oracle_ttl: %Ttl{type: :absolute, value: 10}, account_id: &quot;ak_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, nonce: 37122, fee: 0, ttl: 10, abi_version: 0x30001 }) &lt;&lt;248, 77, 22, 1, 161, 1, 9, 51, 126, 98, 138, 255, 218, 224, 184, 180, 31, 234, 251, 255, 59, 141, 224, 214, 250, 79, 248, 30, 246, 237, 55, 83, 153, 134, 240, 138, 216, 129, 130, 145, 2, 140, 113, 117, 101, 114, 121, 95, 102, 111, ...&gt;&gt;"},{"ref":"AeppSDK.Utils.Serialization.html#serialize/2","title":"AeppSDK.Utils.Serialization.serialize/2","type":"function","doc":"Serializes a list of fields with the template corresponding to the given type Example iex&gt; fields = [{:id, :account, &lt;&lt;11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97&gt;&gt;}, 8579, {:id, :contract, &lt;&lt;64, 216, 143, 81, 41, 52, 245, 89, 135, 253, 7, 12, 94, 142, 96, 251, 212, 96, 76, 248, 1, 152, 97, 16, 144, 62, 43, 186, 148, 174, 76, 114&gt;&gt;}, 1, 2_000_000_000_000_000_000, 0, 0, 1_000_000, 1_000_000_000, &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 112, 194, 27, 63, 171, 248, 210, 119, 144, 238, 34, 30, 100, 222, 2, 111, 12, 11, 11, 82, 86, 82, 53, 206, 145, 155, 60, 13, 206, 214, 183, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33&gt;&gt;] iex&gt; type = :contract_call_tx iex&gt; AeppSDK.Utils.Serialization.serialize(fields, type) &lt;&lt;248, 224, 43, 1, 161, 1, 11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97, 130, 33, 131, 161, 5, 64, 216, 143, 81, 41, 52, 245, 89, 135, 253, 7, 12, 94, 142, 96, 251, 212, 96, 76, 248, 1, 152, 97, 16, 144, 62, 43, 186, 148, 174, 76, 114, 1, 136, 27, 193, 109, 103, 78, 200, 0, 0, 0, 0, 131, 15, 66, 64, 132, 59, 154, 202, 0, 184, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 112, 194, 27, 63, 171, 248, 210, 119, 144, 238, 34, 30, 100, 222, 2, 111, 12, 11, 11, 82, 86, 82, 53, 206, 145, 155, 60, 13, 206, 214, 183, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33&gt;&gt;"},{"ref":"AeppSDK.Utils.Serialization.html#serialize_for_client/2","title":"AeppSDK.Utils.Serialization.serialize_for_client/2","type":"function","doc":""},{"ref":"AeppSDK.Utils.Serialization.html#serialize_poi/1","title":"AeppSDK.Utils.Serialization.serialize_poi/1","type":"function","doc":"Serializes a Proof-of-Inclusion to a binary. Example iex&gt; poi = [ accounts: {&lt;&lt;148, 112, 174, 4, 233, 253, 29, 65, 31, 17, 40, 153, 167, 18, 37, 179, 35, 141, 97, 95, 132, 162, 158, 78, 103, 11, 230, 39, 208, 27, 176,111&gt;&gt;, %{cache: {0, nil}}} ] iex&gt; AeppSDK.Utils.Serialization.serialize_poi poi &lt;&lt;235, 60, 1, 227, 226, 160, 148, 112, 174, 4, 233, 253, 29, 65, 31, 17, 40, 153, 167, 18, 37, 179, 35, 141, 97, 95, 132, 162, 158, 78, 103, 11, 230, 39, 208, 27, 176, 111, 192, 192, 192, 192, 192, 192&gt;&gt;"},{"ref":"AeppSDK.Utils.Serialization.html#t:id/0","title":"AeppSDK.Utils.Serialization.id/0","type":"type","doc":""},{"ref":"AeppSDK.Utils.Serialization.html#t:id_type/0","title":"AeppSDK.Utils.Serialization.id_type/0","type":"type","doc":""},{"ref":"AeppSDK.Utils.Serialization.html#t:poi_keyword/0","title":"AeppSDK.Utils.Serialization.poi_keyword/0","type":"type","doc":""},{"ref":"AeppSDK.Utils.Serialization.html#t:rlp_binary/0","title":"AeppSDK.Utils.Serialization.rlp_binary/0","type":"type","doc":""},{"ref":"AeppSDK.Utils.Serialization.html#t:state_hash/0","title":"AeppSDK.Utils.Serialization.state_hash/0","type":"type","doc":""},{"ref":"AeppSDK.Utils.Serialization.html#t:structure_type/0","title":"AeppSDK.Utils.Serialization.structure_type/0","type":"type","doc":""},{"ref":"AeppSDK.Utils.Serialization.html#t:tx_type/0","title":"AeppSDK.Utils.Serialization.tx_type/0","type":"type","doc":""},{"ref":"AeppSDK.Utils.Transaction.html","title":"AeppSDK.Utils.Transaction","type":"module","doc":"Transaction AeppSDK.Utils. In order for its functions to be used, a client must be defined first. Client example can be found at: AeppSDK.Client.new/4."},{"ref":"AeppSDK.Utils.Transaction.html#calculate_fee/5","title":"AeppSDK.Utils.Transaction.calculate_fee/5","type":"function","doc":"Calculate the fee of the transaction. Example iex&gt; spend_tx = %AeternityNode.Model.SpendTx{ amount: 40_000_000, fee: 0, nonce: 10_624, payload: &quot;&quot;, recipient_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, sender_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, ttl: 0 } iex&gt; AeppSDK.Utils.Transaction.calculate_fee(spend_tx, 51_900, &quot;ae_uat&quot;, 0, 1_000_000) 16660000000"},{"ref":"AeppSDK.Utils.Transaction.html#calculate_min_fee/3","title":"AeppSDK.Utils.Transaction.calculate_min_fee/3","type":"function","doc":"Calculates minimum fee of given transaction, depends on height and network_id Example iex&gt; name_pre_claim_tx = %AeternityNode.Model.NamePreclaimTx{ account_id: &quot;ak_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, commitment_id: &quot;cm_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, fee: 0, nonce: 0, ttl: 0 } iex&gt; AeppSDK.Utils.Transaction.calculate_min_fee(name_pre_claim_tx, 50_000, &quot;ae_mainnet&quot;) 16500000000"},{"ref":"AeppSDK.Utils.Transaction.html#calculate_n_times_fee/6","title":"AeppSDK.Utils.Transaction.calculate_n_times_fee/6","type":"function","doc":"Calculates fee for given transaction n times. Example iex&gt; spend_tx = %AeternityNode.Model.SpendTx{ amount: 1_000_000_000_000, fee: 0, nonce: 1, payload: &quot;&quot;, recipient_id: &quot;ak_wuLXPE5pd2rvFoxHxvenBgp459rW6Y1cZ6cYTZcAcLAevPE5M&quot;, sender_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, ttl: 0 } iex&gt; AeppSDK.Utils.Transaction.calculate_n_times_fee(spend_tx, 58_336, &quot;ae_uat&quot;, 0, 1_000_000, 5) 16740000000"},{"ref":"AeppSDK.Utils.Transaction.html#default_await_attempt_interval/0","title":"AeppSDK.Utils.Transaction.default_await_attempt_interval/0","type":"function","doc":""},{"ref":"AeppSDK.Utils.Transaction.html#default_await_attempts/0","title":"AeppSDK.Utils.Transaction.default_await_attempts/0","type":"function","doc":""},{"ref":"AeppSDK.Utils.Transaction.html#default_fee_calculation_times/0","title":"AeppSDK.Utils.Transaction.default_fee_calculation_times/0","type":"function","doc":""},{"ref":"AeppSDK.Utils.Transaction.html#default_payload/0","title":"AeppSDK.Utils.Transaction.default_payload/0","type":"function","doc":""},{"ref":"AeppSDK.Utils.Transaction.html#default_ttl/0","title":"AeppSDK.Utils.Transaction.default_ttl/0","type":"function","doc":""},{"ref":"AeppSDK.Utils.Transaction.html#dummy_fee/0","title":"AeppSDK.Utils.Transaction.dummy_fee/0","type":"function","doc":""},{"ref":"AeppSDK.Utils.Transaction.html#gas_limit/2","title":"AeppSDK.Utils.Transaction.gas_limit/2","type":"function","doc":"Returns gas limit for given transaction, depends on height. Example iex&gt; oracle_register_tx = %AeternityNode.Model.OracleRegisterTx{ abi_version: 0x60001, account_id: &quot;ak_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, fee: 0, nonce: 37_122, oracle_ttl: %AeternityNode.Model.Ttl{type: :absolute, value: 10}, query_fee: 10, query_format: &quot;query_format&quot;, response_format: &quot;response_format&quot;, ttl: 10 } iex&gt; AeppSDK.Utils.Transaction.gas_limit(oracle_register_tx, 5) 16581"},{"ref":"AeppSDK.Utils.Transaction.html#min_gas/2","title":"AeppSDK.Utils.Transaction.min_gas/2","type":"function","doc":"Calculates minimum gas needed for given transaction, also depends on height. Example iex&gt; spend_tx = %AeternityNode.Model.SpendTx{ amount: 5_018_857_520_000_000_000, fee: 0, nonce: 37181, payload: &quot;&quot;, recipient_id: &quot;ak_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, sender_id: &quot;ak_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, ttl: 0 } iex&gt; AeppSDK.Utils.Transaction.min_gas(spend_tx, 50_000) 16740"},{"ref":"AeppSDK.Utils.Transaction.html#post/4","title":"AeppSDK.Utils.Transaction.post/4","type":"function","doc":"Serialize the list of fields to RLP transaction binary, sign it with the private key and network ID, add calculated minimum fee and post it to the node. Example iex&gt; spend_tx = %AeternityNode.Model.SpendTx{ amount: 10_000, fee: 16_680_000_000, nonce: 1, payload: &quot;&quot;, recipient_id: &quot;ak_wuLXPE5pd2rvFoxHxvenBgp459rW6Y1cZ6cYTZcAcLAevPE5M&quot;, sender_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, ttl: 0 } iex&gt; AeppSDK.Utils.Transaction.post(client, spend_tx, :no_auth, :one_signature) {:ok, %{ block_hash: &quot;mh_2wRRkfzcHd24cGbqdqaLAhxgpv4iMB8y1Cp5n9FAfhvDZJ7Qh&quot;, block_height: 149, tx_hash: &quot;th_umEMGk2S1EtkeAZCVHXDoTqQMdMawK9R9j1yvDZWjvKmstg5c&quot; }}"},{"ref":"AeppSDK.Utils.Transaction.html#sign_tx/3","title":"AeppSDK.Utils.Transaction.sign_tx/3","type":"function","doc":"Signs the transaction. Example iex&gt; spend_tx = %AeternityNode.Model.SpendTx{ amount: 1_000_000_000_000, fee: 0, nonce: 1, payload: &quot;&quot;, recipient_id: &quot;ak_wuLXPE5pd2rvFoxHxvenBgp459rW6Y1cZ6cYTZcAcLAevPE5M&quot;, sender_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, ttl: 0 } iex&gt; AeppSDK.Utils.Transaction.sign_tx(spend_tx, client) {:ok, [ %AeternityNode.Model.SpendTx{ amount: 1000000000000, fee: 0, nonce: 1, payload: &quot;&quot;, recipient_id: &quot;ak_wuLXPE5pd2rvFoxHxvenBgp459rW6Y1cZ6cYTZcAcLAevPE5M&quot;, sender_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, ttl: 0 }, &lt;168, 173, 62, 192, 198, 163, 29, 224, 83, 235, 68, 152, 82, 151, 77, 68, 228, 138, 200, 45, 15, 74, 125, 222, 45, 150, 114, 79, 84, 160, 83, 255, 63, 165, 45, 146, 164, 168, 144, 116, 200, 253, 80, 119, 6, 147, ...&gt;&gt; ]}"},{"ref":"AeppSDK.Utils.Transaction.html#t:tx_types/0","title":"AeppSDK.Utils.Transaction.tx_types/0","type":"type","doc":""}]