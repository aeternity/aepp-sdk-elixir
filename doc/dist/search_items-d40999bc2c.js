searchNodes=[{"ref":"AeternityNode.Api.Account.html","title":"AeternityNode.Api.Account","type":"module","doc":"API calls for all endpoints tagged Account."},{"ref":"AeternityNode.Api.Account.html#get_account_by_pubkey/3","title":"AeternityNode.Api.Account.get_account_by_pubkey/3","type":"function","doc":"Get an account by public key Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the account opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Account{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Account.html#get_account_by_pubkey_and_hash/4","title":"AeternityNode.Api.Account.get_account_by_pubkey_and_hash/4","type":"function","doc":"Get an account by public key after the block indicated by hash Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the account hash (String.t): The hash of the block opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Account{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Account.html#get_account_by_pubkey_and_height/4","title":"AeternityNode.Api.Account.get_account_by_pubkey_and_height/4","type":"function","doc":"Get an account by public key after the opening key block of the generation at height Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the account height (integer()): The height opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Account{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Account.html#get_pending_account_transactions_by_pubkey/3","title":"AeternityNode.Api.Account.get_pending_account_transactions_by_pubkey/3","type":"function","doc":"Get pending account transactions by public key Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the account opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.GenericTxs{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html","title":"AeternityNode.Api.Chain","type":"module","doc":"API calls for all endpoints tagged Chain."},{"ref":"AeternityNode.Api.Chain.html#get_current_generation/2","title":"AeternityNode.Api.Chain.get_current_generation/2","type":"function","doc":"Get the current generation Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Generation{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_current_key_block/2","title":"AeternityNode.Api.Chain.get_current_key_block/2","type":"function","doc":"Get the current key block Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.KeyBlock{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_current_key_block_hash/2","title":"AeternityNode.Api.Chain.get_current_key_block_hash/2","type":"function","doc":"Get the hash of the current key block Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.InlineResponse200{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_current_key_block_height/2","title":"AeternityNode.Api.Chain.get_current_key_block_height/2","type":"function","doc":"Get the height of the current key block Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.InlineResponse2001{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_generation_by_hash/3","title":"AeternityNode.Api.Chain.get_generation_by_hash/3","type":"function","doc":"Get a generation by hash Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the generation opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Generation{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_generation_by_height/3","title":"AeternityNode.Api.Chain.get_generation_by_height/3","type":"function","doc":"Get a generation by height Parameters connection (AeternityNode.Connection): Connection to server height (integer()): The height opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Generation{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_key_block_by_hash/3","title":"AeternityNode.Api.Chain.get_key_block_by_hash/3","type":"function","doc":"Get a key block by hash Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the block opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.KeyBlock{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_key_block_by_height/3","title":"AeternityNode.Api.Chain.get_key_block_by_height/3","type":"function","doc":"Get a key block by height Parameters connection (AeternityNode.Connection): Connection to server height (integer()): The height opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.KeyBlock{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_micro_block_header_by_hash/3","title":"AeternityNode.Api.Chain.get_micro_block_header_by_hash/3","type":"function","doc":"Get a micro block header by hash Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the block opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.MicroBlockHeader{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_micro_block_transaction_by_hash_and_index/4","title":"AeternityNode.Api.Chain.get_micro_block_transaction_by_hash_and_index/4","type":"function","doc":"Get a micro block transaction by hash and index Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the block index (integer()): The index of the transaction in a block opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.GenericSignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_micro_block_transactions_by_hash/3","title":"AeternityNode.Api.Chain.get_micro_block_transactions_by_hash/3","type":"function","doc":"Get micro block transactions by hash Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the block opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.GenericTxs{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_micro_block_transactions_count_by_hash/3","title":"AeternityNode.Api.Chain.get_micro_block_transactions_count_by_hash/3","type":"function","doc":"Get micro block transaction count by hash Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the block opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.InlineResponse2002{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_pending_key_block/2","title":"AeternityNode.Api.Chain.get_pending_key_block/2","type":"function","doc":"Get the pending key block Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.KeyBlock{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#get_top_block/2","title":"AeternityNode.Api.Chain.get_top_block/2","type":"function","doc":"Get the top block (either key or micro block) Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.KeyBlockOrMicroBlockHeader{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Chain.html#post_key_block/3","title":"AeternityNode.Api.Chain.post_key_block/3","type":"function","doc":"Post a mined key block Parameters connection (AeternityNode.Connection): Connection to server body (KeyBlock): Mined key block opts (KeywordList): [optional] Optional parameters Returns {:ok, %{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Channel.html","title":"AeternityNode.Api.Channel","type":"module","doc":"API calls for all endpoints tagged Channel."},{"ref":"AeternityNode.Api.Channel.html#get_channel_by_pubkey/3","title":"AeternityNode.Api.Channel.get_channel_by_pubkey/3","type":"function","doc":"Get channel by public key Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The pubkey of the channel opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Channel{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Channel.html#post_channel_close_mutual/3","title":"AeternityNode.Api.Channel.post_channel_close_mutual/3","type":"function","doc":"Get a channel_close_mutual transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelCloseMutualTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Channel.html#post_channel_close_solo/3","title":"AeternityNode.Api.Channel.post_channel_close_solo/3","type":"function","doc":"Get a channel_close_solo transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelCloseSoloTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Channel.html#post_channel_create/3","title":"AeternityNode.Api.Channel.post_channel_create/3","type":"function","doc":"Get a channel_create transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelCreateTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Channel.html#post_channel_deposit/3","title":"AeternityNode.Api.Channel.post_channel_deposit/3","type":"function","doc":"Get a channel_deposit transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelDepositTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Channel.html#post_channel_settle/3","title":"AeternityNode.Api.Channel.post_channel_settle/3","type":"function","doc":"Get a channel_settle transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelSettleTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Channel.html#post_channel_slash/3","title":"AeternityNode.Api.Channel.post_channel_slash/3","type":"function","doc":"Get a channel_slash transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelSlashTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Channel.html#post_channel_snapshot_solo/3","title":"AeternityNode.Api.Channel.post_channel_snapshot_solo/3","type":"function","doc":"Get a channel_snapshot_solo transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelSnapshotSoloTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Channel.html#post_channel_withdraw/3","title":"AeternityNode.Api.Channel.post_channel_withdraw/3","type":"function","doc":"Get a channel_withdrawal transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelWithdrawTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Contract.html","title":"AeternityNode.Api.Contract","type":"module","doc":"API calls for all endpoints tagged Contract."},{"ref":"AeternityNode.Api.Contract.html#get_contract/3","title":"AeternityNode.Api.Contract.get_contract/3","type":"function","doc":"Get a contract by pubkey Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The pubkey of the contract opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.ContractObject{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Contract.html#get_contract_code/3","title":"AeternityNode.Api.Contract.get_contract_code/3","type":"function","doc":"Get contract code by pubkey Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The pubkey of the contract opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.ByteCode{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Contract.html#get_contract_po_i/3","title":"AeternityNode.Api.Contract.get_contract_po_i/3","type":"function","doc":"Get a proof of inclusion for a contract Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): Contract pubkey to get proof for opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.PoI{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Contract.html#get_contract_store/3","title":"AeternityNode.Api.Contract.get_contract_store/3","type":"function","doc":"Get contract store by pubkey Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The pubkey of the contract opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.ContractStore{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Contract.html#post_contract_call/3","title":"AeternityNode.Api.Contract.post_contract_call/3","type":"function","doc":"Get a contract_call transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ContractCallTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Contract.html#post_contract_create/3","title":"AeternityNode.Api.Contract.post_contract_create/3","type":"function","doc":"Get a contract_create transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ContractCreateTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.CreateContractUnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html","title":"AeternityNode.Api.Debug","type":"module","doc":"API calls for all endpoints tagged Debug."},{"ref":"AeternityNode.Api.Debug.html#dry_run_txs/3","title":"AeternityNode.Api.Debug.dry_run_txs/3","type":"function","doc":"Dry-run transactions on top of a given block. Supports SpendTx, ContractCreateTx and ContractCallTx Parameters connection (AeternityNode.Connection): Connection to server body (DryRunInput): transactions opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.DryRunResults{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#get_commitment_id/4","title":"AeternityNode.Api.Debug.get_commitment_id/4","type":"function","doc":"Compute commitment ID for a given salt and name Parameters connection (AeternityNode.Connection): Connection to server name (String.t): Name salt (integer()): Salt opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.CommitmentId{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#get_node_beneficiary/2","title":"AeternityNode.Api.Debug.get_node_beneficiary/2","type":"function","doc":"Get node&#39;s beneficiary public key Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.PubKey{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#get_node_pubkey/2","title":"AeternityNode.Api.Debug.get_node_pubkey/2","type":"function","doc":"Get node&#39;s public key Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.PubKey{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#get_peers/2","title":"AeternityNode.Api.Debug.get_peers/2","type":"function","doc":"Get node Peers Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Peers{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#get_pending_transactions/2","title":"AeternityNode.Api.Debug.get_pending_transactions/2","type":"function","doc":"Get pending transactions Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.GenericTxs{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#get_token_supply_by_height/3","title":"AeternityNode.Api.Debug.get_token_supply_by_height/3","type":"function","doc":"Get total token supply at height Parameters connection (AeternityNode.Connection): Connection to server height (integer()): The height opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.TokenSupply{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_channel_close_mutual/3","title":"AeternityNode.Api.Debug.post_channel_close_mutual/3","type":"function","doc":"Get a channel_close_mutual transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelCloseMutualTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_channel_close_solo/3","title":"AeternityNode.Api.Debug.post_channel_close_solo/3","type":"function","doc":"Get a channel_close_solo transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelCloseSoloTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_channel_create/3","title":"AeternityNode.Api.Debug.post_channel_create/3","type":"function","doc":"Get a channel_create transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelCreateTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_channel_deposit/3","title":"AeternityNode.Api.Debug.post_channel_deposit/3","type":"function","doc":"Get a channel_deposit transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelDepositTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_channel_settle/3","title":"AeternityNode.Api.Debug.post_channel_settle/3","type":"function","doc":"Get a channel_settle transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelSettleTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_channel_slash/3","title":"AeternityNode.Api.Debug.post_channel_slash/3","type":"function","doc":"Get a channel_slash transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelSlashTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_channel_snapshot_solo/3","title":"AeternityNode.Api.Debug.post_channel_snapshot_solo/3","type":"function","doc":"Get a channel_snapshot_solo transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelSnapshotSoloTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_channel_withdraw/3","title":"AeternityNode.Api.Debug.post_channel_withdraw/3","type":"function","doc":"Get a channel_withdrawal transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelWithdrawTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_contract_call/3","title":"AeternityNode.Api.Debug.post_contract_call/3","type":"function","doc":"Get a contract_call transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ContractCallTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_contract_create/3","title":"AeternityNode.Api.Debug.post_contract_create/3","type":"function","doc":"Get a contract_create transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ContractCreateTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.CreateContractUnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_name_claim/3","title":"AeternityNode.Api.Debug.post_name_claim/3","type":"function","doc":"Get a name_claim transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NameClaimTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_name_preclaim/3","title":"AeternityNode.Api.Debug.post_name_preclaim/3","type":"function","doc":"Get a name_preclaim transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NamePreclaimTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_name_revoke/3","title":"AeternityNode.Api.Debug.post_name_revoke/3","type":"function","doc":"Get a name_revoke transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NameRevokeTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_name_transfer/3","title":"AeternityNode.Api.Debug.post_name_transfer/3","type":"function","doc":"Get a name_transfer transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NameTransferTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_name_update/3","title":"AeternityNode.Api.Debug.post_name_update/3","type":"function","doc":"Get a name_update transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NameUpdateTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_oracle_extend/3","title":"AeternityNode.Api.Debug.post_oracle_extend/3","type":"function","doc":"Get an oracle_extend transaction object Parameters connection (AeternityNode.Connection): Connection to server body (OracleExtendTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_oracle_query/3","title":"AeternityNode.Api.Debug.post_oracle_query/3","type":"function","doc":"Get an oracle_query transaction object Parameters connection (AeternityNode.Connection): Connection to server body (OracleQueryTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_oracle_register/3","title":"AeternityNode.Api.Debug.post_oracle_register/3","type":"function","doc":"Get a oracle_register transaction object Parameters connection (AeternityNode.Connection): Connection to server body (OracleRegisterTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_oracle_respond/3","title":"AeternityNode.Api.Debug.post_oracle_respond/3","type":"function","doc":"Get an oracle_response transaction object Parameters connection (AeternityNode.Connection): Connection to server body (OracleRespondTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Debug.html#post_spend/3","title":"AeternityNode.Api.Debug.post_spend/3","type":"function","doc":"Get a spend transaction object Parameters connection (AeternityNode.Connection): Connection to server body (SpendTx): A spend transaction opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html","title":"AeternityNode.Api.External","type":"module","doc":"API calls for all endpoints tagged External."},{"ref":"AeternityNode.Api.External.html#get_account_by_pubkey/3","title":"AeternityNode.Api.External.get_account_by_pubkey/3","type":"function","doc":"Get an account by public key Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the account opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Account{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_account_by_pubkey_and_hash/4","title":"AeternityNode.Api.External.get_account_by_pubkey_and_hash/4","type":"function","doc":"Get an account by public key after the block indicated by hash Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the account hash (String.t): The hash of the block opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Account{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_account_by_pubkey_and_height/4","title":"AeternityNode.Api.External.get_account_by_pubkey_and_height/4","type":"function","doc":"Get an account by public key after the opening key block of the generation at height Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the account height (integer()): The height opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Account{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_channel_by_pubkey/3","title":"AeternityNode.Api.External.get_channel_by_pubkey/3","type":"function","doc":"Get channel by public key Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The pubkey of the channel opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Channel{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_contract/3","title":"AeternityNode.Api.External.get_contract/3","type":"function","doc":"Get a contract by pubkey Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The pubkey of the contract opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.ContractObject{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_contract_code/3","title":"AeternityNode.Api.External.get_contract_code/3","type":"function","doc":"Get contract code by pubkey Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The pubkey of the contract opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.ByteCode{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_contract_po_i/3","title":"AeternityNode.Api.External.get_contract_po_i/3","type":"function","doc":"Get a proof of inclusion for a contract Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): Contract pubkey to get proof for opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.PoI{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_contract_store/3","title":"AeternityNode.Api.External.get_contract_store/3","type":"function","doc":"Get contract store by pubkey Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The pubkey of the contract opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.ContractStore{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_current_generation/2","title":"AeternityNode.Api.External.get_current_generation/2","type":"function","doc":"Get the current generation Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Generation{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_current_key_block/2","title":"AeternityNode.Api.External.get_current_key_block/2","type":"function","doc":"Get the current key block Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.KeyBlock{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_current_key_block_hash/2","title":"AeternityNode.Api.External.get_current_key_block_hash/2","type":"function","doc":"Get the hash of the current key block Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.InlineResponse200{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_current_key_block_height/2","title":"AeternityNode.Api.External.get_current_key_block_height/2","type":"function","doc":"Get the height of the current key block Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.InlineResponse2001{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_generation_by_hash/3","title":"AeternityNode.Api.External.get_generation_by_hash/3","type":"function","doc":"Get a generation by hash Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the generation opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Generation{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_generation_by_height/3","title":"AeternityNode.Api.External.get_generation_by_height/3","type":"function","doc":"Get a generation by height Parameters connection (AeternityNode.Connection): Connection to server height (integer()): The height opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Generation{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_key_block_by_hash/3","title":"AeternityNode.Api.External.get_key_block_by_hash/3","type":"function","doc":"Get a key block by hash Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the block opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.KeyBlock{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_key_block_by_height/3","title":"AeternityNode.Api.External.get_key_block_by_height/3","type":"function","doc":"Get a key block by height Parameters connection (AeternityNode.Connection): Connection to server height (integer()): The height opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.KeyBlock{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_micro_block_header_by_hash/3","title":"AeternityNode.Api.External.get_micro_block_header_by_hash/3","type":"function","doc":"Get a micro block header by hash Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the block opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.MicroBlockHeader{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_micro_block_transaction_by_hash_and_index/4","title":"AeternityNode.Api.External.get_micro_block_transaction_by_hash_and_index/4","type":"function","doc":"Get a micro block transaction by hash and index Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the block index (integer()): The index of the transaction in a block opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.GenericSignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_micro_block_transactions_by_hash/3","title":"AeternityNode.Api.External.get_micro_block_transactions_by_hash/3","type":"function","doc":"Get micro block transactions by hash Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the block opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.GenericTxs{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_micro_block_transactions_count_by_hash/3","title":"AeternityNode.Api.External.get_micro_block_transactions_count_by_hash/3","type":"function","doc":"Get micro block transaction count by hash Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the block opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.InlineResponse2002{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_name_entry_by_name/3","title":"AeternityNode.Api.External.get_name_entry_by_name/3","type":"function","doc":"Get name entry from naming system Parameters connection (AeternityNode.Connection): Connection to server name (String.t): The name key of the name entry opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.NameEntry{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_oracle_by_pubkey/3","title":"AeternityNode.Api.External.get_oracle_by_pubkey/3","type":"function","doc":"Get an oracle by public key Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the oracle opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.RegisteredOracle{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_oracle_queries_by_pubkey/3","title":"AeternityNode.Api.External.get_oracle_queries_by_pubkey/3","type":"function","doc":"Get oracle queries by public key Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the oracle opts (KeywordList): [optional] Optional parameters :from (String.t): Last query id in previous page :limit (integer()): Max number of oracle queries :type (String.t): The type of a query: open, closed or all Returns {:ok, %AeternityNode.Model.OracleQueries{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_oracle_query_by_pubkey_and_query_id/4","title":"AeternityNode.Api.External.get_oracle_query_by_pubkey_and_query_id/4","type":"function","doc":"Get an oracle query by public key and query ID Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the oracle query_id (String.t): The ID of the query opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.OracleQuery{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_peer_pubkey/2","title":"AeternityNode.Api.External.get_peer_pubkey/2","type":"function","doc":"Get peer public key Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.PeerPubKey{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_pending_account_transactions_by_pubkey/3","title":"AeternityNode.Api.External.get_pending_account_transactions_by_pubkey/3","type":"function","doc":"Get pending account transactions by public key Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the account opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.GenericTxs{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_pending_key_block/2","title":"AeternityNode.Api.External.get_pending_key_block/2","type":"function","doc":"Get the pending key block Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.KeyBlock{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_status/2","title":"AeternityNode.Api.External.get_status/2","type":"function","doc":"Get the status of a node Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Status{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_top_block/2","title":"AeternityNode.Api.External.get_top_block/2","type":"function","doc":"Get the top block (either key or micro block) Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.KeyBlockOrMicroBlockHeader{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_transaction_by_hash/3","title":"AeternityNode.Api.External.get_transaction_by_hash/3","type":"function","doc":"Get a transaction by hash Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the transaction opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.GenericSignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#get_transaction_info_by_hash/3","title":"AeternityNode.Api.External.get_transaction_info_by_hash/3","type":"function","doc":"Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the transaction opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.TxInfoObject{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.External.html#post_transaction/3","title":"AeternityNode.Api.External.post_transaction/3","type":"function","doc":"Post a new transaction Parameters connection (AeternityNode.Connection): Connection to server body (Tx): The new transaction opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.PostTxResponse{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html","title":"AeternityNode.Api.Internal","type":"module","doc":"API calls for all endpoints tagged Internal."},{"ref":"AeternityNode.Api.Internal.html#dry_run_txs/3","title":"AeternityNode.Api.Internal.dry_run_txs/3","type":"function","doc":"Dry-run transactions on top of a given block. Supports SpendTx, ContractCreateTx and ContractCallTx Parameters connection (AeternityNode.Connection): Connection to server body (DryRunInput): transactions opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.DryRunResults{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#get_commitment_id/4","title":"AeternityNode.Api.Internal.get_commitment_id/4","type":"function","doc":"Compute commitment ID for a given salt and name Parameters connection (AeternityNode.Connection): Connection to server name (String.t): Name salt (integer()): Salt opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.CommitmentId{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#get_node_beneficiary/2","title":"AeternityNode.Api.Internal.get_node_beneficiary/2","type":"function","doc":"Get node&#39;s beneficiary public key Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.PubKey{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#get_node_pubkey/2","title":"AeternityNode.Api.Internal.get_node_pubkey/2","type":"function","doc":"Get node&#39;s public key Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.PubKey{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#get_peers/2","title":"AeternityNode.Api.Internal.get_peers/2","type":"function","doc":"Get node Peers Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Peers{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#get_pending_transactions/2","title":"AeternityNode.Api.Internal.get_pending_transactions/2","type":"function","doc":"Get pending transactions Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.GenericTxs{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#get_token_supply_by_height/3","title":"AeternityNode.Api.Internal.get_token_supply_by_height/3","type":"function","doc":"Get total token supply at height Parameters connection (AeternityNode.Connection): Connection to server height (integer()): The height opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.TokenSupply{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_channel_close_mutual/3","title":"AeternityNode.Api.Internal.post_channel_close_mutual/3","type":"function","doc":"Get a channel_close_mutual transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelCloseMutualTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_channel_close_solo/3","title":"AeternityNode.Api.Internal.post_channel_close_solo/3","type":"function","doc":"Get a channel_close_solo transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelCloseSoloTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_channel_create/3","title":"AeternityNode.Api.Internal.post_channel_create/3","type":"function","doc":"Get a channel_create transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelCreateTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_channel_deposit/3","title":"AeternityNode.Api.Internal.post_channel_deposit/3","type":"function","doc":"Get a channel_deposit transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelDepositTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_channel_settle/3","title":"AeternityNode.Api.Internal.post_channel_settle/3","type":"function","doc":"Get a channel_settle transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelSettleTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_channel_slash/3","title":"AeternityNode.Api.Internal.post_channel_slash/3","type":"function","doc":"Get a channel_slash transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelSlashTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_channel_snapshot_solo/3","title":"AeternityNode.Api.Internal.post_channel_snapshot_solo/3","type":"function","doc":"Get a channel_snapshot_solo transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelSnapshotSoloTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_channel_withdraw/3","title":"AeternityNode.Api.Internal.post_channel_withdraw/3","type":"function","doc":"Get a channel_withdrawal transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ChannelWithdrawTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_contract_call/3","title":"AeternityNode.Api.Internal.post_contract_call/3","type":"function","doc":"Get a contract_call transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ContractCallTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_contract_create/3","title":"AeternityNode.Api.Internal.post_contract_create/3","type":"function","doc":"Get a contract_create transaction object Parameters connection (AeternityNode.Connection): Connection to server body (ContractCreateTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.CreateContractUnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_key_block/3","title":"AeternityNode.Api.Internal.post_key_block/3","type":"function","doc":"Post a mined key block Parameters connection (AeternityNode.Connection): Connection to server body (KeyBlock): Mined key block opts (KeywordList): [optional] Optional parameters Returns {:ok, %{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_name_claim/3","title":"AeternityNode.Api.Internal.post_name_claim/3","type":"function","doc":"Get a name_claim transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NameClaimTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_name_preclaim/3","title":"AeternityNode.Api.Internal.post_name_preclaim/3","type":"function","doc":"Get a name_preclaim transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NamePreclaimTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_name_revoke/3","title":"AeternityNode.Api.Internal.post_name_revoke/3","type":"function","doc":"Get a name_revoke transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NameRevokeTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_name_transfer/3","title":"AeternityNode.Api.Internal.post_name_transfer/3","type":"function","doc":"Get a name_transfer transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NameTransferTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_name_update/3","title":"AeternityNode.Api.Internal.post_name_update/3","type":"function","doc":"Get a name_update transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NameUpdateTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_oracle_extend/3","title":"AeternityNode.Api.Internal.post_oracle_extend/3","type":"function","doc":"Get an oracle_extend transaction object Parameters connection (AeternityNode.Connection): Connection to server body (OracleExtendTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_oracle_query/3","title":"AeternityNode.Api.Internal.post_oracle_query/3","type":"function","doc":"Get an oracle_query transaction object Parameters connection (AeternityNode.Connection): Connection to server body (OracleQueryTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_oracle_register/3","title":"AeternityNode.Api.Internal.post_oracle_register/3","type":"function","doc":"Get a oracle_register transaction object Parameters connection (AeternityNode.Connection): Connection to server body (OracleRegisterTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_oracle_respond/3","title":"AeternityNode.Api.Internal.post_oracle_respond/3","type":"function","doc":"Get an oracle_response transaction object Parameters connection (AeternityNode.Connection): Connection to server body (OracleRespondTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Internal.html#post_spend/3","title":"AeternityNode.Api.Internal.post_spend/3","type":"function","doc":"Get a spend transaction object Parameters connection (AeternityNode.Connection): Connection to server body (SpendTx): A spend transaction opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.NameService.html","title":"AeternityNode.Api.NameService","type":"module","doc":"API calls for all endpoints tagged NameService."},{"ref":"AeternityNode.Api.NameService.html#get_commitment_id/4","title":"AeternityNode.Api.NameService.get_commitment_id/4","type":"function","doc":"Compute commitment ID for a given salt and name Parameters connection (AeternityNode.Connection): Connection to server name (String.t): Name salt (integer()): Salt opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.CommitmentId{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.NameService.html#get_name_entry_by_name/3","title":"AeternityNode.Api.NameService.get_name_entry_by_name/3","type":"function","doc":"Get name entry from naming system Parameters connection (AeternityNode.Connection): Connection to server name (String.t): The name key of the name entry opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.NameEntry{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.NameService.html#post_name_claim/3","title":"AeternityNode.Api.NameService.post_name_claim/3","type":"function","doc":"Get a name_claim transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NameClaimTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.NameService.html#post_name_preclaim/3","title":"AeternityNode.Api.NameService.post_name_preclaim/3","type":"function","doc":"Get a name_preclaim transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NamePreclaimTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.NameService.html#post_name_revoke/3","title":"AeternityNode.Api.NameService.post_name_revoke/3","type":"function","doc":"Get a name_revoke transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NameRevokeTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.NameService.html#post_name_transfer/3","title":"AeternityNode.Api.NameService.post_name_transfer/3","type":"function","doc":"Get a name_transfer transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NameTransferTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.NameService.html#post_name_update/3","title":"AeternityNode.Api.NameService.post_name_update/3","type":"function","doc":"Get a name_update transaction object Parameters connection (AeternityNode.Connection): Connection to server body (NameUpdateTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.NodeInfo.html","title":"AeternityNode.Api.NodeInfo","type":"module","doc":"API calls for all endpoints tagged NodeInfo."},{"ref":"AeternityNode.Api.NodeInfo.html#get_node_beneficiary/2","title":"AeternityNode.Api.NodeInfo.get_node_beneficiary/2","type":"function","doc":"Get node&#39;s beneficiary public key Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.PubKey{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.NodeInfo.html#get_node_pubkey/2","title":"AeternityNode.Api.NodeInfo.get_node_pubkey/2","type":"function","doc":"Get node&#39;s public key Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.PubKey{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.NodeInfo.html#get_peer_pubkey/2","title":"AeternityNode.Api.NodeInfo.get_peer_pubkey/2","type":"function","doc":"Get peer public key Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.PeerPubKey{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.NodeInfo.html#get_peers/2","title":"AeternityNode.Api.NodeInfo.get_peers/2","type":"function","doc":"Get node Peers Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Peers{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.NodeInfo.html#get_status/2","title":"AeternityNode.Api.NodeInfo.get_status/2","type":"function","doc":"Get the status of a node Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.Status{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Oracle.html","title":"AeternityNode.Api.Oracle","type":"module","doc":"API calls for all endpoints tagged Oracle."},{"ref":"AeternityNode.Api.Oracle.html#get_oracle_by_pubkey/3","title":"AeternityNode.Api.Oracle.get_oracle_by_pubkey/3","type":"function","doc":"Get an oracle by public key Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the oracle opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.RegisteredOracle{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Oracle.html#get_oracle_queries_by_pubkey/3","title":"AeternityNode.Api.Oracle.get_oracle_queries_by_pubkey/3","type":"function","doc":"Get oracle queries by public key Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the oracle opts (KeywordList): [optional] Optional parameters :from (String.t): Last query id in previous page :limit (integer()): Max number of oracle queries :type (String.t): The type of a query: open, closed or all Returns {:ok, %AeternityNode.Model.OracleQueries{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Oracle.html#get_oracle_query_by_pubkey_and_query_id/4","title":"AeternityNode.Api.Oracle.get_oracle_query_by_pubkey_and_query_id/4","type":"function","doc":"Get an oracle query by public key and query ID Parameters connection (AeternityNode.Connection): Connection to server pubkey (String.t): The public key of the oracle query_id (String.t): The ID of the query opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.OracleQuery{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Oracle.html#post_oracle_extend/3","title":"AeternityNode.Api.Oracle.post_oracle_extend/3","type":"function","doc":"Get an oracle_extend transaction object Parameters connection (AeternityNode.Connection): Connection to server body (OracleExtendTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Oracle.html#post_oracle_query/3","title":"AeternityNode.Api.Oracle.post_oracle_query/3","type":"function","doc":"Get an oracle_query transaction object Parameters connection (AeternityNode.Connection): Connection to server body (OracleQueryTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Oracle.html#post_oracle_register/3","title":"AeternityNode.Api.Oracle.post_oracle_register/3","type":"function","doc":"Get a oracle_register transaction object Parameters connection (AeternityNode.Connection): Connection to server body (OracleRegisterTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Oracle.html#post_oracle_respond/3","title":"AeternityNode.Api.Oracle.post_oracle_respond/3","type":"function","doc":"Get an oracle_response transaction object Parameters connection (AeternityNode.Connection): Connection to server body (OracleRespondTx): opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Transaction.html","title":"AeternityNode.Api.Transaction","type":"module","doc":"API calls for all endpoints tagged Transaction."},{"ref":"AeternityNode.Api.Transaction.html#get_pending_transactions/2","title":"AeternityNode.Api.Transaction.get_pending_transactions/2","type":"function","doc":"Get pending transactions Parameters connection (AeternityNode.Connection): Connection to server opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.GenericTxs{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Transaction.html#get_transaction_by_hash/3","title":"AeternityNode.Api.Transaction.get_transaction_by_hash/3","type":"function","doc":"Get a transaction by hash Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the transaction opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.GenericSignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Transaction.html#get_transaction_info_by_hash/3","title":"AeternityNode.Api.Transaction.get_transaction_info_by_hash/3","type":"function","doc":"Parameters connection (AeternityNode.Connection): Connection to server hash (String.t): The hash of the transaction opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.TxInfoObject{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Transaction.html#post_spend/3","title":"AeternityNode.Api.Transaction.post_spend/3","type":"function","doc":"Get a spend transaction object Parameters connection (AeternityNode.Connection): Connection to server body (SpendTx): A spend transaction opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.UnsignedTx{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Api.Transaction.html#post_transaction/3","title":"AeternityNode.Api.Transaction.post_transaction/3","type":"function","doc":"Post a new transaction Parameters connection (AeternityNode.Connection): Connection to server body (Tx): The new transaction opts (KeywordList): [optional] Optional parameters Returns {:ok, %AeternityNode.Model.PostTxResponse{}} on success {:error, info} on failure"},{"ref":"AeternityNode.Connection.html","title":"AeternityNode.Connection","type":"module","doc":"Handle Tesla connections for AeternityNode."},{"ref":"AeternityNode.Connection.html#delete/3","title":"AeternityNode.Connection.delete/3","type":"function","doc":"Perform a DELETE request. See request/1 or request/2 for options definition. delete(&quot;/users&quot;) delete(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) delete(client, &quot;/users&quot;) delete(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#delete!/3","title":"AeternityNode.Connection.delete!/3","type":"function","doc":"Perform a DELETE request. See request!/1 or request!/2 for options definition. delete!(&quot;/users&quot;) delete!(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) delete!(client, &quot;/users&quot;) delete!(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#get/3","title":"AeternityNode.Connection.get/3","type":"function","doc":"Perform a GET request. See request/1 or request/2 for options definition. get(&quot;/users&quot;) get(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) get(client, &quot;/users&quot;) get(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#get!/3","title":"AeternityNode.Connection.get!/3","type":"function","doc":"Perform a GET request. See request!/1 or request!/2 for options definition. get!(&quot;/users&quot;) get!(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) get!(client, &quot;/users&quot;) get!(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#head/3","title":"AeternityNode.Connection.head/3","type":"function","doc":"Perform a HEAD request. See request/1 or request/2 for options definition. head(&quot;/users&quot;) head(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) head(client, &quot;/users&quot;) head(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#head!/3","title":"AeternityNode.Connection.head!/3","type":"function","doc":"Perform a HEAD request. See request!/1 or request!/2 for options definition. head!(&quot;/users&quot;) head!(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) head!(client, &quot;/users&quot;) head!(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#new/0","title":"AeternityNode.Connection.new/0","type":"function","doc":"Configure an authless client connection Returns Tesla.Env.client"},{"ref":"AeternityNode.Connection.html#new/1","title":"AeternityNode.Connection.new/1","type":"function","doc":""},{"ref":"AeternityNode.Connection.html#options/3","title":"AeternityNode.Connection.options/3","type":"function","doc":"Perform a OPTIONS request. See request/1 or request/2 for options definition. options(&quot;/users&quot;) options(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) options(client, &quot;/users&quot;) options(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#options!/3","title":"AeternityNode.Connection.options!/3","type":"function","doc":"Perform a OPTIONS request. See request!/1 or request!/2 for options definition. options!(&quot;/users&quot;) options!(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) options!(client, &quot;/users&quot;) options!(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#patch/4","title":"AeternityNode.Connection.patch/4","type":"function","doc":"Perform a PATCH request. See request/1 or request/2 for options definition. patch(&quot;/users&quot;, %{name: &quot;Jon&quot;}) patch(&quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;]) patch(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}) patch(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#patch!/4","title":"AeternityNode.Connection.patch!/4","type":"function","doc":"Perform a PATCH request. See request!/1 or request!/2 for options definition. patch!(&quot;/users&quot;, %{name: &quot;Jon&quot;}) patch!(&quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;]) patch!(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}) patch!(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#post/4","title":"AeternityNode.Connection.post/4","type":"function","doc":"Perform a POST request. See request/1 or request/2 for options definition. post(&quot;/users&quot;, %{name: &quot;Jon&quot;}) post(&quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;]) post(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}) post(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#post!/4","title":"AeternityNode.Connection.post!/4","type":"function","doc":"Perform a POST request. See request!/1 or request!/2 for options definition. post!(&quot;/users&quot;, %{name: &quot;Jon&quot;}) post!(&quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;]) post!(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}) post!(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#put/4","title":"AeternityNode.Connection.put/4","type":"function","doc":"Perform a PUT request. See request/1 or request/2 for options definition. put(&quot;/users&quot;, %{name: &quot;Jon&quot;}) put(&quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;]) put(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}) put(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#put!/4","title":"AeternityNode.Connection.put!/4","type":"function","doc":"Perform a PUT request. See request!/1 or request!/2 for options definition. put!(&quot;/users&quot;, %{name: &quot;Jon&quot;}) put!(&quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;]) put!(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}) put!(client, &quot;/users&quot;, %{name: &quot;Jon&quot;}, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#request/2","title":"AeternityNode.Connection.request/2","type":"function","doc":"Perform a request Options: :method - the request method, one of [:head, :get, :delete, :trace, :options, :post, :put, :patch] :url - either full url e.g. &quot;http://example.com/some/path&quot; or just &quot;/some/path&quot; if using Tesla.Middleware.BaseUrl :query - a keyword list of query params, e.g. [page: 1, per_page: 100] :headers - a keyworld list of headers, e.g. [{&quot;content-type&quot;, &quot;text/plain&quot;}] :body - depends on used middleware: by default it can be a binary if using e.g. JSON encoding middleware it can be a nested map if adapter supports it it can be a Stream with any of the above :opts - custom, per-request middleware or adapter options Examples: ExampleApi.request(method: :get, url: &quot;/users/path&quot;) You can also use shortcut methods like: ExampleApi.get(&quot;/users/1&quot;) or ExampleApi.post(client, &quot;/users&quot;, %{name: &quot;Jon&quot;})"},{"ref":"AeternityNode.Connection.html#request!/2","title":"AeternityNode.Connection.request!/2","type":"function","doc":"Perform request and raise in case of error. This is similar to request/2 behaviour from Tesla 0.x See request/2 for list of available options."},{"ref":"AeternityNode.Connection.html#trace/3","title":"AeternityNode.Connection.trace/3","type":"function","doc":"Perform a TRACE request. See request/1 or request/2 for options definition. trace(&quot;/users&quot;) trace(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) trace(client, &quot;/users&quot;) trace(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#trace!/3","title":"AeternityNode.Connection.trace!/3","type":"function","doc":"Perform a TRACE request. See request!/1 or request!/2 for options definition. trace!(&quot;/users&quot;) trace!(&quot;/users&quot;, query: [scope: &quot;admin&quot;]) trace!(client, &quot;/users&quot;) trace!(client, &quot;/users&quot;, query: [scope: &quot;admin&quot;])"},{"ref":"AeternityNode.Connection.html#t:option/0","title":"AeternityNode.Connection.option/0","type":"type","doc":""},{"ref":"AeternityNode.Deserializer.html","title":"AeternityNode.Deserializer","type":"module","doc":"Helper functions for deserializing responses into models"},{"ref":"AeternityNode.Deserializer.html#deserialize/5","title":"AeternityNode.Deserializer.deserialize/5","type":"function","doc":"Update the provided model with a deserialization of a nested value"},{"ref":"AeternityNode.Model.Account.html","title":"AeternityNode.Model.Account","type":"module","doc":""},{"ref":"AeternityNode.Model.Account.html#t:t/0","title":"AeternityNode.Model.Account.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ByteCode.html","title":"AeternityNode.Model.ByteCode","type":"module","doc":""},{"ref":"AeternityNode.Model.ByteCode.html#t:t/0","title":"AeternityNode.Model.ByteCode.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.Channel.html","title":"AeternityNode.Model.Channel","type":"module","doc":""},{"ref":"AeternityNode.Model.Channel.html#t:t/0","title":"AeternityNode.Model.Channel.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelCloseMutualTx.html","title":"AeternityNode.Model.ChannelCloseMutualTx","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelCloseMutualTx.html#t:t/0","title":"AeternityNode.Model.ChannelCloseMutualTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelCloseMutualTxJson.html","title":"AeternityNode.Model.ChannelCloseMutualTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelCloseMutualTxJson.html#t:t/0","title":"AeternityNode.Model.ChannelCloseMutualTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelCloseSoloTx.html","title":"AeternityNode.Model.ChannelCloseSoloTx","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelCloseSoloTx.html#t:t/0","title":"AeternityNode.Model.ChannelCloseSoloTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelCloseSoloTxJson.html","title":"AeternityNode.Model.ChannelCloseSoloTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelCloseSoloTxJson.html#t:t/0","title":"AeternityNode.Model.ChannelCloseSoloTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelCreateTx.html","title":"AeternityNode.Model.ChannelCreateTx","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelCreateTx.html#t:t/0","title":"AeternityNode.Model.ChannelCreateTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelCreateTxJson.html","title":"AeternityNode.Model.ChannelCreateTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelCreateTxJson.html#t:t/0","title":"AeternityNode.Model.ChannelCreateTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelDepositTx.html","title":"AeternityNode.Model.ChannelDepositTx","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelDepositTx.html#t:t/0","title":"AeternityNode.Model.ChannelDepositTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelDepositTxJson.html","title":"AeternityNode.Model.ChannelDepositTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelDepositTxJson.html#t:t/0","title":"AeternityNode.Model.ChannelDepositTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelForceProgressTx.html","title":"AeternityNode.Model.ChannelForceProgressTx","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelForceProgressTx.html#t:t/0","title":"AeternityNode.Model.ChannelForceProgressTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelForceProgressTxJson.html","title":"AeternityNode.Model.ChannelForceProgressTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelForceProgressTxJson.html#t:t/0","title":"AeternityNode.Model.ChannelForceProgressTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelSettleTx.html","title":"AeternityNode.Model.ChannelSettleTx","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelSettleTx.html#t:t/0","title":"AeternityNode.Model.ChannelSettleTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelSettleTxJson.html","title":"AeternityNode.Model.ChannelSettleTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelSettleTxJson.html#t:t/0","title":"AeternityNode.Model.ChannelSettleTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelSlashTx.html","title":"AeternityNode.Model.ChannelSlashTx","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelSlashTx.html#t:t/0","title":"AeternityNode.Model.ChannelSlashTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelSlashTxJson.html","title":"AeternityNode.Model.ChannelSlashTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelSlashTxJson.html#t:t/0","title":"AeternityNode.Model.ChannelSlashTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelSnapshotSoloTx.html","title":"AeternityNode.Model.ChannelSnapshotSoloTx","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelSnapshotSoloTx.html#t:t/0","title":"AeternityNode.Model.ChannelSnapshotSoloTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelSnapshotSoloTxJson.html","title":"AeternityNode.Model.ChannelSnapshotSoloTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelSnapshotSoloTxJson.html#t:t/0","title":"AeternityNode.Model.ChannelSnapshotSoloTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelWithdrawTx.html","title":"AeternityNode.Model.ChannelWithdrawTx","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelWithdrawTx.html#t:t/0","title":"AeternityNode.Model.ChannelWithdrawTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ChannelWithdrawalTxJson.html","title":"AeternityNode.Model.ChannelWithdrawalTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.ChannelWithdrawalTxJson.html#t:t/0","title":"AeternityNode.Model.ChannelWithdrawalTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.CommitmentId.html","title":"AeternityNode.Model.CommitmentId","type":"module","doc":""},{"ref":"AeternityNode.Model.CommitmentId.html#t:t/0","title":"AeternityNode.Model.CommitmentId.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ContractCallObject.html","title":"AeternityNode.Model.ContractCallObject","type":"module","doc":""},{"ref":"AeternityNode.Model.ContractCallObject.html#t:t/0","title":"AeternityNode.Model.ContractCallObject.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ContractCallTx.html","title":"AeternityNode.Model.ContractCallTx","type":"module","doc":""},{"ref":"AeternityNode.Model.ContractCallTx.html#t:t/0","title":"AeternityNode.Model.ContractCallTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ContractCallTxJson.html","title":"AeternityNode.Model.ContractCallTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.ContractCallTxJson.html#t:t/0","title":"AeternityNode.Model.ContractCallTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ContractCreateTx.html","title":"AeternityNode.Model.ContractCreateTx","type":"module","doc":""},{"ref":"AeternityNode.Model.ContractCreateTx.html#t:t/0","title":"AeternityNode.Model.ContractCreateTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ContractCreateTxJson.html","title":"AeternityNode.Model.ContractCreateTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.ContractCreateTxJson.html#t:t/0","title":"AeternityNode.Model.ContractCreateTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ContractObject.html","title":"AeternityNode.Model.ContractObject","type":"module","doc":""},{"ref":"AeternityNode.Model.ContractObject.html#t:t/0","title":"AeternityNode.Model.ContractObject.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ContractStore.html","title":"AeternityNode.Model.ContractStore","type":"module","doc":""},{"ref":"AeternityNode.Model.ContractStore.html#t:t/0","title":"AeternityNode.Model.ContractStore.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.ContractStoreStore.html","title":"AeternityNode.Model.ContractStoreStore","type":"module","doc":""},{"ref":"AeternityNode.Model.ContractStoreStore.html#t:t/0","title":"AeternityNode.Model.ContractStoreStore.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.CreateContractUnsignedTx.html","title":"AeternityNode.Model.CreateContractUnsignedTx","type":"module","doc":""},{"ref":"AeternityNode.Model.CreateContractUnsignedTx.html#t:t/0","title":"AeternityNode.Model.CreateContractUnsignedTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.DryRunAccount.html","title":"AeternityNode.Model.DryRunAccount","type":"module","doc":""},{"ref":"AeternityNode.Model.DryRunAccount.html#t:t/0","title":"AeternityNode.Model.DryRunAccount.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.DryRunInput.html","title":"AeternityNode.Model.DryRunInput","type":"module","doc":""},{"ref":"AeternityNode.Model.DryRunInput.html#t:t/0","title":"AeternityNode.Model.DryRunInput.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.DryRunResult.html","title":"AeternityNode.Model.DryRunResult","type":"module","doc":""},{"ref":"AeternityNode.Model.DryRunResult.html#t:t/0","title":"AeternityNode.Model.DryRunResult.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.DryRunResults.html","title":"AeternityNode.Model.DryRunResults","type":"module","doc":""},{"ref":"AeternityNode.Model.DryRunResults.html#t:t/0","title":"AeternityNode.Model.DryRunResults.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.Error.html","title":"AeternityNode.Model.Error","type":"module","doc":""},{"ref":"AeternityNode.Model.Error.html#t:t/0","title":"AeternityNode.Model.Error.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.Event.html","title":"AeternityNode.Model.Event","type":"module","doc":""},{"ref":"AeternityNode.Model.Event.html#t:t/0","title":"AeternityNode.Model.Event.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.GaObject.html","title":"AeternityNode.Model.GaObject","type":"module","doc":""},{"ref":"AeternityNode.Model.GaObject.html#t:t/0","title":"AeternityNode.Model.GaObject.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.Generation.html","title":"AeternityNode.Model.Generation","type":"module","doc":""},{"ref":"AeternityNode.Model.Generation.html#t:t/0","title":"AeternityNode.Model.Generation.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.GenericSignedTx.html","title":"AeternityNode.Model.GenericSignedTx","type":"module","doc":""},{"ref":"AeternityNode.Model.GenericSignedTx.html#t:t/0","title":"AeternityNode.Model.GenericSignedTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.GenericTx.html","title":"AeternityNode.Model.GenericTx","type":"module","doc":""},{"ref":"AeternityNode.Model.GenericTx.html#t:t/0","title":"AeternityNode.Model.GenericTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.GenericTxs.html","title":"AeternityNode.Model.GenericTxs","type":"module","doc":""},{"ref":"AeternityNode.Model.GenericTxs.html#t:t/0","title":"AeternityNode.Model.GenericTxs.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.InlineResponse200.html","title":"AeternityNode.Model.InlineResponse200","type":"module","doc":""},{"ref":"AeternityNode.Model.InlineResponse200.html#t:t/0","title":"AeternityNode.Model.InlineResponse200.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.InlineResponse2001.html","title":"AeternityNode.Model.InlineResponse2001","type":"module","doc":""},{"ref":"AeternityNode.Model.InlineResponse2001.html#t:t/0","title":"AeternityNode.Model.InlineResponse2001.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.InlineResponse2002.html","title":"AeternityNode.Model.InlineResponse2002","type":"module","doc":""},{"ref":"AeternityNode.Model.InlineResponse2002.html#t:t/0","title":"AeternityNode.Model.InlineResponse2002.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.KeyBlock.html","title":"AeternityNode.Model.KeyBlock","type":"module","doc":""},{"ref":"AeternityNode.Model.KeyBlock.html#t:t/0","title":"AeternityNode.Model.KeyBlock.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.KeyBlockOrMicroBlockHeader.html","title":"AeternityNode.Model.KeyBlockOrMicroBlockHeader","type":"module","doc":""},{"ref":"AeternityNode.Model.KeyBlockOrMicroBlockHeader.html#t:t/0","title":"AeternityNode.Model.KeyBlockOrMicroBlockHeader.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.MicroBlockHeader.html","title":"AeternityNode.Model.MicroBlockHeader","type":"module","doc":""},{"ref":"AeternityNode.Model.MicroBlockHeader.html#t:t/0","title":"AeternityNode.Model.MicroBlockHeader.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NameClaimTx.html","title":"AeternityNode.Model.NameClaimTx","type":"module","doc":""},{"ref":"AeternityNode.Model.NameClaimTx.html#t:t/0","title":"AeternityNode.Model.NameClaimTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NameClaimTxJson.html","title":"AeternityNode.Model.NameClaimTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.NameClaimTxJson.html#t:t/0","title":"AeternityNode.Model.NameClaimTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NameEntry.html","title":"AeternityNode.Model.NameEntry","type":"module","doc":""},{"ref":"AeternityNode.Model.NameEntry.html#t:t/0","title":"AeternityNode.Model.NameEntry.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NameHash.html","title":"AeternityNode.Model.NameHash","type":"module","doc":""},{"ref":"AeternityNode.Model.NameHash.html#t:t/0","title":"AeternityNode.Model.NameHash.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NamePointer.html","title":"AeternityNode.Model.NamePointer","type":"module","doc":""},{"ref":"AeternityNode.Model.NamePointer.html#t:t/0","title":"AeternityNode.Model.NamePointer.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NamePreclaimTx.html","title":"AeternityNode.Model.NamePreclaimTx","type":"module","doc":""},{"ref":"AeternityNode.Model.NamePreclaimTx.html#t:t/0","title":"AeternityNode.Model.NamePreclaimTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NamePreclaimTxJson.html","title":"AeternityNode.Model.NamePreclaimTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.NamePreclaimTxJson.html#t:t/0","title":"AeternityNode.Model.NamePreclaimTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NameRevokeTx.html","title":"AeternityNode.Model.NameRevokeTx","type":"module","doc":""},{"ref":"AeternityNode.Model.NameRevokeTx.html#t:t/0","title":"AeternityNode.Model.NameRevokeTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NameRevokeTxJson.html","title":"AeternityNode.Model.NameRevokeTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.NameRevokeTxJson.html#t:t/0","title":"AeternityNode.Model.NameRevokeTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NameTransferTx.html","title":"AeternityNode.Model.NameTransferTx","type":"module","doc":""},{"ref":"AeternityNode.Model.NameTransferTx.html#t:t/0","title":"AeternityNode.Model.NameTransferTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NameTransferTxJson.html","title":"AeternityNode.Model.NameTransferTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.NameTransferTxJson.html#t:t/0","title":"AeternityNode.Model.NameTransferTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NameUpdateTx.html","title":"AeternityNode.Model.NameUpdateTx","type":"module","doc":""},{"ref":"AeternityNode.Model.NameUpdateTx.html#t:t/0","title":"AeternityNode.Model.NameUpdateTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.NameUpdateTxJson.html","title":"AeternityNode.Model.NameUpdateTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.NameUpdateTxJson.html#t:t/0","title":"AeternityNode.Model.NameUpdateTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OffChainCallContract.html","title":"AeternityNode.Model.OffChainCallContract","type":"module","doc":""},{"ref":"AeternityNode.Model.OffChainCallContract.html#t:t/0","title":"AeternityNode.Model.OffChainCallContract.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OffChainDeposit.html","title":"AeternityNode.Model.OffChainDeposit","type":"module","doc":""},{"ref":"AeternityNode.Model.OffChainDeposit.html#t:t/0","title":"AeternityNode.Model.OffChainDeposit.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OffChainNewContract.html","title":"AeternityNode.Model.OffChainNewContract","type":"module","doc":""},{"ref":"AeternityNode.Model.OffChainNewContract.html#t:t/0","title":"AeternityNode.Model.OffChainNewContract.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OffChainTransfer.html","title":"AeternityNode.Model.OffChainTransfer","type":"module","doc":""},{"ref":"AeternityNode.Model.OffChainTransfer.html#t:t/0","title":"AeternityNode.Model.OffChainTransfer.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OffChainUpdate.html","title":"AeternityNode.Model.OffChainUpdate","type":"module","doc":""},{"ref":"AeternityNode.Model.OffChainUpdate.html#t:t/0","title":"AeternityNode.Model.OffChainUpdate.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OffChainWithdrawal.html","title":"AeternityNode.Model.OffChainWithdrawal","type":"module","doc":""},{"ref":"AeternityNode.Model.OffChainWithdrawal.html#t:t/0","title":"AeternityNode.Model.OffChainWithdrawal.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OracleExtendTx.html","title":"AeternityNode.Model.OracleExtendTx","type":"module","doc":""},{"ref":"AeternityNode.Model.OracleExtendTx.html#t:t/0","title":"AeternityNode.Model.OracleExtendTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OracleExtendTxJson.html","title":"AeternityNode.Model.OracleExtendTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.OracleExtendTxJson.html#t:t/0","title":"AeternityNode.Model.OracleExtendTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OracleQueries.html","title":"AeternityNode.Model.OracleQueries","type":"module","doc":""},{"ref":"AeternityNode.Model.OracleQueries.html#t:t/0","title":"AeternityNode.Model.OracleQueries.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OracleQuery.html","title":"AeternityNode.Model.OracleQuery","type":"module","doc":""},{"ref":"AeternityNode.Model.OracleQuery.html#t:t/0","title":"AeternityNode.Model.OracleQuery.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OracleQueryTx.html","title":"AeternityNode.Model.OracleQueryTx","type":"module","doc":""},{"ref":"AeternityNode.Model.OracleQueryTx.html#t:t/0","title":"AeternityNode.Model.OracleQueryTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OracleQueryTxJson.html","title":"AeternityNode.Model.OracleQueryTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.OracleQueryTxJson.html#t:t/0","title":"AeternityNode.Model.OracleQueryTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OracleRegisterTx.html","title":"AeternityNode.Model.OracleRegisterTx","type":"module","doc":""},{"ref":"AeternityNode.Model.OracleRegisterTx.html#t:t/0","title":"AeternityNode.Model.OracleRegisterTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OracleRegisterTxJson.html","title":"AeternityNode.Model.OracleRegisterTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.OracleRegisterTxJson.html#t:t/0","title":"AeternityNode.Model.OracleRegisterTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OracleRespondTx.html","title":"AeternityNode.Model.OracleRespondTx","type":"module","doc":""},{"ref":"AeternityNode.Model.OracleRespondTx.html#t:t/0","title":"AeternityNode.Model.OracleRespondTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.OracleResponseTxJson.html","title":"AeternityNode.Model.OracleResponseTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.OracleResponseTxJson.html#t:t/0","title":"AeternityNode.Model.OracleResponseTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.PeerPubKey.html","title":"AeternityNode.Model.PeerPubKey","type":"module","doc":""},{"ref":"AeternityNode.Model.PeerPubKey.html#t:t/0","title":"AeternityNode.Model.PeerPubKey.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.Peers.html","title":"AeternityNode.Model.Peers","type":"module","doc":""},{"ref":"AeternityNode.Model.Peers.html#t:t/0","title":"AeternityNode.Model.Peers.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.PoI.html","title":"AeternityNode.Model.PoI","type":"module","doc":""},{"ref":"AeternityNode.Model.PoI.html#t:t/0","title":"AeternityNode.Model.PoI.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.PostTxResponse.html","title":"AeternityNode.Model.PostTxResponse","type":"module","doc":""},{"ref":"AeternityNode.Model.PostTxResponse.html#t:t/0","title":"AeternityNode.Model.PostTxResponse.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.Protocol.html","title":"AeternityNode.Model.Protocol","type":"module","doc":""},{"ref":"AeternityNode.Model.Protocol.html#t:t/0","title":"AeternityNode.Model.Protocol.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.PubKey.html","title":"AeternityNode.Model.PubKey","type":"module","doc":""},{"ref":"AeternityNode.Model.PubKey.html#t:t/0","title":"AeternityNode.Model.PubKey.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.RegisteredOracle.html","title":"AeternityNode.Model.RegisteredOracle","type":"module","doc":""},{"ref":"AeternityNode.Model.RegisteredOracle.html#t:t/0","title":"AeternityNode.Model.RegisteredOracle.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.RelativeTtl.html","title":"AeternityNode.Model.RelativeTtl","type":"module","doc":""},{"ref":"AeternityNode.Model.RelativeTtl.html#t:t/0","title":"AeternityNode.Model.RelativeTtl.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.SpendTx.html","title":"AeternityNode.Model.SpendTx","type":"module","doc":""},{"ref":"AeternityNode.Model.SpendTx.html#t:t/0","title":"AeternityNode.Model.SpendTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.SpendTxJson.html","title":"AeternityNode.Model.SpendTxJson","type":"module","doc":""},{"ref":"AeternityNode.Model.SpendTxJson.html#t:t/0","title":"AeternityNode.Model.SpendTxJson.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.Status.html","title":"AeternityNode.Model.Status","type":"module","doc":""},{"ref":"AeternityNode.Model.Status.html#t:t/0","title":"AeternityNode.Model.Status.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.TokenSupply.html","title":"AeternityNode.Model.TokenSupply","type":"module","doc":""},{"ref":"AeternityNode.Model.TokenSupply.html#t:t/0","title":"AeternityNode.Model.TokenSupply.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.Ttl.html","title":"AeternityNode.Model.Ttl","type":"module","doc":""},{"ref":"AeternityNode.Model.Ttl.html#t:t/0","title":"AeternityNode.Model.Ttl.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.Tx.html","title":"AeternityNode.Model.Tx","type":"module","doc":""},{"ref":"AeternityNode.Model.Tx.html#t:t/0","title":"AeternityNode.Model.Tx.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.TxInfoObject.html","title":"AeternityNode.Model.TxInfoObject","type":"module","doc":""},{"ref":"AeternityNode.Model.TxInfoObject.html#t:t/0","title":"AeternityNode.Model.TxInfoObject.t/0","type":"type","doc":""},{"ref":"AeternityNode.Model.UnsignedTx.html","title":"AeternityNode.Model.UnsignedTx","type":"module","doc":""},{"ref":"AeternityNode.Model.UnsignedTx.html#t:t/0","title":"AeternityNode.Model.UnsignedTx.t/0","type":"type","doc":""},{"ref":"AeternityNode.RequestBuilder.html","title":"AeternityNode.RequestBuilder","type":"module","doc":"Helper functions for building Tesla requests"},{"ref":"AeternityNode.RequestBuilder.html#add_optional_params/3","title":"AeternityNode.RequestBuilder.add_optional_params/3","type":"function","doc":"Add optional parameters to the request Parameters request (Map) - Collected request options definitions (Map) - Map of parameter name to parameter location. options (KeywordList) - The provided optional parameters Returns Map"},{"ref":"AeternityNode.RequestBuilder.html#add_param/4","title":"AeternityNode.RequestBuilder.add_param/4","type":"function","doc":"Add optional parameters to the request Parameters request (Map) - Collected request options location (atom) - Where to put the parameter key (atom) - The name of the parameter value (any) - The value of the parameter Returns Map"},{"ref":"AeternityNode.RequestBuilder.html#decode/2","title":"AeternityNode.RequestBuilder.decode/2","type":"function","doc":"Handle the response for a Tesla request Parameters arg1 (Tesla.Env.t | term) - The response object arg2 (:false | struct | [struct]) - The shape of the struct to deserialize into Returns {:ok, struct} on success {:error, term} on failure"},{"ref":"AeternityNode.RequestBuilder.html#evaluate_response/2","title":"AeternityNode.RequestBuilder.evaluate_response/2","type":"function","doc":""},{"ref":"AeternityNode.RequestBuilder.html#method/2","title":"AeternityNode.RequestBuilder.method/2","type":"function","doc":"Specify the request method when building a request Parameters request (Map) - Collected request options m (atom) - Request method Returns Map"},{"ref":"AeternityNode.RequestBuilder.html#resolve_mapping/3","title":"AeternityNode.RequestBuilder.resolve_mapping/3","type":"function","doc":""},{"ref":"AeternityNode.RequestBuilder.html#url/2","title":"AeternityNode.RequestBuilder.url/2","type":"function","doc":"Specify the request method when building a request Parameters request (Map) - Collected request options u (String) - Request URL Returns Map"},{"ref":"Core.AENS.html","title":"Core.AENS","type":"module","doc":"Module for Aeternity Naming System, see: https://github.com/aeternity/protocol/blob/master/AENS.md. Contains all naming-related functionality. In order for its functions to be used, a client must be defined first. Client example can be found at: Core.Client.new/4."},{"ref":"Core.AENS.html#claim/2","title":"Core.AENS.claim/2","type":"function","doc":"Claims a name. Example iex&gt; client |&gt; Core.AENS.preclaim(&quot;a123.test&quot;) |&gt; Core.AENS.claim() {:ok, %{ block_hash: &quot;mh_YyiddDH57Azdztir1s8zgtLXZpBAK1xNBSisCMxSUSJA4MNE3&quot;, block_height: 23, client: %Core.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; }, network_id: &quot;my_test&quot; }, name: &quot;a123.test&quot;, tx_hash: &quot;th_257jfXcwXS51z1x3zDBdU5auHTjWPAbhhYJEtAwhM7Aby3Syf4&quot; }}"},{"ref":"Core.AENS.html#claim/4","title":"Core.AENS.claim/4","type":"function","doc":"Claims a name. Example iex&gt; name = &quot;a123.test&quot; iex&gt; name_salt = 149218901844062129, iex&gt; Core.AENS.claim(client, name, name_salt) {:ok, %{ block_hash: &quot;mh_41E9iE61koF8AQLMvjTkRJ3N23yne4UXmqn5jeUn1GDrScV7A&quot;, block_height: 80, client: %Core.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; }, network_id: &quot;my_test&quot; }, name: &quot;a123.test&quot;, tx_hash: &quot;th_257jfXcwXS51z1x3zDBdU5auHTjWPAbhhYJEtAwhM7Aby3Syf4&quot; }}"},{"ref":"Core.AENS.html#preclaim/4","title":"Core.AENS.preclaim/4","type":"function","doc":"Preclaims a name. Example iex&gt; name = &quot;a123.test&quot; iex&gt; Core.AENS.preclaim(client, name) {:ok, %{ block_hash: &quot;mh_Dumv7aK8Nb8Cedm7z1tMvWDMhVZqoc1VHbEgb1V484tZssK6d&quot;, block_height: 86, client: %Core.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; }, network_id: &quot;my_test&quot; }, name: &quot;a123.test&quot;, name_salt: 149218901844062129,, tx_hash: &quot;th_wYo5DLruahJrkFwjH5Jji6HsRMbPZBxeJKmRwg8QEyKVYrXGd&quot; }}"},{"ref":"Core.AENS.html#revoke/2","title":"Core.AENS.revoke/2","type":"function","doc":"Revokes a name. Example iex&gt; name = &quot;a123.test&quot; iex&gt; client |&gt; Core.AENS.preclaim(name) |&gt; Core.AENS.claim() |&gt; Core.AENS.revoke() {:ok, %{ block_hash: &quot;mh_21fw4AryJSGKkdaQsigFQwkydfFVbN2mY7G5pRvwq7rp4zmfYC&quot;, block_height: 24, client: %Core.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; }, network_id: &quot;my_test&quot; }, name: &quot;a123.test&quot;, tx_hash: &quot;th_2sGNfvv59tyGEk3fqQSXryzt25uuShA6Zabb3Wjkyt77cWRWFW&quot; }}"},{"ref":"Core.AENS.html#revoke_name/3","title":"Core.AENS.revoke_name/3","type":"function","doc":"Revokes a name. Example iex&gt; name = &quot;a123.test&quot; iex&gt; Core.AENS.revoke_name(client, name) {:ok, %{ block_hash: &quot;mh_21fw4AryJSGKkdaQsigFQwkydfFVbN2mY7G5pRvwq7rp4zmfYC&quot;, block_height: 24, client: %Core.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; }, network_id: &quot;my_test&quot; }, name: &quot;a123.test&quot;, tx_hash: &quot;th_2sGNfvv59tyGEk3fqQSXryzt25uuShA6Zabb3Wjkyt77cWRWFW&quot; }}"},{"ref":"Core.AENS.html#transfer/3","title":"Core.AENS.transfer/3","type":"function","doc":"Transfers a name. Example iex&gt; name = &quot;a123.test&quot; iex&gt; recipient_key = &quot;ak_nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv&quot; iex&gt; client |&gt; Core.AENS.preclaim(name) |&gt; Core.AENS.claim() |&gt; Core.AENS.transfer(recipient_key) {:ok, %{ block_hash: &quot;mh_NSyuLSvbB1v4R8nz8ZCLLHQXCHtsBntNyYbWdeKTadFm8Y5nB&quot;, block_height: 35, client: %Core.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; }, network_id: &quot;my_test&quot; }, name: &quot;a123.test&quot;, recipient_id: &quot;ak_nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv&quot;, tx_hash: &quot;th_2Bxxz5j4rexSCRC227oR4E6zBD14MCFh2qhZoNMDiCjzpVv8Qi&quot; }}"},{"ref":"Core.AENS.html#transfer_name/4","title":"Core.AENS.transfer_name/4","type":"function","doc":"Transfers a name. Example iex&gt; name = &quot;a123.test&quot; iex&gt; recipient_key = &quot;ak_nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv&quot; iex&gt; Core.AENS.transfer_name(client, name, recipient_key) {:ok, %{ block_hash: &quot;mh_NSyuLSvbB1v4R8nz8ZCLLHQXCHtsBntNyYbWdeKTadFm8Y5nB&quot;, block_height: 35, client: %Core.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; }, network_id: &quot;my_test&quot; }, name: &quot;a123.test&quot;, recipient_id: &quot;ak_nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv&quot;, tx_hash: &quot;th_2Bxxz5j4rexSCRC227oR4E6zBD14MCFh2qhZoNMDiCjzpVv8Qi&quot; }}"},{"ref":"Core.AENS.html#update/5","title":"Core.AENS.update/5","type":"function","doc":"Updates a name. Example iex&gt; name = &quot;a123.test&quot; iex&gt; name_ttl = 49_999 iex&gt; pointers = [] iex&gt; client_ttl = 50_000 iex&gt; client |&gt; Core.AENS.preclaim(name) |&gt; Core.AENS.claim() |&gt; Core.AENS.update(pointers, name_ttl, client_ttl) {:ok, %{ block_hash: &quot;mh_bDauziEPcfsqZQMyBqLX2grxiD9p9iorsF2utsaCZQtwrEX2T&quot;, block_height: 41, client: %Core.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; }, network_id: &quot;my_test&quot; }, client_ttl: 50000, name: &quot;a123.test&quot;, name_ttl: 49999, pointers: [], tx_hash: &quot;th_XV3mn79qzc5foq67JuiXWCaCK2yZzbHuk8knvkQtTNMDaa7JB&quot; }}"},{"ref":"Core.AENS.html#update_name/6","title":"Core.AENS.update_name/6","type":"function","doc":"Updates a name. Example iex&gt; name = &quot;a123.test&quot; iex&gt; name_ttl = 49_999 iex&gt; pointers = [] iex&gt; client_ttl = 50_000 iex&gt; Core.AENS.update_name(client, name, name_ttl, pointers, client_ttl) {:ok, %{ block_hash: &quot;mh_bDauziEPcfsqZQMyBqLX2grxiD9p9iorsF2utsaCZQtwrEX2T&quot;, block_height: 41, client: %Core.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3013/v2&quot;]}] }, gas_price: 1000000, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [{Tesla.Middleware.BaseUrl, :call, [&quot;http://localhost:3113/v2&quot;]}] }, keypair: %{ public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; }, network_id: &quot;my_test&quot; }, client_ttl: 50000, name: &quot;a123.test&quot;, name_ttl: 49999, pointers: [], tx_hash: &quot;th_XV3mn79qzc5foq67JuiXWCaCK2yZzbHuk8knvkQtTNMDaa7JB&quot; }}"},{"ref":"Core.AENS.html#t:aens_options/0","title":"Core.AENS.aens_options/0","type":"type","doc":""},{"ref":"Core.Account.html","title":"Core.Account","type":"module","doc":"High-level module for Account-related activities. In order for its functions to be used, a client must be defined first. Client example can be found at: Core.Client.new/4"},{"ref":"Core.Account.html#balance/2","title":"Core.Account.balance/2","type":"function","doc":"Get an account&#39;s balance Example iex&gt; pubkey = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; Core.Account.balance(client, pubkey) {:ok, 1652992279192254044805}"},{"ref":"Core.Account.html#balance/3","title":"Core.Account.balance/3","type":"function","doc":"Get an account&#39;s balance at a given block hash Example iex&gt; pubkey = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; block_hash = &quot;kh_2XteYFUyUYjnMDJzHszhHegpoV59QpWTLnMPw5eohsXntzdf6P&quot; iex&gt; Core.Account.balance(client, pubkey, block_hash) {:ok, 1653014562214254044805}"},{"ref":"Core.Account.html#get/3","title":"Core.Account.get/3","type":"function","doc":"Get an account at a given block hash Example iex&gt; pubkey = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; block_hash = &quot;kh_2XteYFUyUYjnMDJzHszhHegpoV59QpWTLnMPw5eohsXntzdf6P&quot; iex&gt; Core.Account.get(client, pubkey, block_hash) {:ok, %{ auth_fun: nil, balance: 1653014562214254044805, contract_id: nil, id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, kind: &quot;basic&quot;, nonce: 11837 }}"},{"ref":"Core.Account.html#spend/4","title":"Core.Account.spend/4","type":"function","doc":"Send tokens to an account. Example iex&gt; public_key = &quot;ak_nv5B93FPzRHrGNmMdTDfGdd5xGZvep3MVSpJqzcQmMp59bBCv&quot; iex&gt; Core.Account.spend(client, public_key, 10_000_000, fee: 1_000_000_000_000_000) {:ok, %{ block_hash: &quot;mh_2hM7ZkifnstA9HEdpZRwKjZgNUSrkVmrB1jmCgG7Ly2b1vF7t&quot;, block_height: 74871, tx_hash: &quot;th_FBqci65KYGsup7GettzvWVxP91podgngX9EJK2BDiduFf8FY4&quot; }}"},{"ref":"Core.Account.html#t:account/0","title":"Core.Account.account/0","type":"type","doc":""},{"ref":"Core.Account.html#t:spend_options/0","title":"Core.Account.spend_options/0","type":"type","doc":""},{"ref":"Core.Chain.html","title":"Core.Chain","type":"module","doc":"Contains all chain-related functionality. In order for its functions to be used, a client must be defined first. Client example can be found at: Core.Client.new/4."},{"ref":"Core.Chain.html#await_height/3","title":"Core.Chain.await_height/3","type":"function","doc":"Wait for the chain to reach specific height Example iex&gt; Core.Chain.await_height(client, 84590) :ok"},{"ref":"Core.Chain.html#await_transaction/3","title":"Core.Chain.await_transaction/3","type":"function","doc":"Wait for a transaction to be mined Example iex&gt; transaction_hash = &quot;th_232gp9o5Lm1XZ8SMaDCAnLcvyj2CkDkf5tssfD5yVAoFAnPBm7&quot; iex&gt; Core.Chain.await_transaction(client, transaction_hash) :ok"},{"ref":"Core.Chain.html#dry_run/4","title":"Core.Chain.dry_run/4","type":"function","doc":"Dry-run transactions on top of a given block Example iex&gt; transactions = [&quot;tx_+N8rAaEBC7TteSf5e1HhvLXhNA0SM1sqKxLIvFIh1jxLyznUHmGCIIehBfZ7ZdL+i0DaHZpf8m42K6cj3on94Wg6F2eruDXsh5g6AYcFKtwr02gAAACDD0JAhDuaygC4gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgcMIbP6v40neQ7iIeZN4CbwwLC1JWUjXOkZs8Dc7Wtz4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhIqvyBw==&quot;] iex&gt; accounts = [ %{ pubkey: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, amount: 1651002120672731042209 } ] iex&gt; block_hash = &quot;kh_WPQzXtyDiwvUs54N1L88YsLPn51PERHF76bqcMhpT5vnrAEAT&quot; {:ok, [ %{ call_obj: %{ caller_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, caller_nonce: 8327, contract_id: &quot;ct_2sZ43ScybbzKkd4iFMuLJw7uQib1dpUB8VDi9pLkALV5BpXXNR&quot;, gas_price: 1000000000, gas_used: 252, height: 61481, log: [], return_type: &quot;ok&quot;, return_value: &quot;cb_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEvrXnzA&quot; }, reason: nil, result: &quot;ok&quot;, type: &quot;contract_call&quot; } ]}"},{"ref":"Core.Chain.html#get_current_generation/1","title":"Core.Chain.get_current_generation/1","type":"function","doc":"Get current generation Example iex&gt; Core.Chain.get_current_generation(client) {:ok, %{ key_block: %{ beneficiary: &quot;ak_2iBPH7HUz3cSDVEUWiHg76MZJ6tZooVNBmmxcgVK6VV8KAE688&quot;, hash: &quot;kh_LVmMAyjcTtcLTh76STB9gJoAzpXdZBgwtiYX2rC98tkzRpUt8&quot;, height: 84552, info: &quot;cb_AAAAAfy4hFE=&quot;, miner: &quot;ak_rPG4k1G8MsbdVdgisDXAs95htP94eYeJHPdotCvdJUbNLXmVz&quot;, nonce: 1040728877473258350, pow: [1816785, 4563830, 6535791, 7371744, 15431122, 25810590, 38354710, 41068269, 49508987, 61851964, 64661610, 64916450, 73480578, 82460245, 84205198, 110560762, 119763104, 126778601, 131361835, 152044373, 175440084, 229990565, 232441141, 246507939, 256839457, 267089067, 281126946, 297684504, 358409889, 368048805, 374727588, 389428641, 395353074, 412257533, 448812603, 460866874, 468707889, 478197976, 483791458, 492777525, ...], prev_hash: &quot;mh_ZAX9bfDJVRU4yBZVJBjYHrSpWqEfjvTmjhRReAxMH1Tb4aX6D&quot;, prev_key_hash: &quot;kh_sqnNrjX4s7uvwBksHK9hgq736vJvGakoB8DjVgqvzymjEiodP&quot;, state_hash: &quot;bs_qPF68kYqsw3qNWscQX883gi4XSRvy8K1AyAo6xKmCe22wYiHq&quot;, target: 538023502, time: 1558614496897, version: 3 }, micro_blocks: [] }}"},{"ref":"Core.Chain.html#get_generation/2","title":"Core.Chain.get_generation/2","type":"function","doc":"Get a generation by height Example iex&gt; height = 84551 iex&gt; Core.Chain.get_generation(client, height) {:ok, %{ key_block: %{ beneficiary: &quot;ak_QFqo5LsvnCxdMK184Rf8aeuQa5JWGf3n8dex2iSGqYE3mzWFn&quot;, hash: &quot;kh_sqnNrjX4s7uvwBksHK9hgq736vJvGakoB8DjVgqvzymjEiodP&quot;, height: 84551, info: &quot;cb_AAAAAfy4hFE=&quot;, miner: &quot;ak_22cVmvsZq8vLxMTZjWcggZ5HQQi2RRF7UrAjMwQ5tCd1kCsNBb&quot;, nonce: 8590250258, pow: [4270548, 4672365, 26145245, 46020752, 50518165, 61725479, 82664155, 101009367, 123337852, 136176634, 152345694, 154969206, 180766968, 182806912, 197514003, 198196883, 199214273, 202117489, 202413040, 237707860, 261164171, 288613351, 298097639, 304490763, 314326968, 348389855, 355561157, 363125716, 364007441, 382373111, 384879255, 393259024, 411552709, 427321732, 430989208, 440655342, 468506638, 482430386, 488147407, 504275453, ...], prev_hash: &quot;kh_2VZKBkQnR6JTo2WikRoUNtGNgfQD8FsqKAMXfrR8WKxrPd3Zdr&quot;, prev_key_hash: &quot;kh_2VZKBkQnR6JTo2WikRoUNtGNgfQD8FsqKAMXfrR8WKxrPd3Zdr&quot;, state_hash: &quot;bs_kWVRFL9VqTcBjsT56SHLsJWryemyTJnFwEBzaJ6aA7btYrKZ5&quot;, target: 538041170, time: 1558614345333, version: 3 }, micro_blocks: [&quot;mh_NN4Tr4w6UBEobHucDNAFRn2sba12f9PFtvPDAAe2idBx3Ymsv&quot;, &quot;mh_cXozyVg6968P68cWcNGYHsHsGX9yVoZUGc56APx7z3wo2Vzh2&quot;, &quot;mh_2XDQytSS9v39aQdBLioXz3pvYrjWFeVcK2hL8xHzj79QL54Lz6&quot;, &quot;mh_GDkX5cqPgq4C2W9QpncMAfsUqbVXSh6nrMAKcPtHiAx9uGURf&quot;, &quot;mh_59ZnCtvjvp5nT6Q8QfZhnmRkjEy38BcJ3VS47wwMRCDxNYUQE&quot;, &quot;mh_ZAX9bfDJVRU4yBZVJBjYHrSpWqEfjvTmjhRReAxMH1Tb4aX6D&quot;] }}"},{"ref":"Core.Chain.html#get_key_block/2","title":"Core.Chain.get_key_block/2","type":"function","doc":"Get a key block by height Example iex&gt; key_block_height = 84547 iex&gt; Core.Chain.get_key_block(client, key_block_height) {:ok, %{ beneficiary: &quot;ak_2iBPH7HUz3cSDVEUWiHg76MZJ6tZooVNBmmxcgVK6VV8KAE688&quot;, hash: &quot;kh_2XteYFUyUYjnMDJzHszhHegpoV59QpWTLnMPw5eohsXntzdf6P&quot;, height: 84547, info: &quot;cb_AAAAAfy4hFE=&quot;, miner: &quot;ak_HvaKBash8o8FEKVdm5a8qo2j8vx5NKxH2P4RrQMQGokdjo5C2&quot;, nonce: 2093870402648332570, pow: [1290617, 3493169, 6212474, 17228667, 52038371, 120922973, 138413619, 159935660, 177319436, 178097802, 207343351, 226920891, 291582142, 313980921, 320129338, 320796969, 332416956, 346721320, 348325254, 351068507, 362644921, 374166089, 393961637, 393998472, 398351923, 398567840, 405562469, 408022294, 408391855, 450435185, 451429065, 451522379, 462140541, 490201848, 500060148, 508150414, 508157410, 508331280, 510140909, 516740832, 523867648, ...], prev_hash: &quot;kh_PP5rx6mi69FUhBCyDNtaFkitSaENZ1PTHpsmE5d5JGZCLAzZJ&quot;, prev_key_hash: &quot;kh_PP5rx6mi69FUhBCyDNtaFkitSaENZ1PTHpsmE5d5JGZCLAzZJ&quot;, state_hash: &quot;bs_2V6HE7ZPTrJeA5tuhefgZZKmFAhRHtrE6CTnyB3THucfX3BPdC&quot;, target: 538124450, time: 1558614076955, version: 3 }}"},{"ref":"Core.Chain.html#get_micro_block_header/2","title":"Core.Chain.get_micro_block_header/2","type":"function","doc":"Get a micro block&#39;s header Example iex&gt; micro_block_hash = &quot;mh_2GYkXiDbKGd9bMWL63AiaRbKRNDDHR8womVFzxk5BZP4KGQhgw&quot; iex&gt; Core.Chain.get_micro_block_header(client, micro_block_hash) {:ok, %{ hash: &quot;mh_2GYkXiDbKGd9bMWL63AiaRbKRNDDHR8womVFzxk5BZP4KGQhgw&quot;, height: 84547, pof_hash: &quot;no_fraud&quot;, prev_hash: &quot;kh_2XteYFUyUYjnMDJzHszhHegpoV59QpWTLnMPw5eohsXntzdf6P&quot;, prev_key_hash: &quot;kh_2XteYFUyUYjnMDJzHszhHegpoV59QpWTLnMPw5eohsXntzdf6P&quot;, signature: &quot;sg_RJN8idvktDbCMmFh1V3pmCaGBcvDNrv4vQ8X8Jbad8oxAuqzHm6Pe4VZxpvrDsopayfVjHDMNz36rPVg2iMTyuoaaxwLg&quot;, state_hash: &quot;bs_AJscRW9ArzMaWKHqPGGCiDhe7SxnF8a4AdWX2gdjhcEpFbS6x&quot;, time: 1558614125599, txs_hash: &quot;bx_22QhAmqifutmQ8g7x8kPPvxEANMqiqMwDBAsw7HqzWGxe93tHD&quot;, version: 3 }}"},{"ref":"Core.Chain.html#get_micro_block_transactions/2","title":"Core.Chain.get_micro_block_transactions/2","type":"function","doc":"Get a micro block&#39;s transactions Example iex&gt; micro_block_hash = &quot;mh_2GYkXiDbKGd9bMWL63AiaRbKRNDDHR8womVFzxk5BZP4KGQhgw&quot; iex&gt; Core.Chain.get_micro_block_transactions(client, micro_block_hash) {:ok, [ %{ block_hash: &quot;mh_2GYkXiDbKGd9bMWL63AiaRbKRNDDHR8womVFzxk5BZP4KGQhgw&quot;, block_height: 84547, hash: &quot;th_2J8Xshv3yR8Rf8mEmUSoT6fk4YJz5oGbpLLqJkPAvV1GWeTK6A&quot;, signatures: [&quot;sg_PQffTEQQkf2DPthE2QoeRqAUr53m5BszPBGRrdH21Nfbb1s6SFLyckb9TvNPcWy37sBY5YABNsvvJJFdvetHntAkiXrsM&quot;], tx: %{type: &quot;ContractCreateTx&quot;, version: 1} } ]}"},{"ref":"Core.Chain.html#get_node_info/1","title":"Core.Chain.get_node_info/1","type":"function","doc":"Get node&#39;s info Example iex&gt; Core.Chain.get_node_info(client) {:ok, %{ node_beneficiary: &quot;ak_2iBPH7HUz3cSDVEUWiHg76MZJ6tZooVNBmmxcgVK6VV8KAE688&quot;, node_pubkey: &quot;ak_24eXUB8mKvfHWhLrRVYC8cx2GXqKqZcTDyAequLkhJiyxrhVcq&quot;, peer_pubkey: &quot;pp_RK92f7wt27WbYijumNi69C1YvgRMfSZxBxn3KeGvGTF5sCFBq&quot;, peers: %{ blocked: [], peers: [&quot;aenode://pp_DMLqy7Zuhoxe2FzpydyQTgwCJ52wouzxtHWsPGo51XDcxc5c8@13.53.161.215:3015&quot;, &quot;aenode://pp_FhecVAucSqWJuMKt8vwsrC14G6Cizet9TppFep1PpGLQwQSpw@13.229.148.230:3015&quot;, &quot;aenode://pp_RMzsjgNLZMabSns3gWykAUWQaz218zaUzcQqLCtkbH5mQDGp8@54.245.137.153:3015&quot;, &quot;aenode://pp_auNgNxce82JNFd33Z4UVoDvNUJEaSUowwW37v681wMnZgsPfw@34.212.120.93:3015&quot;, &quot;aenode://pp_27xmgQ4N1E3QwHyoutLtZsHW5DSW4zneQJ3CxT5JbUejxtFuAu@13.250.162.250:3015&quot;, &quot;aenode://pp_2JREXVhMur6RHVDPnEomoc8EP1cgmWdgrJMh9Z7j7a7yebAEKs@52.57.34.16:3015&quot;, &quot;aenode://pp_2aKzR7Bnz53amwA1oU55nkkKFD19THF3oxVDudLiksVh52Sypb@3.0.201.37:3015&quot;, &quot;aenode://pp_2beMZ7ULM3jye6hdSFVtWmBFRpG1mTevDZ4XNDPfKCgpzqH2Ns@3.122.192.245:3015&quot;, &quot;aenode://pp_2vFiJ3LMWVchceNnBPQV3p1fzj4Zd4voCQKNKaU16c3M4UCJok@18.236.142.145:3015&quot;, &quot;aenode://pp_2vhFb3HtHd1S7ynbpbFnEdph1tnDXFSfu4NGtq46S2eM5HCdbC@18.195.109.60:3015&quot;] }, status: %{ difficulty: 252791033, genesis_key_block_hash: &quot;kh_wUCideEB8aDtUaiHCtKcfywU6oHZW6gnyci8Mw6S1RSTCnCRu&quot;, listening: true, network_id: &quot;ae_uat&quot;, node_revision: &quot;a267159203252ddd6964f49e9125f32bce1efbb0&quot;, node_version: &quot;3.0.0-rc.1&quot;, peer_count: 8841, pending_transactions_count: 0, protocols: [ %{effective_at_height: 82900, version: 3}, %{effective_at_height: 40900, version: 2}, %{effective_at_height: 0, version: 1} ], solutions: 0, sync_progress: 100.0, syncing: false } }}"},{"ref":"Core.Chain.html#get_pending_transactions/1","title":"Core.Chain.get_pending_transactions/1","type":"function","doc":"Get all pending transactions Example iex&gt; Core.Chain.get_pending_transactions(client) {:ok, []}"},{"ref":"Core.Chain.html#get_transaction/2","title":"Core.Chain.get_transaction/2","type":"function","doc":"Get a transaction by hash Example iex&gt; tx_hash = &quot;th_6FbthJ3jF2AE6z2SywBtg764tNK9LiBCxRW3RfWhMX68JAygz&quot; iex&gt; Core.Chain.get_transaction(client, tx_hash) {:ok, %{ block_hash: &quot;mh_bZUgGMEvu8kaAEv47xyatNfstvoH54VbrCb93y8J44gr2EsCJ&quot;, block_height: 84531, hash: &quot;th_6FbthJ3jF2AE6z2SywBtg764tNK9LiBCxRW3RfWhMX68JAygz&quot;, signatures: [&quot;sg_R4q5gvb5c9VgwZPt7zLgPJLV4HFNv6ZHzwBVpKaA1ygApq6JBA1NSDsXPa9WLsrm2nGG5BrCy8iq11xGaSbsppzLZycts&quot;], tx: %{type: &quot;SpendTx&quot;, version: 1} }}"},{"ref":"Core.Chain.html#get_transaction_info/2","title":"Core.Chain.get_transaction_info/2","type":"function","doc":"Get a transaction info by hash Example iex&gt; tx_hash = &quot;th_2jg2P41iGUgNif3Nu1vZ34P1aeSeZq4CWtKhEpr6jeLDoTL4mH&quot; iex&gt; Core.Chain.get_transaction_info(client, tx_hash) {:ok, %{ call_info: %{ caller_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, caller_nonce: 11837, contract_id: &quot;ct_Y5Fjymet5kcequZTNNMjMTUaTnYBWBFsVmoPUGnKCyPsfnDg8&quot;, gas_price: 1000000000, gas_used: 1252, height: 84513, log: [], return_type: &quot;ok&quot;, return_value: &quot;cb_Xfbg4g==&quot; }, ga_info: nil, tx_info: nil }}"},{"ref":"Core.Chain.html#height/1","title":"Core.Chain.height/1","type":"function","doc":"Get the height of the current key block Example iex&gt; Core.Chain.height(client) {:ok, 84535}"},{"ref":"Core.Chain.html#t:await_options/0","title":"Core.Chain.await_options/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:dry_run_account/0","title":"Core.Chain.dry_run_account/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:dry_run_result/0","title":"Core.Chain.dry_run_result/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:event/0","title":"Core.Chain.event/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:generation/0","title":"Core.Chain.generation/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:generic_signed_transaction/0","title":"Core.Chain.generic_signed_transaction/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:generic_transaction/0","title":"Core.Chain.generic_transaction/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:key_block/0","title":"Core.Chain.key_block/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:micro_block_header/0","title":"Core.Chain.micro_block_header/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:node_info/0","title":"Core.Chain.node_info/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:peers/0","title":"Core.Chain.peers/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:protocol/0","title":"Core.Chain.protocol/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:status/0","title":"Core.Chain.status/0","type":"type","doc":""},{"ref":"Core.Chain.html#t:transaction_info/0","title":"Core.Chain.transaction_info/0","type":"type","doc":""},{"ref":"Core.Client.html","title":"Core.Client","type":"module","doc":"Contains the Client structure, holding all the data that is needed in order to use the SDK."},{"ref":"Core.Client.html#new/5","title":"Core.Client.new/5","type":"function","doc":"Client constructor Example iex&gt; public_key = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; secret_key = &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; iex&gt; network_id = &quot;ae_uat&quot; iex&gt; url = &quot;https://sdk-testnet.aepps.com/v2&quot; iex&gt; internal_url = &quot;https://sdk-testnet.aepps.com/v2&quot; iex&gt; Core.Client.new(%{public: public_key, secret: secret_key}, network_id, url, internal_url) %Core.Client{ connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [ {Tesla.Middleware.BaseUrl, :call, [&quot;https://sdk-testnet.aepps.com/v2&quot;]} ] }, gas_price: 0, internal_connection: %Tesla.Client{ adapter: nil, fun: nil, post: [], pre: [ {Tesla.Middleware.BaseUrl, :call, [&quot;https://sdk-testnet.aepps.com/v2&quot;]} ] }, keypair: %{ secret: &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot;, public: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; }, network_id: &quot;ae_uat&quot; }"},{"ref":"Core.Client.html#t:keypair/0","title":"Core.Client.keypair/0","type":"type","doc":""},{"ref":"Core.Client.html#t:t/0","title":"Core.Client.t/0","type":"type","doc":""},{"ref":"Core.Contract.html","title":"Core.Contract","type":"module","doc":"Contains all contract-related functionality. In order for its functions to be used, a client must be defined first. Client example can be found at: Core.Client.new/4."},{"ref":"Core.Contract.html#call/6","title":"Core.Contract.call/6","type":"function","doc":"Call a contract Example iex&gt; contract_address = &quot;ct_2sZ43ScybbzKkd4iFMuLJw7uQib1dpUB8VDi9pLkALV5BpXXNR&quot; iex&gt; source_code = &quot;contract Identity = datatype event = AddedNumberEvent(indexed int, string) record state = { number : int } function init(x : int) = { number = x } function add_to_number(x : int) = Chain.event(AddedNumberEvent(x, &quot;Added a number&quot;)) state.number + x&quot; iex&gt; function_name = &quot;add_to_number&quot; iex&gt; function_args = [&quot;33&quot;] iex&gt; Core.Contract.call(client, contract_address, source_code, function_name, function_args) {:ok, %{ block_hash: &quot;mh_2uzSrRdURXy4ATwCo3XpeSngH9ECXhkBj3MWEYFatqK4pJgFWG&quot;, block_height: 86362, log: [ %{ address: &quot;ct_2XphkkmsJAbR4NbSpYFgHPgzfpveKRA9FFTJmp6jX8JRqnveeD&quot;, data: &quot;Added a number&quot;, topics: [100006271334006235721916574864225776454052674644157840164656436983196903186403, 33] } ], return_type: &quot;ok&quot;, return_value: 75, tx_hash: &quot;th_CpexcQGiM86HVtHR6HTzYc3HoakXW2Xjm77wVKctoZmxTH52u&quot; }}"},{"ref":"Core.Contract.html#call_static/6","title":"Core.Contract.call_static/6","type":"function","doc":"Call a contract without posting a transaction (execute off-chain) Example iex&gt; contract_address = &quot;ct_2sZ43ScybbzKkd4iFMuLJw7uQib1dpUB8VDi9pLkALV5BpXXNR&quot; iex&gt; source_code = &quot;contract Number = record state = { number : int } function init(x : int) = { number = x } function add_to_number(x : int) = state.number + x&quot; iex&gt; function_name = &quot;add_to_number&quot; iex&gt; function_args = [&quot;33&quot;] iex&gt; top_block_hash = &quot;kh_WPQzXtyDiwvUs54N1L88YsLPn51PERHF76bqcMhpT5vnrAEAT&quot; iex&gt; Core.Contract.call_static(client, contract_address, source_code, function_name, function_args, [top: top_block_hash]) {:ok, %{ return_type: &quot;ok&quot;, return_value: 75, log: [] }}"},{"ref":"Core.Contract.html#compile/1","title":"Core.Contract.compile/1","type":"function","doc":"Compile a contract Example iex&gt; source_code = &quot;contract Number = record state = { number : int } function init(x : int) = { number = x } function add_to_number(x : int) = state.number + x&quot; iex&gt; Core.Contract.compile(source_code) {:ok, %{ byte_code: &lt;&lt;98, 0, 0, 100, 98, 0, 0, 151, 145, 128, 128, 128, 81, 127, 112, 194, 27, 63, 171, 248, 210, 119, 144, 238, 34, 30, 100, 222, 2, 111, 12, 11, 11, 82, 86, 82, 53, 206, 145, 155, 60, 13, 206, 214, 183, 62, 20, 98, 0, 0, 242, 87, 80, 128, 81, 127, 226, 35, 29, 108, 223, 201, 57, 22, 222, 76, 179, 169, 133, 123, 246, 92, 244, 15, 194, 86, 244, 161, 73, 139, 63, 126, 124, 152, 12, 25, 147, 68, 20, 98, 0, 0, 170, 87, 80, 96, 1, 25, 81, 0, 91, 96, 0, 25, 89, 96, 32, 1, 144, 129, 82, 96, 32, 144, 3, 96, 0, 89, 144, 129, 82, 129, 82, 89, 96, 32, 1, 144, 129, 82, 96, 32, 144, 3, 96, 3, 129, 82, 144, 89, 96, 0, 81, 89, 82, 96, 0, 82, 96, 0, 243, 91, 96, 0, 128, 82, 96, 0, 243, 91, 128, 96, 0, 81, 81, 1, 144, 80, 144, 86, 91, 96, 32, 1, 81, 81, 131, 146, 80, 128, 145, 80, 80, 128, 89, 144, 129, 82, 89, 96, 32, 1, 144, 129, 82, 96, 32, 144, 3, 96, 0, 25, 89, 96, 32, 1, 144, 129, 82, 96, 32, 144, 3, 96, 0, 89, 144, 129, 82, 129, 82, 89, 96, 32, 1, 144, 129, 82, 96, 32, 144, 3, 96, 3, 129, 82, 129, 82, 144, 80, 144, 86, 91, 96, 32, 1, 81, 81, 144, 80, 89, 80, 128, 145, 80, 80, 98, 0, 0, 159, 86&gt;&gt;, compiler_version: &quot;3.0.0&quot;, contract_source: &#39;contract Number = record state = { number : int } function init(x : int) = { number = x } function add_to_number(x : int) = state.number + x&#39;, type_info: [ {&lt;&lt;112, 194, 27, 63, 171, 248, 210, 119, 144, 238, 34, 30, 100, 222, 2, 111, 12, 11, 11, 82, 86, 82, 53, 206, 145, 155, 60, 13, 206, 214, 183, 62&gt;&gt;, &quot;add_to_number&quot;, &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&gt;&gt;, &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&gt;&gt;}, {&lt;&lt;226, 35, 29, 108, 223, 201, 57, 22, 222, 76, 179, 169, 133, 123, 246, 92, 244, 15, 194, 86, 244, 161, 73, 139, 63, 126, 124, 152, 12, 25, 147, 68&gt;&gt;, &quot;init&quot;, &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&gt;&gt;, &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&gt;&gt;} ] }}"},{"ref":"Core.Contract.html#create_calldata/3","title":"Core.Contract.create_calldata/3","type":"function","doc":"Create contract calldata Example iex&gt; source_code = &quot;contract Number = record state = { number : int } function init(x : int) = { number = x } function add_to_number(x : int) = state.number + x&quot; iex&gt; function_name = &quot;init&quot; iex&gt; function_args = [&quot;42&quot;] iex&gt; Core.Contract.create_calldata(source_code, function_name, function_args) {:ok, &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 226, 35, 29, 108, 223, 201, 57, 22, 222, 76, 179, 169, 133, 123, 246, 92, 244, 15, 194, 86, 244, 161, 73, 139, 63, 126, 124, 152, 12, 25, 147, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42&gt;&gt;}"},{"ref":"Core.Contract.html#decode_return_value/3","title":"Core.Contract.decode_return_value/3","type":"function","doc":"Decode a return value Example iex&gt; sophia_type = &quot;int&quot; iex&gt; return_value = &quot;cb_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEvrXnzA&quot; iex&gt; return_type = &quot;ok&quot; iex&gt; Core.Contract.decode_return_value(sophia_type, return_value, return_type) {:ok, 75}"},{"ref":"Core.Contract.html#deploy/4","title":"Core.Contract.deploy/4","type":"function","doc":"Deploy a contract Example iex&gt; source_code = &quot;contract Number = record state = { number : int } function init(x : int) = { number = x } function add_to_number(x : int) = state.number + x&quot; iex&gt; init_args = [&quot;42&quot;] iex&gt; Core.Contract.deploy(client, source_code, init_args) {:ok, %{ block_hash: &quot;mh_6fEZ9CCPNXxyjpKwSjkihv2UA5voRKCBpvrK24gK38zkZZB5Q&quot;, block_height: 86362, contract_id: &quot;ct_2XphkkmsJAbR4NbSpYFgHPgzfpveKRA9FFTJmp6jX8JRqnveeD&quot;, log: [], return_type: &quot;ok&quot;, return_value: &quot;cb_Xfbg4g==&quot;, tx_hash: &quot;th_CGCF321Sz8zWPMpSpa28gk3jDvvzeda8edhNhmnLgUvFYi14U&quot; }}"},{"ref":"Core.Contract.html#get_function_return_type/2","title":"Core.Contract.get_function_return_type/2","type":"function","doc":"Get the return type of a function in a contract Example iex&gt; source_code = &quot;contract Identity = record state = { number : int } function init(x : int) = { number = x } function add_to_number(x : int) = state.number + x&quot; iex&gt; function_name = &quot;add_to_number&quot; iex&gt; Core.Contract.get_function_return_type(source_code, function_name) {:ok, &quot;int&quot;}"},{"ref":"Core.Contract.html#t:call_options/0","title":"Core.Contract.call_options/0","type":"type","doc":""},{"ref":"Core.Contract.html#t:deploy_options/0","title":"Core.Contract.deploy_options/0","type":"type","doc":""},{"ref":"Core.Oracle.html","title":"Core.Oracle","type":"module","doc":"Module for oracle interaction, see: https://github.com/aeternity/protocol/blob/master/oracles/oracles.md."},{"ref":"Core.Oracle.html#extend/4","title":"Core.Oracle.extend/4","type":"function","doc":"Extend the TTL of an oracle by a relative amount. Example iex&gt; oracle_id = &quot;ok_4K1dYTkXcLwoUEat9fMgVp3RrG3HTD51v4VzszYDgt2MqxzKM&quot; iex&gt; ttl = 10 iex&gt; Core.Oracle.extend(client, oracle_id, ttl) {:ok, %{ block_hash: &quot;mh_21HxnSLJRhqB9S3aUfLDAqR3BMFKPj62vT1zuy1MsS7N4Ps94s&quot;, block_height: 77276, tx_hash: &quot;th_3911tboNbJWA6X57tejX8yGQALdeqAQECk1BwyS43pPtEXt4C&quot; }}"},{"ref":"Core.Oracle.html#get_oracle/2","title":"Core.Oracle.get_oracle/2","type":"function","doc":"Get an oracle object. Example iex&gt; oracle_id = &quot;ok_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; Core.Oracle.get_oracle(client, oracle_id) {:ok, %{ abi_version: 1, id: &quot;ok_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, query_fee: 30, query_format: &quot;cb_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATWiO1g==&quot;, response_format: &quot;cb_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATWiO1g==&quot;, ttl: 77316 }}"},{"ref":"Core.Oracle.html#get_queries/2","title":"Core.Oracle.get_queries/2","type":"function","doc":"Get all queries of an oracle. Example iex&gt; oracle_id = &quot;ok_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; Core.Oracle.get_queries(client, oracle_id) {:ok, [ %{ fee: 30, id: &quot;oq_253A8BSZqUofetC5U9DqdJfYAcF5SHi6DPr5gPPSrayP8cwSUP&quot;, oracle_id: &quot;ok_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, query: %{&quot;a&quot; =&gt; 1}, query_ttl: 83952, response: &quot;&quot;, response_ttl: 1, sender_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, sender_nonce: 11662 } ]}"},{"ref":"Core.Oracle.html#get_query/3","title":"Core.Oracle.get_query/3","type":"function","doc":"Get an oracle query by its ID. Example iex&gt; oracle_id = &quot;ok_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; query_id = &quot;oq_253A8BSZqUofetC5U9DqdJfYAcF5SHi6DPr5gPPSrayP8cwSUP&quot; iex&gt; Core.Oracle.get_query(client, oracle_id, query_id) {:ok, %{ fee: 30, id: &quot;oq_253A8BSZqUofetC5U9DqdJfYAcF5SHi6DPr5gPPSrayP8cwSUP&quot;, oracle_id: &quot;ok_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, query: %{&quot;a&quot; =&gt; 1}, query_ttl: 83952, response: &quot;&quot;, response_ttl: 1, sender_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, sender_nonce: 11662 }}"},{"ref":"Core.Oracle.html#query/6","title":"Core.Oracle.query/6","type":"function","doc":"Query an oracle. Keep in mind that the response TTL is always relative, and that the sum of the relative query and response TTL can&#39;t be higher than the oracle&#39;s TTL. Example iex&gt; oracle_id = &quot;ok_4K1dYTkXcLwoUEat9fMgVp3RrG3HTD51v4VzszYDgt2MqxzKM&quot; iex&gt; query = &quot;a query&quot; iex&gt; query_ttl = %{type: :relative, value: 10} iex&gt; response_ttl = 10 iex&gt; Core.Oracle.query(client, oracle_id, query, query_ttl, response_ttl) {:ok, %{ block_hash: &quot;mh_2SgSB1yeekq8JseSfkKhAPuvs7RF3YUjm896g4aj2GPpSa9AnJ&quot;, block_height: 77276, query_id: &quot;oq_u7sgmMQNjZQ4ffsN9sSmEhzqsag1iEfx8SkHDeG1y8EbDB5Aq&quot;, tx_hash: &quot;th_2esUdavCBmW1oYSCichdQv3txyWXYsDSAum2jAvQfpgktJ4oEt&quot; }}"},{"ref":"Core.Oracle.html#register/6","title":"Core.Oracle.register/6","type":"function","doc":"Register a typed oracle. Queries and responses that don&#39;t follow the oracle&#39;s respective formats are invalid. The query and response types are sophia types. Example iex&gt; query_format = &quot;string&quot; iex&gt; response_format = &quot;map(string, string)&quot; iex&gt; oracle_ttl = %{type: :relative, value: 10} iex&gt; query_fee = 100 iex&gt; Core.Oracle.register(client, query_format, response_format, oracle_ttl, query_fee) {:ok, %{ block_hash: &quot;mh_5zfVXCDwsBRjukTPjKRaS7T3TCc4Mn5PMTS19cWbcjRjeXjcF&quot;, block_height: 77276, oracle_id: &quot;ok_4K1dYTkXcLwoUEat9fMgVp3RrG3HTD51v4VzszYDgt2MqxzKM&quot;, tx_hash: &quot;th_21qrcDco5fL1cuaNqM1Ug1ojHiSzjnuEYzVEpwxVwuS2V95qBk&quot; }}"},{"ref":"Core.Oracle.html#respond/6","title":"Core.Oracle.respond/6","type":"function","doc":"Respond to an oracle query. Only the oracle&#39;s owner can respond to its queries. Example iex&gt; oracle_id = &quot;ok_4K1dYTkXcLwoUEat9fMgVp3RrG3HTD51v4VzszYDgt2MqxzKM&quot; iex&gt; query_id = &quot;oq_u7sgmMQNjZQ4ffsN9sSmEhzqsag1iEfx8SkHDeG1y8EbDB5Aq&quot; iex&gt; response = %{&quot;a&quot; =&gt; &quot;response&quot;} iex&gt; query_ttl = %{type: :relative, value: 10} iex&gt; response_ttl = 10 iex&gt; Core.Oracle.respond(client, oracle_id, response, response_ttl) {:ok, %{ block_hash: &quot;mh_QTXMDn8Ln6fiBBXByXJkEeD6wq6QzQZHMVuApbouTFaqWMkSt&quot;, block_height: 77276, tx_hash: &quot;th_2cBk9pBEwMSD3xtYMvrsFWJ3atuGN29XQUZfKV65KYMQuPJLiV&quot; }}"},{"ref":"Core.Oracle.html#t:oracle_options/0","title":"Core.Oracle.oracle_options/0","type":"type","doc":""},{"ref":"Core.Oracle.html#t:query_options/0","title":"Core.Oracle.query_options/0","type":"type","doc":""},{"ref":"Core.Oracle.html#t:sophia_data/0","title":"Core.Oracle.sophia_data/0","type":"type","doc":""},{"ref":"Core.Oracle.html#t:sophia_type/0","title":"Core.Oracle.sophia_type/0","type":"type","doc":"See https://github.com/aeternity/protocol/blob/master/contracts/sophia.md#types"},{"ref":"Core.Oracle.html#t:ttl/0","title":"Core.Oracle.ttl/0","type":"type","doc":""},{"ref":"Core.Oracle.html#t:ttl_type/0","title":"Core.Oracle.ttl_type/0","type":"type","doc":""},{"ref":"Utils.Account.html","title":"Utils.Account","type":"module","doc":"Account utils."},{"ref":"Utils.Account.html#next_valid_nonce/2","title":"Utils.Account.next_valid_nonce/2","type":"function","doc":"Get the next valid nonce for a public key Example iex&gt; connection = AeternityNode.Connection.new(&quot;https://sdk-testnet.aepps.com/v2&quot;) iex&gt; public_key = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; Utils.Account.next_valid_nonce(connection, public_key) {:ok, 8544}"},{"ref":"Utils.Account.html#nonce_at_hash/3","title":"Utils.Account.nonce_at_hash/3","type":"function","doc":"Get the nonce after a block indicated by hash Example iex&gt; connection = AeternityNode.Connection.new(&quot;https://sdk-testnet.aepps.com/v2&quot;) iex&gt; public_key = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; block_hash = &quot;kh_WPQzXtyDiwvUs54N1L88YsLPn51PERHF76bqcMhpT5vnrAEAT&quot; iex&gt; Utils.Account.nonce_at_hash(connection, public_key, block_hash) {:ok, 8327}"},{"ref":"Utils.Chain.html","title":"Utils.Chain","type":"module","doc":"Chain utils."},{"ref":"Utils.Chain.html#get_top_block_hash/1","title":"Utils.Chain.get_top_block_hash/1","type":"function","doc":"Get the hash of the current top block Example iex&gt; connection = AeternityNode.Connection.new(&quot;https://sdk-testnet.aepps.com/v2&quot;) iex&gt; Utils.Chain.get_top_block_hash(connection) {:ok, &quot;kh_7e74Hs2ThcNdjFD1i5XngUbzTHgmXn9jTaXSej1XKio7rkpgM&quot;}"},{"ref":"Utils.Encoding.html","title":"Utils.Encoding","type":"module","doc":"Contains encoding/decoding utils, see: https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md."},{"ref":"Utils.Encoding.html#decode_base58c/1","title":"Utils.Encoding.decode_base58c/1","type":"function","doc":"Decode a base58check string to binary iex&gt; Utils.Encoding.decode_base58c(&quot;2XEob1Ub1DWCzeMLm1CWQKrUBsVfF9zLZBDaUXiu6Lr1qLn55n&quot;) &lt;&lt;200, 90, 234, 160, 66, 120, 244, 87, 88, 94, 87, 208, 13, 42, 126, 71, 172, 2, 81, 252, 214, 24, 155, 227, 26, 49, 210, 31, 106, 147, 200, 81&gt;&gt;"},{"ref":"Utils.Encoding.html#decode_base64/1","title":"Utils.Encoding.decode_base64/1","type":"function","doc":"Decode a base64 string to binary Example iex&gt; Utils.Encoding.decode_base64(&quot;+JwLAfhCuEDvqFLqm4nJBGWKah0RlZeqtTew3r1Nf+NOyv0Gn+uMKaVNeJGXrbM3Soot0EuKOOOlwxiTfr/O0qGqV4jlHgYCuFT4UgwBoQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoKh3BheWxvYWRdSVlidOin1A==&quot;) &lt;&lt;248, 156, 11, 1, 248, 66, 184, 64, 239, 168, 82, 234, 155, 137, 201, 4, 101, 138, 106, 29, 17, 149, 151, 170, 181, 55, 176, 222, 189, 77, 127, 227, 78, 202, 253, 6, 159, 235, 140, 41, 165, 77, 120, 145, 151, 173, 179, 55, 74, 138, 45, 208, 75, 138, 56, 227, 165, 195, 24, 147, 126, 191, 206, 210, 161, 170, 87, 136, 229, 30, 6, 2, 184, 84, 248, 82, 12, 1, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 135, 112, 97, 121, 108, 111, 97, 100, 93, 73, 89, 98&gt;&gt;"},{"ref":"Utils.Encoding.html#encode_base58c/1","title":"Utils.Encoding.encode_base58c/1","type":"function","doc":"Encode a binary payload to base58check Example iex&gt; Utils.Encoding.encode_base58c(&lt;&lt;200, 90, 234, 160, 66, 120, 244, 87, 88, 94, 87, 208, 13, 42, 126, 71, 172, 2, 81, 252, 214, 24, 155, 227, 26, 49, 210, 31, 106, 147, 200, 81&gt;&gt;) &quot;2XEob1Ub1DWCzeMLm1CWQKrUBsVfF9zLZBDaUXiu6Lr1qLn55n&quot;"},{"ref":"Utils.Encoding.html#encode_base64/1","title":"Utils.Encoding.encode_base64/1","type":"function","doc":"Encode a binary payload to base64 Example iex&gt; Utils.Encoding.encode_base64(&lt;&lt;248, 156, 11, 1, 248, 66, 184, 64, 239, 168, 82, 234, 155, 137, 201, 4, 101, 138, 106, 29, 17, 149, 151, 170, 181, 55, 176, 222, 189, 77, 127, 227, 78, 202, 253, 6, 159, 235, 140, 41, 165, 77, 120, 145, 151, 173, 179, 55, 74, 138, 45, 208, 75, 138, 56, 227, 165, 195, 24, 147, 126, 191, 206, 210, 161, 170, 87, 136, 229, 30, 6, 2, 184, 84, 248, 82, 12, 1, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 135, 112, 97, 121, 108, 111, 97, 100, 93, 73, 89, 98&gt;&gt;) &quot;+JwLAfhCuEDvqFLqm4nJBGWKah0RlZeqtTew3r1Nf+NOyv0Gn+uMKaVNeJGXrbM3Soot0EuKOOOlwxiTfr/O0qGqV4jlHgYCuFT4UgwBoQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoKh3BheWxvYWRdSVlidOin1A==&quot;"},{"ref":"Utils.Encoding.html#prefix_decode_base58c/1","title":"Utils.Encoding.prefix_decode_base58c/1","type":"function","doc":"Decode a base58check string to binary and remove its prefix Example iex&gt; Utils.Encoding.prefix_decode_base58c(&quot;ak_2XEob1Ub1DWCzeMLm1CWQKrUBsVfF9zLZBDaUXiu6Lr1qLn55n&quot;) &lt;&lt;200, 90, 234, 160, 66, 120, 244, 87, 88, 94, 87, 208, 13, 42, 126, 71, 172, 2, 81, 252, 214, 24, 155, 227, 26, 49, 210, 31, 106, 147, 200, 81&gt;&gt;"},{"ref":"Utils.Encoding.html#prefix_decode_base64/1","title":"Utils.Encoding.prefix_decode_base64/1","type":"function","doc":"Decode a base64 string to binary and remove its prefix Example iex&gt; Utils.Encoding.prefix_decode_base64(&quot;tx_+JwLAfhCuEDvqFLqm4nJBGWKah0RlZeqtTew3r1Nf+NOyv0Gn+uMKaVNeJGXrbM3Soot0EuKOOOlwxiTfr/O0qGqV4jlHgYCuFT4UgwBoQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoKh3BheWxvYWRdSVlidOin1A==&quot;) &lt;&lt;248, 156, 11, 1, 248, 66, 184, 64, 239, 168, 82, 234, 155, 137, 201, 4, 101, 138, 106, 29, 17, 149, 151, 170, 181, 55, 176, 222, 189, 77, 127, 227, 78, 202, 253, 6, 159, 235, 140, 41, 165, 77, 120, 145, 151, 173, 179, 55, 74, 138, 45, 208, 75, 138, 56, 227, 165, 195, 24, 147, 126, 191, 206, 210, 161, 170, 87, 136, 229, 30, 6, 2, 184, 84, 248, 82, 12, 1, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 135, 112, 97, 121, 108, 111, 97, 100, 93, 73, 89, 98&gt;&gt;"},{"ref":"Utils.Encoding.html#prefix_encode_base58c/2","title":"Utils.Encoding.prefix_encode_base58c/2","type":"function","doc":"Encode a binary payload to base58check and add a string prefix Example iex&gt; prefix = &quot;ak&quot; iex&gt; binary = &lt;&lt;200, 90, 234, 160, 66, 120, 244, 87, 88, 94, 87, 208, 13, 42, 126, 71, 172, 2, 81, 252, 214, 24, 155, 227, 26, 49, 210, 31, 106, 147, 200, 81&gt;&gt; iex&gt; Utils.Encoding.prefix_encode_base58c(prefix, binary) &quot;ak_2XEob1Ub1DWCzeMLm1CWQKrUBsVfF9zLZBDaUXiu6Lr1qLn55n&quot;"},{"ref":"Utils.Encoding.html#prefix_encode_base64/2","title":"Utils.Encoding.prefix_encode_base64/2","type":"function","doc":"Encode a binary payload to base64 and add a string prefix Example iex&gt; prefix = &quot;tx&quot; iex&gt; binary = &lt;&lt;248, 156, 11, 1, 248, 66, 184, 64, 239, 168, 82, 234, 155, 137, 201, 4, 101, 138, 106, 29, 17, 149, 151, 170, 181, 55, 176, 222, 189, 77, 127, 227, 78, 202, 253, 6, 159, 235, 140, 41, 165, 77, 120, 145, 151, 173, 179, 55, 74, 138, 45, 208, 75, 138, 56, 227, 165, 195, 24, 147, 126, 191, 206, 210, 161, 170, 87, 136, 229, 30, 6, 2, 184, 84, 248, 82, 12, 1, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 135, 112, 97, 121, 108, 111, 97, 100, 93, 73, 89, 98&gt;&gt; iex&gt; Utils.Encoding.prefix_encode_base64(prefix, binary) &quot;tx_+JwLAfhCuEDvqFLqm4nJBGWKah0RlZeqtTew3r1Nf+NOyv0Gn+uMKaVNeJGXrbM3Soot0EuKOOOlwxiTfr/O0qGqV4jlHgYCuFT4UgwBoQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoKh3BheWxvYWRdSVlidOin1A==&quot;"},{"ref":"Utils.Encoding.html#t:base58c/0","title":"Utils.Encoding.base58c/0","type":"type","doc":"A base58check string."},{"ref":"Utils.Encoding.html#t:base64/0","title":"Utils.Encoding.base64/0","type":"type","doc":"A base64 string."},{"ref":"Utils.Encoding.html#t:hex/0","title":"Utils.Encoding.hex/0","type":"type","doc":"A hexadecimal string."},{"ref":"Utils.Governance.html","title":"Utils.Governance","type":"module","doc":"Contains all constants and helper functions, related to blockchain."},{"ref":"Utils.Governance.html#byte_gas/0","title":"Utils.Governance.byte_gas/0","type":"function","doc":""},{"ref":"Utils.Governance.html#gas/1","title":"Utils.Governance.gas/1","type":"function","doc":""},{"ref":"Utils.Governance.html#min_gas_price/2","title":"Utils.Governance.min_gas_price/2","type":"function","doc":""},{"ref":"Utils.Governance.html#state_gas/2","title":"Utils.Governance.state_gas/2","type":"function","doc":""},{"ref":"Utils.Governance.html#state_gas_per_block/1","title":"Utils.Governance.state_gas_per_block/1","type":"function","doc":""},{"ref":"Utils.Governance.html#tx_base_gas/1","title":"Utils.Governance.tx_base_gas/1","type":"function","doc":""},{"ref":"Utils.Hash.html","title":"Utils.Hash","type":"module","doc":"Contains hash-related functions."},{"ref":"Utils.Hash.html#hash/1","title":"Utils.Hash.hash/1","type":"function","doc":"Calculate the BLAKE2b hash of a binary."},{"ref":"Utils.Hash.html#t:hash/0","title":"Utils.Hash.hash/0","type":"type","doc":""},{"ref":"Utils.Keys.html","title":"Utils.Keys","type":"module","doc":"Key generation, handling, encoding and crypto."},{"ref":"Utils.Keys.html#generate_keypair/0","title":"Utils.Keys.generate_keypair/0","type":"function","doc":"Generate a Curve25519 keypair Example iex&gt; Utils.Keys.generate_keypair() %{ public: &quot;ak_Q9DozPaq7fZ9WnB8SwNxuniaWwUmp1M7HsFTgCdJSsU2kKtC4&quot;, secret: &quot;227bdeedb4c3dd2b554ea6b448ac6788fbe66df1b4f87093a450bba748f296f5348bd07453735393e2ff8c03c65b4593f3bdd94f957a2e7cb314688b53441280&quot; }"},{"ref":"Utils.Keys.html#public_key_from_binary/1","title":"Utils.Keys.public_key_from_binary/1","type":"function","doc":"Convert a binary public key to a base58check string Example iex&gt; binary_public_key = &lt;&lt;253, 16, 150, 32, 125, 62, 136, 112, 145, 227, 193, 26, 149, 60, 2, 56, 190, 47, 157, 115, 126, 32, 118, 191, 137, 134, 107, 183, 134, 188, 15, 191&gt;&gt; iex&gt; Utils.Keys.public_key_from_binary(binary_public_key) &quot;ak_2vTCdFVAvgkYUDiVpydmByybqSYZHEB189QcfjmdcxRef2W2eb&quot;"},{"ref":"Utils.Keys.html#public_key_to_binary/1","title":"Utils.Keys.public_key_to_binary/1","type":"function","doc":"Convert a base58check public key string to binary Example iex&gt; public_key = &quot;ak_2vTCdFVAvgkYUDiVpydmByybqSYZHEB189QcfjmdcxRef2W2eb&quot; iex&gt; Utils.Keys.public_key_to_binary(public_key) &lt;&lt;253, 16, 150, 32, 125, 62, 136, 112, 145, 227, 193, 26, 149, 60, 2, 56, 190, 47, 157, 115, 126, 32, 118, 191, 137, 134, 107, 183, 134, 188, 15, 191&gt;&gt; ```"},{"ref":"Utils.Keys.html#public_key_to_binary/2","title":"Utils.Keys.public_key_to_binary/2","type":"function","doc":"Convert a base58check public key string to tuple of prefix and binary Example iex&gt; public_key = &quot;ak_2vTCdFVAvgkYUDiVpydmByybqSYZHEB189QcfjmdcxRef2W2eb&quot; iex&gt; Utils.Keys.public_key_to_binary(public_key, :with_prefix) {&quot;ak_&quot;, &lt;&lt;253, 16, 150, 32, 125, 62, 136, 112, 145, 227, 193, 26, 149, 60, 2, 56, 190, 47, 157, 115, 126, 32, 118, 191, 137, 134, 107, 183, 134, 188, 15, 191&gt;&gt;} ```"},{"ref":"Utils.Keys.html#read_keypair/3","title":"Utils.Keys.read_keypair/3","type":"function","doc":"Attempt to read a keypair from a given path with the specified file name. If found, the keys will be decrypted with the password Example iex&gt; password = &quot;some password&quot; iex&gt; path = &quot;./keys&quot; iex&gt; name = &quot;key&quot; iex&gt; Utils.Keys.read_keypair(password, path, name) {:ok, %{ public: &quot;ak_2vTCdFVAvgkYUDiVpydmByybqSYZHEB189QcfjmdcxRef2W2eb&quot;, secret: &quot;f9cebe874d90626bfcea1093e72f22e500a92e95052b88aaebd5d30346132cb1fd1096207d3e887091e3c11a953c0238be2f9d737e2076bf89866bb786bc0fbf&quot; }}"},{"ref":"Utils.Keys.html#save_keypair/4","title":"Utils.Keys.save_keypair/4","type":"function","doc":"Save a keypair at a given path with the specified file name. The keys are encrypted with the password and saved as separate files - name for the private and { name }.pub for the public key Example iex&gt; keypair = Utils.Keys.generate_keypair() iex&gt; password = &quot;some password&quot; iex&gt; path = &quot;./keys&quot; iex&gt; name = &quot;key&quot; iex&gt; Utils.Keys.save_keypair(keypair, password, path, name) :ok"},{"ref":"Utils.Keys.html#secret_key_from_binary/1","title":"Utils.Keys.secret_key_from_binary/1","type":"function","doc":"Convert a binary private key to a hex string Example iex&gt; binary_secret_key = &lt;&lt;249, 206, 190, 135, 77, 144, 98, 107, 252, 234, 16, 147, 231, 47, 34, 229, 0, 169, 46, 149, 5, 43, 136, 170, 235, 213, 211, 3, 70, 19, 44, 177, 253, 16, 150, 32, 125, 62, 136, 112, 145, 227, 193, 26, 149, 60, 2, 56, 190, 47, 157, 115, 126, 32, 118, 191, 137, 134, 107, 183, 134, 188, 15, 191&gt;&gt; iex&gt; Utils.Keys.secret_key_from_binary(binary_secret_key) &quot;f9cebe874d90626bfcea1093e72f22e500a92e95052b88aaebd5d30346132cb1fd1096207d3e887091e3c11a953c0238be2f9d737e2076bf89866bb786bc0fbf&quot;"},{"ref":"Utils.Keys.html#secret_key_to_binary/1","title":"Utils.Keys.secret_key_to_binary/1","type":"function","doc":"Convert a hex string private key to binary Example iex&gt; secret_key = &quot;f9cebe874d90626bfcea1093e72f22e500a92e95052b88aaebd5d30346132cb1fd1096207d3e887091e3c11a953c0238be2f9d737e2076bf89866bb786bc0fbf&quot; iex&gt; Utils.Keys.secret_key_to_binary(secret_key) &lt;&lt;249, 206, 190, 135, 77, 144, 98, 107, 252, 234, 16, 147, 231, 47, 34, 229, 0, 169, 46, 149, 5, 43, 136, 170, 235, 213, 211, 3, 70, 19, 44, 177, 253, 16, 150, 32, 125, 62, 136, 112, 145, 227, 193, 26, 149, 60, 2, 56, 190, 47, 157, 115, 126, 32, 118, 191, 137, 134, 107, 183, 134, 188, 15, 191&gt;&gt;"},{"ref":"Utils.Keys.html#sign/2","title":"Utils.Keys.sign/2","type":"function","doc":"Sign a binary message with the given private key Example iex&gt; message = &quot;some message&quot; iex&gt; secret_key = &lt;&lt;34, 123, 222, 237, 180, 195, 221, 43, 85, 78, 166, 180, 72, 172, 103, 136,251, 230, 109, 241, 180, 248, 112, 147, 164, 80, 187, 167, 72, 242, 150, 245,52, 139, 208, 116, 83, 115, 83, 147, 226, 255, 140, 3, 198, 91, 69, 147, 243,189, 217, 79, 149, 122, 46, 124, 179, 20, 104, 139, 83, 68, 18, 128&gt;&gt; iex&gt; Utils.Keys.sign(message, secret_key) &lt;&lt;94, 26, 208, 168, 230, 154, 158, 226, 188, 217, 155, 170, 157, 33, 100, 22, 247, 171, 91, 120, 249, 52, 147, 194, 188, 1, 14, 5, 15, 166, 232, 202, 97, 96, 32, 32, 227, 151, 158, 216, 22, 68, 219, 5, 169, 229, 117, 147, 179, 43, 172, 211, 243, 171, 234, 254, 210, 119, 105, 248, 154, 19, 202, 7&gt;&gt;"},{"ref":"Utils.Keys.html#sign/3","title":"Utils.Keys.sign/3","type":"function","doc":"Prefixes a network ID string to a binary message and signs it with the given private key Example iex&gt; message = &quot;some message&quot; iex&gt; secret_key = &lt;&lt;34, 123, 222, 237, 180, 195, 221, 43, 85, 78, 166, 180, 72, 172, 103, 136,251, 230, 109, 241, 180, 248, 112, 147, 164, 80, 187, 167, 72, 242, 150, 245,52, 139, 208, 116, 83, 115, 83, 147, 226, 255, 140, 3, 198, 91, 69, 147, 243,189, 217, 79, 149, 122, 46, 124, 179, 20, 104, 139, 83, 68, 18, 128&gt;&gt; iex&gt; Utils.Keys.sign(message, secret_key, &quot;ae_uat&quot;) &lt;&lt;15, 246, 136, 55, 63, 30, 144, 154, 249, 161, 243, 93, 52, 0, 218, 22, 43, 200, 145, 252, 247, 218, 197, 125, 177, 17, 60, 177, 212, 106, 249, 130, 42, 179, 233, 174, 116, 145, 154, 244, 80, 48, 142, 153, 170, 34, 199, 219, 248, 107, 115, 155, 254, 69, 37, 68, 68, 1, 174, 95, 102, 10, 6, 14&gt;&gt;"},{"ref":"Utils.Keys.html#verify/3","title":"Utils.Keys.verify/3","type":"function","doc":"Verify that a message has been signed by a private key corresponding to the given public key Example iex&gt; signature = &lt;&lt;94, 26, 208, 168, 230, 154, 158, 226, 188, 217, 155, 170, 157, 33, 100, 22, 247, 171, 91, 120, 249, 52, 147, 194, 188, 1, 14, 5, 15, 166, 232, 202, 97, 96, 32, 32, 227, 151, 158, 216, 22, 68, 219, 5, 169, 229, 117, 147, 179, 43, 172, 211, 243, 171, 234, 254, 210, 119, 105, 248, 154, 19, 202, 7&gt;&gt; iex&gt; message = &quot;some message&quot; iex&gt; public_key = &lt;&lt;52, 139, 208, 116, 83, 115, 83, 147, 226, 255, 140, 3, 198, 91, 69, 147, 243, 189, 217, 79, 149, 122, 46, 124, 179, 20, 104, 139, 83, 68, 18, 128&gt;&gt; iex&gt; Utils.Keys.verify(signature, message, public_key) {:ok, &quot;some message&quot;}"},{"ref":"Utils.Keys.html#t:keypair/0","title":"Utils.Keys.keypair/0","type":"type","doc":""},{"ref":"Utils.Keys.html#t:message/0","title":"Utils.Keys.message/0","type":"type","doc":"An arbitrary binary message."},{"ref":"Utils.Keys.html#t:password/0","title":"Utils.Keys.password/0","type":"type","doc":"An arbitrary string password."},{"ref":"Utils.Keys.html#t:public_key/0","title":"Utils.Keys.public_key/0","type":"type","doc":"A base58c encoded public key."},{"ref":"Utils.Keys.html#t:secret_key/0","title":"Utils.Keys.secret_key/0","type":"type","doc":"A hex encoded private key."},{"ref":"Utils.Keys.html#t:signature/0","title":"Utils.Keys.signature/0","type":"type","doc":""},{"ref":"Utils.Serialization.html","title":"Utils.Serialization","type":"module","doc":"Transaction serialization."},{"ref":"Utils.Serialization.html#deserialize/2","title":"Utils.Serialization.deserialize/2","type":"function","doc":"Deserialize an RLP binary payload with the template corresponding to the given type Example iex&gt; payload = &lt;&lt;248, 224, 43, 1, 161, 1, 11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97, 130, 33, 131, 161, 5, 64, 216, 143, 81, 41, 52, 245, 89, 135, 253, 7, 12, 94, 142, 96, 251, 212, 96, 76, 248, 1, 152, 97, 16, 144, 62, 43, 186, 148, 174, 76, 114, 1, 136, 27, 193, 109, 103, 78, 200, 0, 0, 0, 0, 131, 15, 66, 64, 132, 59, 154, 202, 0, 184, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 112, 194, 27, 63, 171, 248, 210, 119, 144, 238, 34, 30, 100, 222, 2, 111, 12, 11, 11, 82, 86, 82, 53, 206, 145, 155, 60, 13, 206, 214, 183, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33&gt;&gt; iex&gt; type = :contract_call_tx iex&gt; Utils.Serialization.deserialize(payload, type) [ caller_id: {:id, :account, &lt;&lt;11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97&gt;&gt;}, nonce: 8579, contract_id: {:id, :contract, &lt;&lt;64, 216, 143, 81, 41, 52, 245, 89, 135, 253, 7, 12, 94, 142, 96, 251, 212, 96, 76, 248, 1, 152, 97, 16, 144, 62, 43, 186, 148, 174, 76, 114&gt;&gt;}, abi_version: 1, fee: 2000000000000000000, ttl: 0, amount: 0, gas: 1000000, gas_price: 1000000000, call_data: &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 112, 194, 27, 63, 171, 248, 210, 119, 144, 238, 34, 30, 100, 222, 2, 111, 12, 11, 11, 82, 86, 82, 53, 206, 145, 155, 60, 13, 206, 214, 183, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33&gt;&gt; ]"},{"ref":"Utils.Serialization.html#id_to_record/2","title":"Utils.Serialization.id_to_record/2","type":"function","doc":""},{"ref":"Utils.Serialization.html#serialize/1","title":"Utils.Serialization.serialize/1","type":"function","doc":"Serializes a transaction to a binary. Example iex&gt; alias AeternityNode.Model.{Ttl,OracleRegisterTx} iex&gt; Utils.Serialization.serialize( %OracleRegisterTx{ query_format: &lt;&lt;&quot;query_format&quot;&gt;&gt;, response_format: &lt;&lt;&quot;response_format&quot;&gt;&gt;, query_fee: 10, oracle_ttl: %Ttl{type: :absolute, value: 10}, account_id: &quot;ak_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, nonce: 37122, fee: 0, ttl: 10, abi_version: 0x30001 }) &lt;&lt;248, 77, 22, 1, 161, 1, 9, 51, 126, 98, 138, 255, 218, 224, 184, 180, 31, 234, 251, 255, 59, 141, 224, 214, 250, 79, 248, 30, 246, 237, 55, 83, 153, 134, 240, 138, 216, 129, 130, 145, 2, 140, 113, 117, 101, 114, 121, 95, 102, 111, ...&gt;&gt;"},{"ref":"Utils.Serialization.html#serialize/2","title":"Utils.Serialization.serialize/2","type":"function","doc":"Serializes a list of fields with the template corresponding to the given type Example iex&gt; fields = [{:id, :account, &lt;&lt;11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97&gt;&gt;}, 8579, {:id, :contract, &lt;&lt;64, 216, 143, 81, 41, 52, 245, 89, 135, 253, 7, 12, 94, 142, 96, 251, 212, 96, 76, 248, 1, 152, 97, 16, 144, 62, 43, 186, 148, 174, 76, 114&gt;&gt;}, 1, 2000000000000000000, 0, 0, 1000000, 1000000000, &lt;&lt;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 112, 194, 27, 63, 171, 248, 210, 119, 144, 238, 34, 30, 100, 222, 2, 111, 12, 11, 11, 82, 86, 82, 53, 206, 145, 155, 60, 13, 206, 214, 183, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33&gt;&gt;] iex&gt; type = :contract_call_tx iex&gt; Utils.Serialization.serialize(fields, type) &lt;&lt;248, 224, 43, 1, 161, 1, 11, 180, 237, 121, 39, 249, 123, 81, 225, 188, 181, 225, 52, 13, 18, 51, 91, 42, 43, 18, 200, 188, 82, 33, 214, 60, 75, 203, 57, 212, 30, 97, 130, 33, 131, 161, 5, 64, 216, 143, 81, 41, 52, 245, 89, 135, 253, 7, 12, 94, 142, 96, 251, 212, 96, 76, 248, 1, 152, 97, 16, 144, 62, 43, 186, 148, 174, 76, 114, 1, 136, 27, 193, 109, 103, 78, 200, 0, 0, 0, 0, 131, 15, 66, 64, 132, 59, 154, 202, 0, 184, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 112, 194, 27, 63, 171, 248, 210, 119, 144, 238, 34, 30, 100, 222, 2, 111, 12, 11, 11, 82, 86, 82, 53, 206, 145, 155, 60, 13, 206, 214, 183, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33&gt;&gt;"},{"ref":"Utils.Serialization.html#t:id/0","title":"Utils.Serialization.id/0","type":"type","doc":""},{"ref":"Utils.Serialization.html#t:id_type/0","title":"Utils.Serialization.id_type/0","type":"type","doc":""},{"ref":"Utils.Serialization.html#t:rlp_binary/0","title":"Utils.Serialization.rlp_binary/0","type":"type","doc":""},{"ref":"Utils.Serialization.html#t:structure_type/0","title":"Utils.Serialization.structure_type/0","type":"type","doc":""},{"ref":"Utils.Serialization.html#t:tx_type/0","title":"Utils.Serialization.tx_type/0","type":"type","doc":""},{"ref":"Utils.SerializationUtils.html","title":"Utils.SerializationUtils","type":"module","doc":"Serialization helper module."},{"ref":"Utils.SerializationUtils.html#process_tx_fields/1","title":"Utils.SerializationUtils.process_tx_fields/1","type":"function","doc":"Serializes a transaction to a tuple of list of fields and type, depending on its structure. Example iex&gt; alias AeternityNode.Model.SpendTx iex&gt; spend_tx = %SpendTx{ amount: 5_018_857_520_000_000_000, fee: 0, nonce: 37181, payload: &quot;&quot;, recipient_id: &quot;ak_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, sender_id: &quot;ak_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, ttl: 0 } iex&gt; Utils.SerializationUtils.process_tx_fields(spend_tx) {:ok, [ {:id, :account, &lt;&lt;9, 51, 126, 98, 138, 255, 218, 224, 184, 180, 31, 234, 251, 255, 59, 141, 224, 214, 250, 79, 248, 30, 246, 237, 55, 83, 153, 134, 240, 138, 216, 129&gt;&gt;}, {:id, :account, &lt;&lt;9, 51, 126, 98, 138, 255, 218, 224, 184, 180, 31, 234, 251, 255, 59, 141, 224, 214, 250, 79, 248, 30, 246, 237, 55, 83, 153, 134, 240, 138, 216, 129&gt;&gt;}, 5_018_857_520_000_000_000, 0, 0, 37181, &quot;&quot; ], :spend_tx}"},{"ref":"Utils.Transaction.html","title":"Utils.Transaction","type":"module","doc":"Transaction utils."},{"ref":"Utils.Transaction.html#calculate_fee/5","title":"Utils.Transaction.calculate_fee/5","type":"function","doc":"Calculate the fee of the transaction. Example iex&gt; spend_tx = %AeternityNode.Model.SpendTx{ amount: 40000000, fee: 0, nonce: 10624, payload: &quot;&quot;, recipient_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, sender_id: &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot;, ttl: 0 } iex&gt; Utils.Transaction.calculate_fee(spend_tx, 51_900, &quot;ae_uat&quot;, 0, 1_000_000) 16660000000"},{"ref":"Utils.Transaction.html#calculate_min_fee/3","title":"Utils.Transaction.calculate_min_fee/3","type":"function","doc":"Calculates minimum fee of given transaction, depends on height and network_id Example iex&gt; name_pre_claim_tx = %AeternityNode.Model.NamePreclaimTx{ account_id: &quot;ak_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, commitment_id: &quot;cm_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, fee: 0, nonce: 0, ttl: 0 } iex&gt; Utils.Transaction.calculate_min_fee(name_pre_claim_tx, 50000, &quot;ae_mainnet&quot;) 16500000000"},{"ref":"Utils.Transaction.html#default_await_attempt_interval/0","title":"Utils.Transaction.default_await_attempt_interval/0","type":"function","doc":""},{"ref":"Utils.Transaction.html#default_await_attempts/0","title":"Utils.Transaction.default_await_attempts/0","type":"function","doc":""},{"ref":"Utils.Transaction.html#default_payload/0","title":"Utils.Transaction.default_payload/0","type":"function","doc":""},{"ref":"Utils.Transaction.html#default_ttl/0","title":"Utils.Transaction.default_ttl/0","type":"function","doc":""},{"ref":"Utils.Transaction.html#dummy_fee/0","title":"Utils.Transaction.dummy_fee/0","type":"function","doc":""},{"ref":"Utils.Transaction.html#gas_limit/2","title":"Utils.Transaction.gas_limit/2","type":"function","doc":"Returns gas limit for given transaction, depends on height. Example iex&gt; oracle_register_tx = %AeternityNode.Model.OracleRegisterTx{ abi_version: 196609, account_id: &quot;ak_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, fee: 0, nonce: 37122, oracle_ttl: %AeternityNode.Model.Ttl{type: :absolute, value: 10}, query_fee: 10, query_format: &quot;query_format&quot;, response_format: &quot;response_format&quot;, ttl: 10 } iex&gt; Utils.Transaction.gas_limit(oracle_register_tx, 5) 16581"},{"ref":"Utils.Transaction.html#min_gas/2","title":"Utils.Transaction.min_gas/2","type":"function","doc":"Calculates minimum gas needed for given transaction, also depends on height. Example iex&gt; spend_tx = %AeternityNode.Model.SpendTx{ amount: 5018857520000000000, fee: 0, nonce: 37181, payload: &quot;&quot;, recipient_id: &quot;ak_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, sender_id: &quot;ak_542o93BKHiANzqNaFj6UurrJuDuxU61zCGr9LJCwtTUg34kWt&quot;, ttl: 0 } iex&gt; Utils.Transaction.min_gas(spend_tx, 50000) 16740"},{"ref":"Utils.Transaction.html#try_post/6","title":"Utils.Transaction.try_post/6","type":"function","doc":"Serialize the list of fields to an RLP transaction binary, sign it with the private key and network ID, add calculated minimum fee and post it to the node Example iex&gt; connection = AeternityNode.Connection.new(&quot;https://sdk-testnet.aepps.com/v2&quot;) iex&gt; public_key = &quot;ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU&quot; iex&gt; secret_key = &quot;a7a695f999b1872acb13d5b63a830a8ee060ba688a478a08c6e65dfad8a01cd70bb4ed7927f97b51e1bcb5e1340d12335b2a2b12c8bc5221d63c4bcb39d41e61&quot; iex&gt; network_id = &quot;ae_uat&quot; iex&gt; gas_price = 1_000_000_000_000 iex&gt; {:ok, nonce} = Utils.Account.next_valid_nonce(connection, public_key) iex&gt; source_code = &quot;contract Number = record state = { number : int } function init(x : int) = { number = x } function add_to_number(x : int) = state.number + x&quot; iex&gt; function_name = &quot;init&quot; iex&gt; function_args = [&quot;42&quot;] iex&gt; {:ok, calldata} = Core.Contract.create_calldata(source_code, function_name, function_args) iex&gt; source_hash_bytes = 32 iex&gt; {:ok, source_hash} = :enacl.generichash(source_hash_bytes, source_code) iex&gt; {:ok, %{byte_code: byte_code, type_info: type_info}} = Core.Contract.compile(source_code) iex&gt; byte_code_fields = [ source_hash, type_info, byte_code ] iex&gt; serialized_wrapped_code = Utils.Serialization.serialize(byte_code_fields, :sophia_byte_code) iex&gt; contract_create_tx = %AeternityNode.Model.ContractCreateTx{ owner_id: public_key, nonce: nonce, code: serialized_wrapped_code, abi_version: :unused, deposit: 0, amount: 0, gas: 1_000_000, gas_price: 1_000_000_000, fee: 0, ttl: Utils.Transaction.default_ttl(), call_data: calldata } iex&gt; {:ok, %{height: height}} = AeternityNode.Api.Chain.get_current_key_block_height(connection) iex&gt; Utils.Transaction.try_post(connection, secret_key, network_id, gas_price, contract_create_tx, height) {:ok, %{ block_hash: &quot;mh_29ZNDHkaa1k54Gr9HqFDJ3ubDg7Wi6yJEsfuCy9qKQEjxeHdH4&quot;, block_height: 68240, hash: &quot;th_gfVPUw5zerDAkokfanFrhoQk9WDJaCdbwS6dGxVQWZce7tU3j&quot; }}"},{"ref":"Utils.Transaction.html#t:tx_types/0","title":"Utils.Transaction.tx_types/0","type":"type","doc":""}]