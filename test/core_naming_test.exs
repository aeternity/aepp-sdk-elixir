defmodule CoreNamingTest do
  use ExUnit.Case

  alias AeppSDK.{Account, AENS}
  alias AeppSDK.Utils.{Keys, Serialization}
  alias AeternityNode.Api.NameService

  @test_name "a1234567890asdfghjkl.aet"
  @new_test_name "newa1234567890asdfghjkl.aet"
  setup_all do
    Code.require_file("test_utils.ex", "test/")
    TestUtils.get_test_data()
  end

  @tag :naming
  test "naming workflow", setup do
    # Pre-claim a name
    pre_claim = AENS.preclaim(setup.client, @test_name)
    assert match?({:ok, _}, pre_claim)

    # Claim a name
    {:ok, pre_claim_info} = pre_claim
    claim = AENS.claim(setup.client, @test_name, pre_claim_info.name_salt)
    assert match?({:ok, _}, claim)

    # Update a name
    list_of_pointers = [
      {Keys.public_key_to_binary("ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU"),
       Serialization.id_to_record(
         Keys.public_key_to_binary("ak_6A2vcm1Sz6aqJezkLCssUXcyZTX7X8D5UwbuS2fRJr9KkYpRU"),
         :account
       )}
    ]

    update =
      AENS.update_name(
        setup.client,
        @test_name,
        49_999,
        list_of_pointers,
        50_000
      )

    assert match?({:ok, _}, update)

    # Spending to another account, in order to transfer a name to it
    spend =
      Account.spend(
        %{setup.client | gas_price: 1_000_000_000_000},
        setup.valid_pub_key,
        setup.amount
      )

    assert match?({:ok, _}, spend)

    # Transfer a name to another account
    transfer = AENS.transfer_name(setup.client, @test_name, setup.valid_pub_key)

    assert match?({:ok, _}, transfer)

    # Pre-claim a new name (name_salt = 888)
    pre_claim_new = AENS.preclaim(setup.client, @new_test_name, 888)
    assert match?({:ok, _}, pre_claim_new)

    # Claim a new name
    claim_new = AENS.claim(setup.client, @new_test_name, 888)
    assert match?({:ok, _}, claim_new)

    # Revoke a new name
    revoke_new = AENS.revoke_name(setup.client, @new_test_name)
    assert match?({:ok, _}, revoke_new)
  end

  @tag :naming
  test "test naming workflow using pipe operator ", setup do
    # Pre-claim with claim (autogenerated salt)
    {:ok, claim_result} =
      setup.client
      |> AENS.preclaim("newname" <> @test_name)
      |> AENS.claim()

    # Update
    update_result =
      {:ok, claim_result}
      |> AENS.update()

    assert match?({:ok, _}, update_result)

    # Transfer
    transfer_result =
      {:ok, claim_result}
      |> AENS.transfer(setup.valid_pub_key)

    assert match?({:ok, _}, transfer_result)

    # Revoke
    # New preclaim, claim and revoke
    {:ok, new_revoke_result} =
      setup.client
      |> AENS.preclaim("newname1" <> @new_test_name)
      |> AENS.claim()
      |> AENS.revoke()

    assert match?(
             {:ok, %{reason: "Name revoked"}},
             NameService.get_name_entry_by_name(
               setup.client.connection,
               new_revoke_result.name
             )
           )
  end

  @tag :naming
  test "test naming error handling", setup do
    # Claim a new name
    assert {:ok, _claim_result} =
             setup.client
             |> AENS.preclaim("newname2" <> @test_name)
             |> AENS.claim()

    # Try to claim again already claimed name
    assert {:error, _claim_result} =
             setup.client
             |> AENS.preclaim("newname2" <> @test_name)
             |> AENS.claim()
  end
end
